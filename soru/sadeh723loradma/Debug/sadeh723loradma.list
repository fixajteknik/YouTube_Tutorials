
sadeh723loradma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c270  0800c270  0000d270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c744  0800c744  0000d744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c74c  0800c74c  0000d74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c750  0800c750  0000d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800c754  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000059c  240001d8  0800c92c  0000e1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000774  0800c92c  0000e774  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011d1d  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024a4  00000000  00000000  0001ff23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cc0  00000000  00000000  000223c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009c3  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032cb8  00000000  00000000  00023a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012129  00000000  00000000  00056703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143551  00000000  00000000  0006882c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001abd7d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004268  00000000  00000000  001abdc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  001b0028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c258 	.word	0x0800c258

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800c258 	.word	0x0800c258

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (huart->Instance == LPUART1) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <HAL_UART_RxCpltCallback+0x40>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d111      	bne.n	8000742 <HAL_UART_RxCpltCallback+0x36>
		// Gelen veriyi struct'a aktar
		memcpy(&receivedData, rxBuffer, sizeof(Signal2));
 800071e:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <HAL_UART_RxCpltCallback+0x44>)
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_UART_RxCpltCallback+0x48>)
 8000722:	4614      	mov	r4, r2
 8000724:	461d      	mov	r5, r3
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000732:	c407      	stmia	r4!, {r0, r1, r2}
 8000734:	7023      	strb	r3, [r4, #0]
		dataReady = 1; // Yeni veri işareti koy
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <HAL_UART_RxCpltCallback+0x4c>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		printf("data gelfi\r\n");
 800073c:	4807      	ldr	r0, [pc, #28]	@ (800075c <HAL_UART_RxCpltCallback+0x50>)
 800073e:	f009 fe8b 	bl	800a458 <puts>
	}
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bdb0      	pop	{r4, r5, r7, pc}
 800074a:	bf00      	nop
 800074c:	58000c00 	.word	0x58000c00
 8000750:	240005c0 	.word	0x240005c0
 8000754:	240005f0 	.word	0x240005f0
 8000758:	2400061d 	.word	0x2400061d
 800075c:	0800c270 	.word	0x0800c270

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000766:	f000 fb55 	bl	8000e14 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 ff71 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f873 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 fa0f 	bl	8000b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000776:	f000 f9e5 	bl	8000b44 <MX_DMA_Init>
  MX_BDMA_Init();
 800077a:	f000 f9bb 	bl	8000af4 <MX_BDMA_Init>
  MX_USART2_UART_Init();
 800077e:	f000 f921 	bl	80009c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000782:	f000 f96b 	bl	8000a5c <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000786:	f000 f8d1 	bl	800092c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&hlpuart1, rxBuffer, sizeof(Signal2));
 800078a:	222d      	movs	r2, #45	@ 0x2d
 800078c:	4921      	ldr	r1, [pc, #132]	@ (8000814 <main+0xb4>)
 800078e:	4822      	ldr	r0, [pc, #136]	@ (8000818 <main+0xb8>)
 8000790:	f007 f89a 	bl	80078c8 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Merhaba Fixaj\r\n\r\n \r\n");
 8000794:	4821      	ldr	r0, [pc, #132]	@ (800081c <main+0xbc>)
 8000796:	f009 fe5f 	bl	800a458 <puts>
	  	  		if (dataReady) {
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <main+0xc0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d032      	beq.n	800080a <main+0xaa>
	  	  			dataReady = 0; // Veri işaretini sıfırla
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <main+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

	  	  			// Şifre kontrolü
	  	  			if (strcmp(receivedData.sifre, "Fixaj.com") == 0) {
 80007aa:	491e      	ldr	r1, [pc, #120]	@ (8000824 <main+0xc4>)
 80007ac:	481e      	ldr	r0, [pc, #120]	@ (8000828 <main+0xc8>)
 80007ae:	f7ff fdaf 	bl	8000310 <strcmp>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d125      	bne.n	8000804 <main+0xa4>
	  	  				printf("Şifre doğru\r\n");
 80007b8:	481c      	ldr	r0, [pc, #112]	@ (800082c <main+0xcc>)
 80007ba:	f009 fe4d 	bl	800a458 <puts>
	  	  				printf("Konum: %s\r\n", receivedData.konum);
 80007be:	491c      	ldr	r1, [pc, #112]	@ (8000830 <main+0xd0>)
 80007c0:	481c      	ldr	r0, [pc, #112]	@ (8000834 <main+0xd4>)
 80007c2:	f009 fde1 	bl	800a388 <iprintf>
	  	  				printf("Buton durumu: %s\r\n",
	  	  						receivedData.btn1 ? "Aktif" : "Pasif");
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <main+0xc8>)
 80007c8:	7f9b      	ldrb	r3, [r3, #30]
	  	  				printf("Buton durumu: %s\r\n",
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <main+0x72>
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <main+0xd8>)
 80007d0:	e000      	b.n	80007d4 <main+0x74>
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <main+0xdc>)
 80007d4:	4619      	mov	r1, r3
 80007d6:	481a      	ldr	r0, [pc, #104]	@ (8000840 <main+0xe0>)
 80007d8:	f009 fdd6 	bl	800a388 <iprintf>

	  	  				// Float koordinat için btn2'yi dönüştür
	  	  				float koordinat = *(float*) (receivedData.btn2);
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <main+0xe4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	607b      	str	r3, [r7, #4]
	  	  				printf("Koordinat: %.6f\r\n", koordinat);
 80007e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ea:	ec53 2b17 	vmov	r2, r3, d7
 80007ee:	4816      	ldr	r0, [pc, #88]	@ (8000848 <main+0xe8>)
 80007f0:	f009 fdca 	bl	800a388 <iprintf>

	  	  				// Büyük sayı için btn3'ü dönüştür
	  	  				int buyukSayi = *(int*) (receivedData.btn3);
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <main+0xec>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	603b      	str	r3, [r7, #0]
	  	  				printf("Büyük sayı: %d\r\n", buyukSayi);
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <main+0xf0>)
 80007fe:	f009 fdc3 	bl	800a388 <iprintf>
 8000802:	e002      	b.n	800080a <main+0xaa>
	  	  			} else {
	  	  				printf("Şifre yanlış!\r\n");
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <main+0xf4>)
 8000806:	f009 fe27 	bl	800a458 <puts>
	  	  			}
	  	  		}

	  	  		HAL_Delay(1000); // Döngüyü yavaşlatmak için gecikme
 800080a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080e:	f000 ffb1 	bl	8001774 <HAL_Delay>
	  printf("Merhaba Fixaj\r\n\r\n \r\n");
 8000812:	e7bf      	b.n	8000794 <main+0x34>
 8000814:	240005f0 	.word	0x240005f0
 8000818:	24000224 	.word	0x24000224
 800081c:	0800c27c 	.word	0x0800c27c
 8000820:	2400061d 	.word	0x2400061d
 8000824:	0800c290 	.word	0x0800c290
 8000828:	240005c0 	.word	0x240005c0
 800082c:	0800c29c 	.word	0x0800c29c
 8000830:	240005cf 	.word	0x240005cf
 8000834:	0800c2ac 	.word	0x0800c2ac
 8000838:	0800c2b8 	.word	0x0800c2b8
 800083c:	0800c2c0 	.word	0x0800c2c0
 8000840:	0800c2c8 	.word	0x0800c2c8
 8000844:	240005df 	.word	0x240005df
 8000848:	0800c2dc 	.word	0x0800c2dc
 800084c:	240005e9 	.word	0x240005e9
 8000850:	0800c2f0 	.word	0x0800c2f0
 8000854:	0800c304 	.word	0x0800c304

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09c      	sub	sp, #112	@ 0x70
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	224c      	movs	r2, #76	@ 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f009 fed6 	bl	800a618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 fed0 	bl	800a618 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000878:	2002      	movs	r0, #2
 800087a:	f004 f965 	bl	8004b48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xcc>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800088a:	4a26      	ldr	r2, [pc, #152]	@ (8000924 <SystemClock_Config+0xcc>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <SystemClock_Config+0xcc>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089e:	bf00      	nop
 80008a0:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <SystemClock_Config+0xcc>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ac:	d1f8      	bne.n	80008a0 <SystemClock_Config+0x48>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ae:	f004 f93b 	bl	8004b28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <SystemClock_Config+0xd0>)
 80008b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <SystemClock_Config+0xd0>)
 80008b8:	f023 0318 	bic.w	r3, r3, #24
 80008bc:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008be:	2306      	movs	r3, #6
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 f970 	bl	8004bbc <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008e2:	f000 fac3 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	233f      	movs	r3, #63	@ 0x3f
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f6:	2340      	movs	r3, #64	@ 0x40
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2101      	movs	r1, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fd2f 	bl	8005370 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 faa8 	bl	8000e6c <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024800 	.word	0x58024800
 8000928:	58024400 	.word	0x58024400

0800092c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000932:	4a23      	ldr	r2, [pc, #140]	@ (80009c0 <MX_LPUART1_UART_Init+0x94>)
 8000934:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000938:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800093c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000974:	4811      	ldr	r0, [pc, #68]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000976:	f006 fe49 	bl	800760c <HAL_UART_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000980:	f000 fa74 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 8000988:	f008 ff3e 	bl	8009808 <HAL_UARTEx_SetTxFifoThreshold>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000992:	f000 fa6b 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 800099a:	f008 ff73 	bl	8009884 <HAL_UARTEx_SetRxFifoThreshold>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 fa62 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_LPUART1_UART_Init+0x90>)
 80009aa:	f008 fef4 	bl	8009796 <HAL_UARTEx_DisableFifoMode>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b4:	f000 fa5a 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24000224 	.word	0x24000224
 80009c0:	58000c00 	.word	0x58000c00

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <MX_USART2_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a0e:	f006 fdfd 	bl	800760c <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 fa28 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a20:	f008 fef2 	bl	8009808 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 fa1f 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a32:	f008 ff27 	bl	8009884 <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 fa16 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a42:	f008 fea8 	bl	8009796 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fa0e 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	240002b8 	.word	0x240002b8
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <MX_USART3_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000aa6:	f006 fdb1 	bl	800760c <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 f9dc 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000ab8:	f008 fea6 	bl	8009808 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f000 f9d3 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000aca:	f008 fedb 	bl	8009884 <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 f9ca 	bl	8000e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_USART3_UART_Init+0x90>)
 8000ada:	f008 fe5c 	bl	8009796 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f9c2 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2400034c 	.word	0x2400034c
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_BDMA_Init+0x4c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <MX_BDMA_Init+0x4c>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <MX_BDMA_Init+0x4c>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2081      	movs	r0, #129	@ 0x81
 8000b1e:	f000 ff28 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000b22:	2081      	movs	r0, #129	@ 0x81
 8000b24:	f000 ff3f 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2082      	movs	r0, #130	@ 0x82
 8000b2e:	f000 ff20 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8000b32:	2082      	movs	r0, #130	@ 0x82
 8000b34:	f000 ff37 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024400 	.word	0x58024400

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_DMA_Init+0x4c>)
 8000b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b50:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <MX_DMA_Init+0x4c>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <MX_DMA_Init+0x4c>)
 8000b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	200b      	movs	r0, #11
 8000b6e:	f000 ff00 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b72:	200b      	movs	r0, #11
 8000b74:	f000 ff17 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f000 fef8 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b82:	200c      	movs	r0, #12
 8000b84:	f000 ff0f 	bl	80019a6 <HAL_NVIC_EnableIRQ>

}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58024400 	.word	0x58024400

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	4a24      	ldr	r2, [pc, #144]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_GPIO_Init+0xcc>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2101      	movs	r1, #1
 8000c08:	4816      	ldr	r0, [pc, #88]	@ (8000c64 <MX_GPIO_Init+0xd0>)
 8000c0a:	f003 ff3f 	bl	8004a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buton1_Pin */
  GPIO_InitStruct.Pin = buton1_Pin;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c14:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(buton1_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <MX_GPIO_Init+0xd4>)
 8000c26:	f003 fd89 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <MX_GPIO_Init+0xd0>)
 8000c42:	f003 fd7b 	bl	800473c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(buton1_EXTI_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2028      	movs	r0, #40	@ 0x28
 8000c4c:	f000 fe91 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(buton1_EXTI_IRQn);
 8000c50:	2028      	movs	r0, #40	@ 0x28
 8000c52:	f000 fea8 	bl	80019a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020400 	.word	0x58020400
 8000c68:	58020800 	.word	0x58020800

08000c6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == buton1_Pin){
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c7c:	d12a      	bne.n	8000cd4 <HAL_GPIO_EXTI_Callback+0x68>
	    HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4816      	ldr	r0, [pc, #88]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x70>)
 8000c82:	f003 ff1c 	bl	8004abe <HAL_GPIO_TogglePin>

		mSignal.address_high = 0x00;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
		mSignal.address_low = 2;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	705a      	strb	r2, [r3, #1]
		mSignal.channel = 23;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c94:	2217      	movs	r2, #23
 8000c96:	709a      	strb	r2, [r3, #2]

		strcpy(mSignal.sifre, "Fixaj.com");    // "Fixaj.com\0"
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c9c:	cb03      	ldmia	r3!, {r0, r1}
 8000c9e:	6010      	str	r0, [r2, #0]
 8000ca0:	6051      	str	r1, [r2, #4]
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	8113      	strh	r3, [r2, #8]
		strcpy(mSignal.konum, "Teknofest");   // "Teknofest\0"
 8000ca6:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <HAL_GPIO_EXTI_Callback+0x80>)
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000caa:	cb03      	ldmia	r3!, {r0, r1}
 8000cac:	6010      	str	r0, [r2, #0]
 8000cae:	6051      	str	r1, [r2, #4]
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	8113      	strh	r3, [r2, #8]
		mSignal.btn1 = true; // true yerine 1
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		*(float*) mSignal.btn2 = 37.199386f;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000cc0:	601a      	str	r2, [r3, #0]
		*(int*) mSignal.btn3 = 1453;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x90>)
 8000cc4:	f240 52ad 	movw	r2, #1453	@ 0x5ad
 8000cc8:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*) &mSignal, sizeof(mSignal));
 8000cca:	2230      	movs	r2, #48	@ 0x30
 8000ccc:	4904      	ldr	r1, [pc, #16]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000cce:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cd0:	f006 fd7a 	bl	80077c8 <HAL_UART_Transmit_DMA>


	   // HAL_Delay(50);
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58020400 	.word	0x58020400
 8000ce0:	240001f4 	.word	0x240001f4
 8000ce4:	240001f7 	.word	0x240001f7
 8000ce8:	0800c290 	.word	0x0800c290
 8000cec:	24000206 	.word	0x24000206
 8000cf0:	0800c318 	.word	0x0800c318
 8000cf4:	24000216 	.word	0x24000216
 8000cf8:	4214cc2c 	.word	0x4214cc2c
 8000cfc:	24000220 	.word	0x24000220
 8000d00:	24000224 	.word	0x24000224

08000d04 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == LPUART1) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1a      	ldr	r2, [pc, #104]	@ (8000d7c <HAL_UART_TxCpltCallback+0x78>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12e      	bne.n	8000d74 <HAL_UART_TxCpltCallback+0x70>
		//Turn LD2 ON
		HAL_GPIO_TogglePin(led1_GPIO_Port	, led1_Pin);
 8000d16:	2101      	movs	r1, #1
 8000d18:	4819      	ldr	r0, [pc, #100]	@ (8000d80 <HAL_UART_TxCpltCallback+0x7c>)
 8000d1a:	f003 fed0 	bl	8004abe <HAL_GPIO_TogglePin>
		//	char message[] = "Merhaba Dünya\r\n";

		// DMA ile UART üzerinden gönder
		//HAL_UART_Transmit_DMA(&huart2, (uint8_t*) message, strlen(message));
		//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&mSignal, sizeof(mSignal));
		printf("Address High: %02X\r\n", mSignal.address_high);
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_UART_TxCpltCallback+0x80>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <HAL_UART_TxCpltCallback+0x84>)
 8000d26:	f009 fb2f 	bl	800a388 <iprintf>
		printf("Address Low: %02X\r\n", mSignal.address_low);
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_UART_TxCpltCallback+0x80>)
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <HAL_UART_TxCpltCallback+0x88>)
 8000d32:	f009 fb29 	bl	800a388 <iprintf>
		printf("Channel: %d\r\n", mSignal.channel);
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_UART_TxCpltCallback+0x80>)
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4814      	ldr	r0, [pc, #80]	@ (8000d90 <HAL_UART_TxCpltCallback+0x8c>)
 8000d3e:	f009 fb23 	bl	800a388 <iprintf>
		printf("Sifre: %s\r\n", mSignal.sifre);
 8000d42:	4914      	ldr	r1, [pc, #80]	@ (8000d94 <HAL_UART_TxCpltCallback+0x90>)
 8000d44:	4814      	ldr	r0, [pc, #80]	@ (8000d98 <HAL_UART_TxCpltCallback+0x94>)
 8000d46:	f009 fb1f 	bl	800a388 <iprintf>
		printf("Konum: %s\r\n", mSignal.konum);
 8000d4a:	4914      	ldr	r1, [pc, #80]	@ (8000d9c <HAL_UART_TxCpltCallback+0x98>)
 8000d4c:	4814      	ldr	r0, [pc, #80]	@ (8000da0 <HAL_UART_TxCpltCallback+0x9c>)
 8000d4e:	f009 fb1b 	bl	800a388 <iprintf>
		printf("Btn1: %d\r\n", mSignal.btn1);
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_UART_TxCpltCallback+0x80>)
 8000d54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <HAL_UART_TxCpltCallback+0xa0>)
 8000d5c:	f009 fb14 	bl	800a388 <iprintf>
		printf("Btn2 (Float): %f\r\n", *(float*) mSignal.btn2);
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_UART_TxCpltCallback+0xa4>)
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d6a:	ec53 2b17 	vmov	r2, r3, d7
 8000d6e:	480f      	ldr	r0, [pc, #60]	@ (8000dac <HAL_UART_TxCpltCallback+0xa8>)
 8000d70:	f009 fb0a 	bl	800a388 <iprintf>
	//	printf("Btn3 (Int): %d\r\n", *(int*) mSignal.btn3);

	}
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58000c00 	.word	0x58000c00
 8000d80:	58020400 	.word	0x58020400
 8000d84:	240001f4 	.word	0x240001f4
 8000d88:	0800c324 	.word	0x0800c324
 8000d8c:	0800c33c 	.word	0x0800c33c
 8000d90:	0800c350 	.word	0x0800c350
 8000d94:	240001f7 	.word	0x240001f7
 8000d98:	0800c360 	.word	0x0800c360
 8000d9c:	24000206 	.word	0x24000206
 8000da0:	0800c2ac 	.word	0x0800c2ac
 8000da4:	0800c36c 	.word	0x0800c36c
 8000da8:	24000216 	.word	0x24000216
 8000dac:	0800c378 	.word	0x0800c378

08000db0 <__io_putchar>:

int __io_putchar(int ch) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, &*c, 1, 10);
 8000dbe:	f107 010c 	add.w	r1, r7, #12
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <__io_putchar+0x28>)
 8000dc8:	f006 fc70 	bl	80076ac <HAL_UART_Transmit>
	return ch;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2400034c 	.word	0x2400034c

08000ddc <_write>:

int _write(int file, char *ptr, int len) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e009      	b.n	8000e02 <_write+0x26>
		__io_putchar(*ptr++);
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	60ba      	str	r2, [r7, #8]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffda 	bl	8000db0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf1      	blt.n	8000dee <_write+0x12>
	}
	return len;
 8000e0a:	687b      	ldr	r3, [r7, #4]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e26:	f000 fdd9 	bl	80019dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e36:	231f      	movs	r3, #31
 8000e38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e3a:	2387      	movs	r3, #135	@ 0x87
 8000e3c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e42:	2300      	movs	r3, #0
 8000e44:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e56:	463b      	mov	r3, r7
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fdf7 	bl	8001a4c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e5e:	2004      	movs	r0, #4
 8000e60:	f000 fdd4 	bl	8001a0c <HAL_MPU_Enable>

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <Error_Handler+0x8>

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_MspInit+0x30>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e84:	4a08      	ldr	r2, [pc, #32]	@ (8000ea8 <HAL_MspInit+0x30>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_MspInit+0x30>)
 8000e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	58024400 	.word	0x58024400

08000eac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0bc      	sub	sp, #240	@ 0xf0
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	22b8      	movs	r2, #184	@ 0xb8
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f009 fba3 	bl	800a618 <memset>
  if(huart->Instance==LPUART1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4aad      	ldr	r2, [pc, #692]	@ (800118c <HAL_UART_MspInit+0x2e0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	f040 80a5 	bne.w	8001028 <HAL_UART_MspInit+0x17c>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ede:	f04f 0204 	mov.w	r2, #4
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8000eea:	2305      	movs	r3, #5
 8000eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fdc7 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000f00:	f7ff ffb4 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f04:	4ba2      	ldr	r3, [pc, #648]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8000f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f0a:	4aa1      	ldr	r2, [pc, #644]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f14:	4b9e      	ldr	r3, [pc, #632]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8000f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b9b      	ldr	r3, [pc, #620]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a99      	ldr	r2, [pc, #612]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f40:	23c0      	movs	r3, #192	@ 0xc0
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f62:	4619      	mov	r1, r3
 8000f64:	488b      	ldr	r0, [pc, #556]	@ (8001194 <HAL_UART_MspInit+0x2e8>)
 8000f66:	f003 fbe9 	bl	800473c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f6c:	4a8b      	ldr	r2, [pc, #556]	@ (800119c <HAL_UART_MspInit+0x2f0>)
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8000f70:	4b89      	ldr	r3, [pc, #548]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f72:	2209      	movs	r2, #9
 8000f74:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f76:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7c:	4b86      	ldr	r3, [pc, #536]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f82:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8a:	4b83      	ldr	r3, [pc, #524]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f90:	4b81      	ldr	r3, [pc, #516]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f96:	4b80      	ldr	r3, [pc, #512]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f9c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000fa4:	487c      	ldr	r0, [pc, #496]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000fa6:	f000 fd91 	bl	8001acc <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000fb0:	f7ff ff5c 	bl	8000e6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a78      	ldr	r2, [pc, #480]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000fbc:	4a76      	ldr	r2, [pc, #472]	@ (8001198 <HAL_UART_MspInit+0x2ec>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = BDMA_Channel1;
 8000fc2:	4b77      	ldr	r3, [pc, #476]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fc4:	4a77      	ldr	r2, [pc, #476]	@ (80011a4 <HAL_UART_MspInit+0x2f8>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = BDMA_REQUEST_LPUART1_TX;
 8000fc8:	4b75      	ldr	r3, [pc, #468]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fca:	220a      	movs	r2, #10
 8000fcc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fce:	4b74      	ldr	r3, [pc, #464]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fd0:	2240      	movs	r2, #64	@ 0x40
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b72      	ldr	r3, [pc, #456]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b71      	ldr	r3, [pc, #452]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe8:	4b6d      	ldr	r3, [pc, #436]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000fee:	4b6c      	ldr	r3, [pc, #432]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000ffa:	4869      	ldr	r0, [pc, #420]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8000ffc:	f000 fd66 	bl	8001acc <HAL_DMA_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001006:	f7ff ff31 	bl	8000e6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a64      	ldr	r2, [pc, #400]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 800100e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001010:	4a63      	ldr	r2, [pc, #396]	@ (80011a0 <HAL_UART_MspInit+0x2f4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6393      	str	r3, [r2, #56]	@ 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	208e      	movs	r0, #142	@ 0x8e
 800101c:	f000 fca9 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001020:	208e      	movs	r0, #142	@ 0x8e
 8001022:	f000 fcc0 	bl	80019a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001026:	e117      	b.n	8001258 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a5e      	ldr	r2, [pc, #376]	@ (80011a8 <HAL_UART_MspInit+0x2fc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 80c6 	bne.w	80011c0 <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001034:	f04f 0202 	mov.w	r2, #2
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fd1c 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8001056:	f7ff ff09 	bl	8000e6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800105a:	4b4d      	ldr	r3, [pc, #308]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 800105c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001060:	4a4b      	ldr	r2, [pc, #300]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001066:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800106a:	4b49      	ldr	r3, [pc, #292]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 800106c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b45      	ldr	r3, [pc, #276]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	4a44      	ldr	r2, [pc, #272]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001088:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <HAL_UART_MspInit+0x2e4>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001096:	2360      	movs	r3, #96	@ 0x60
 8001098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ae:	2307      	movs	r3, #7
 80010b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010b8:	4619      	mov	r1, r3
 80010ba:	483c      	ldr	r0, [pc, #240]	@ (80011ac <HAL_UART_MspInit+0x300>)
 80010bc:	f003 fb3e 	bl	800473c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010c2:	4a3c      	ldr	r2, [pc, #240]	@ (80011b4 <HAL_UART_MspInit+0x308>)
 80010c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010c8:	222c      	movs	r2, #44	@ 0x2c
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010cc:	4b38      	ldr	r3, [pc, #224]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010ce:	2240      	movs	r2, #64	@ 0x40
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010de:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e0:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e6:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010fe:	482c      	ldr	r0, [pc, #176]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 8001100:	f000 fce4 	bl	8001acc <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x262>
      Error_Handler();
 800110a:	f7ff feaf 	bl	8000e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 8001112:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001114:	4a26      	ldr	r2, [pc, #152]	@ (80011b0 <HAL_UART_MspInit+0x304>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 800111c:	4a27      	ldr	r2, [pc, #156]	@ (80011bc <HAL_UART_MspInit+0x310>)
 800111e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001122:	222b      	movs	r2, #43	@ 0x2b
 8001124:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001134:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001138:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800114c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800115a:	4817      	ldr	r0, [pc, #92]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 800115c:	f000 fcb6 	bl	8001acc <HAL_DMA_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0x2be>
      Error_Handler();
 8001166:	f7ff fe81 	bl	8000e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 800116e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <HAL_UART_MspInit+0x30c>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2026      	movs	r0, #38	@ 0x26
 800117e:	f000 fbf8 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001182:	2026      	movs	r0, #38	@ 0x26
 8001184:	f000 fc0f 	bl	80019a6 <HAL_NVIC_EnableIRQ>
}
 8001188:	e066      	b.n	8001258 <HAL_UART_MspInit+0x3ac>
 800118a:	bf00      	nop
 800118c:	58000c00 	.word	0x58000c00
 8001190:	58024400 	.word	0x58024400
 8001194:	58020400 	.word	0x58020400
 8001198:	240003e0 	.word	0x240003e0
 800119c:	58025408 	.word	0x58025408
 80011a0:	24000458 	.word	0x24000458
 80011a4:	5802541c 	.word	0x5802541c
 80011a8:	40004400 	.word	0x40004400
 80011ac:	58020c00 	.word	0x58020c00
 80011b0:	240004d0 	.word	0x240004d0
 80011b4:	40020010 	.word	0x40020010
 80011b8:	24000548 	.word	0x24000548
 80011bc:	40020028 	.word	0x40020028
  else if(huart->Instance==USART3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <HAL_UART_MspInit+0x3b4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d146      	bne.n	8001258 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ca:	f04f 0202 	mov.w	r2, #2
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fc51 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x344>
      Error_Handler();
 80011ec:	f7ff fe3e 	bl	8000e6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_UART_MspInit+0x3b8>)
 80011f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <HAL_UART_MspInit+0x3b8>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_UART_MspInit+0x3b8>)
 8001202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_UART_MspInit+0x3b8>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <HAL_UART_MspInit+0x3b8>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_UART_MspInit+0x3b8>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800122c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001230:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001246:	2307      	movs	r3, #7
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_UART_MspInit+0x3bc>)
 8001254:	f003 fa72 	bl	800473c <HAL_GPIO_Init>
}
 8001258:	bf00      	nop
 800125a:	37f0      	adds	r7, #240	@ 0xf0
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004800 	.word	0x40004800
 8001264:	58024400 	.word	0x58024400
 8001268:	58020c00 	.word	0x58020c00

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <NMI_Handler+0x4>

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <MemManage_Handler+0x4>

08001284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <UsageFault_Handler+0x4>

08001294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c2:	f000 fa37 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <DMA1_Stream0_IRQHandler+0x10>)
 80012d2:	f001 ff21 	bl	8003118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	240004d0 	.word	0x240004d0

080012e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <DMA1_Stream1_IRQHandler+0x10>)
 80012e6:	f001 ff17 	bl	8003118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000548 	.word	0x24000548

080012f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <USART2_IRQHandler+0x10>)
 80012fa:	f006 fb31 	bl	8007960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	240002b8 	.word	0x240002b8

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(buton1_Pin);
 800130c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001310:	f003 fbef 	bl	8004af2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <BDMA_Channel0_IRQHandler+0x10>)
 800131e:	f001 fefb 	bl	8003118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	240003e0 	.word	0x240003e0

0800132c <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <BDMA_Channel1_IRQHandler+0x10>)
 8001332:	f001 fef1 	bl	8003118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	24000458 	.word	0x24000458

08001340 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <LPUART1_IRQHandler+0x10>)
 8001346:	f006 fb0b 	bl	8007960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	24000224 	.word	0x24000224

08001354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_kill>:

int _kill(int pid, int sig)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800136e:	f009 f9a5 	bl	800a6bc <__errno>
 8001372:	4603      	mov	r3, r0
 8001374:	2216      	movs	r2, #22
 8001376:	601a      	str	r2, [r3, #0]
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_exit>:

void _exit (int status)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffe7 	bl	8001364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001396:	bf00      	nop
 8001398:	e7fd      	b.n	8001396 <_exit+0x12>

0800139a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e00a      	b.n	80013c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ac:	f3af 8000 	nop.w
 80013b0:	4601      	mov	r1, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	b2ca      	uxtb	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf0      	blt.n	80013ac <_read+0x12>
  }

  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fc:	605a      	str	r2, [r3, #4]
  return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f009 f926 	bl	800a6bc <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	24050000 	.word	0x24050000
 800149c:	00000400 	.word	0x00000400
 80014a0:	24000620 	.word	0x24000620
 80014a4:	24000778 	.word	0x24000778

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014ac:	4b3e      	ldr	r3, [pc, #248]	@ (80015a8 <SystemInit+0x100>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a3d      	ldr	r2, [pc, #244]	@ (80015a8 <SystemInit+0x100>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014bc:	4b3b      	ldr	r3, [pc, #236]	@ (80015ac <SystemInit+0x104>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d807      	bhi.n	80014d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c8:	4b38      	ldr	r3, [pc, #224]	@ (80015ac <SystemInit+0x104>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 030f 	bic.w	r3, r3, #15
 80014d0:	4a36      	ldr	r2, [pc, #216]	@ (80015ac <SystemInit+0x104>)
 80014d2:	f043 0307 	orr.w	r3, r3, #7
 80014d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014d8:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <SystemInit+0x108>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a34      	ldr	r2, [pc, #208]	@ (80015b0 <SystemInit+0x108>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014e4:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <SystemInit+0x108>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ea:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <SystemInit+0x108>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4930      	ldr	r1, [pc, #192]	@ (80015b0 <SystemInit+0x108>)
 80014f0:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <SystemInit+0x10c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <SystemInit+0x104>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001502:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <SystemInit+0x104>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 030f 	bic.w	r3, r3, #15
 800150a:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <SystemInit+0x104>)
 800150c:	f043 0307 	orr.w	r3, r3, #7
 8001510:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001512:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <SystemInit+0x108>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <SystemInit+0x108>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800151e:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <SystemInit+0x108>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <SystemInit+0x108>)
 8001526:	4a24      	ldr	r2, [pc, #144]	@ (80015b8 <SystemInit+0x110>)
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <SystemInit+0x108>)
 800152c:	4a23      	ldr	r2, [pc, #140]	@ (80015bc <SystemInit+0x114>)
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001530:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <SystemInit+0x108>)
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <SystemInit+0x118>)
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <SystemInit+0x108>)
 8001538:	2200      	movs	r2, #0
 800153a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <SystemInit+0x108>)
 800153e:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <SystemInit+0x118>)
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <SystemInit+0x108>)
 8001544:	2200      	movs	r2, #0
 8001546:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <SystemInit+0x108>)
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <SystemInit+0x118>)
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <SystemInit+0x108>)
 8001550:	2200      	movs	r2, #0
 8001552:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <SystemInit+0x108>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	@ (80015b0 <SystemInit+0x108>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <SystemInit+0x108>)
 8001562:	2200      	movs	r2, #0
 8001564:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <SystemInit+0x108>)
 8001568:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800156c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <SystemInit+0x108>)
 8001576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800157a:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <SystemInit+0x108>)
 800157c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001580:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <SystemInit+0x11c>)
 8001586:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800158a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <SystemInit+0x108>)
 800158e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001592:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <SystemInit+0x108>)
 8001594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001598:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	52002000 	.word	0x52002000
 80015b0:	58024400 	.word	0x58024400
 80015b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015b8:	02020200 	.word	0x02020200
 80015bc:	01ff0000 	.word	0x01ff0000
 80015c0:	01010280 	.word	0x01010280
 80015c4:	52004000 	.word	0x52004000

080015c8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <ExitRun0Mode+0x2c>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <ExitRun0Mode+0x2c>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80015d8:	bf00      	nop
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <ExitRun0Mode+0x2c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f9      	beq.n	80015da <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	58024800 	.word	0x58024800

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001634 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80015fc:	f7ff ffe4 	bl	80015c8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001600:	f7ff ff52 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f009 f84d 	bl	800a6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff f897 	bl	8000760 <main>
  bx  lr
 8001632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001638:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800163c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001640:	0800c754 	.word	0x0800c754
  ldr r2, =_sbss
 8001644:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001648:	24000774 	.word	0x24000774

0800164c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC3_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001656:	2003      	movs	r0, #3
 8001658:	f000 f980 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800165c:	f004 f83e 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_Init+0x68>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	4913      	ldr	r1, [pc, #76]	@ (80016bc <HAL_Init+0x6c>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_Init+0x68>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <HAL_Init+0x6c>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_Init+0x70>)
 8001692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_Init+0x74>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f814 	bl	80016c8 <HAL_InitTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e002      	b.n	80016b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016aa:	f7ff fbe5 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024400 	.word	0x58024400
 80016bc:	0800c38c 	.word	0x0800c38c
 80016c0:	24000004 	.word	0x24000004
 80016c4:	24000000 	.word	0x24000000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_InitTick+0x60>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e021      	b.n	8001720 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <HAL_InitTick+0x64>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_InitTick+0x60>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f965 	bl	80019c2 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f92f 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <HAL_InitTick+0x68>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2400000c 	.word	0x2400000c
 800172c:	24000000 	.word	0x24000000
 8001730:	24000008 	.word	0x24000008

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2400000c 	.word	0x2400000c
 8001758:	24000624 	.word	0x24000624

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	24000624 	.word	0x24000624

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2400000c 	.word	0x2400000c

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <__NVIC_SetPriorityGrouping+0x40>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x40>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	05fa0000 	.word	0x05fa0000

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	@ (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	@ (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	@ (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff40 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff90 	bl	80018b0 <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5f 	bl	800185c <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff33 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa4 	bl	8001918 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019e0:	f3bf 8f5f 	dmb	sy
}
 80019e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <HAL_MPU_Disable+0x28>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <HAL_MPU_Disable+0x28>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_MPU_Disable+0x2c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00
 8001a08:	e000ed90 	.word	0xe000ed90

08001a0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a14:	4a0b      	ldr	r2, [pc, #44]	@ (8001a44 <HAL_MPU_Enable+0x38>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_MPU_Enable+0x3c>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	4a09      	ldr	r2, [pc, #36]	@ (8001a48 <HAL_MPU_Enable+0x3c>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a28:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a2a:	f3bf 8f4f 	dsb	sy
}
 8001a2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a30:	f3bf 8f6f 	isb	sy
}
 8001a34:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed90 	.word	0xe000ed90
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	785a      	ldrb	r2, [r3, #1]
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a68:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <HAL_MPU_ConfigRegion+0x7c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7adb      	ldrb	r3, [r3, #11]
 8001a7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7a9b      	ldrb	r3, [r3, #10]
 8001a82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7b5b      	ldrb	r3, [r3, #13]
 8001a8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b9b      	ldrb	r3, [r3, #14]
 8001a92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7bdb      	ldrb	r3, [r3, #15]
 8001a9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7a5b      	ldrb	r3, [r3, #9]
 8001aa2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7a1b      	ldrb	r3, [r3, #8]
 8001aaa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ab6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab8:	6113      	str	r3, [r2, #16]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed90 	.word	0xe000ed90

08001acc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fe42 	bl	800175c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e312      	b.n	800210a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a66      	ldr	r2, [pc, #408]	@ (8001c84 <HAL_DMA_Init+0x1b8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d04a      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a65      	ldr	r2, [pc, #404]	@ (8001c88 <HAL_DMA_Init+0x1bc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d045      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <HAL_DMA_Init+0x1c0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d040      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a62      	ldr	r2, [pc, #392]	@ (8001c90 <HAL_DMA_Init+0x1c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d03b      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a60      	ldr	r2, [pc, #384]	@ (8001c94 <HAL_DMA_Init+0x1c8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d036      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001c98 <HAL_DMA_Init+0x1cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d031      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5d      	ldr	r2, [pc, #372]	@ (8001c9c <HAL_DMA_Init+0x1d0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02c      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca0 <HAL_DMA_Init+0x1d4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d027      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca4 <HAL_DMA_Init+0x1d8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d022      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a59      	ldr	r2, [pc, #356]	@ (8001ca8 <HAL_DMA_Init+0x1dc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d01d      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a57      	ldr	r2, [pc, #348]	@ (8001cac <HAL_DMA_Init+0x1e0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d018      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a56      	ldr	r2, [pc, #344]	@ (8001cb0 <HAL_DMA_Init+0x1e4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d013      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a54      	ldr	r2, [pc, #336]	@ (8001cb4 <HAL_DMA_Init+0x1e8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00e      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a53      	ldr	r2, [pc, #332]	@ (8001cb8 <HAL_DMA_Init+0x1ec>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a51      	ldr	r2, [pc, #324]	@ (8001cbc <HAL_DMA_Init+0x1f0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_DMA_Init+0xb8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a50      	ldr	r2, [pc, #320]	@ (8001cc0 <HAL_DMA_Init+0x1f4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_DMA_Init+0xbc>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_DMA_Init+0xbe>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 813c 	beq.w	8001e08 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a37      	ldr	r2, [pc, #220]	@ (8001c84 <HAL_DMA_Init+0x1b8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d04a      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a36      	ldr	r2, [pc, #216]	@ (8001c88 <HAL_DMA_Init+0x1bc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d045      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a34      	ldr	r2, [pc, #208]	@ (8001c8c <HAL_DMA_Init+0x1c0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d040      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a33      	ldr	r2, [pc, #204]	@ (8001c90 <HAL_DMA_Init+0x1c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d03b      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a31      	ldr	r2, [pc, #196]	@ (8001c94 <HAL_DMA_Init+0x1c8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d036      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a30      	ldr	r2, [pc, #192]	@ (8001c98 <HAL_DMA_Init+0x1cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c9c <HAL_DMA_Init+0x1d0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02c      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca0 <HAL_DMA_Init+0x1d4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d027      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca4 <HAL_DMA_Init+0x1d8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d022      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca8 <HAL_DMA_Init+0x1dc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01d      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	@ (8001cac <HAL_DMA_Init+0x1e0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d018      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <HAL_DMA_Init+0x1e4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	@ (8001cb4 <HAL_DMA_Init+0x1e8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <HAL_DMA_Init+0x1ec>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a22      	ldr	r2, [pc, #136]	@ (8001cbc <HAL_DMA_Init+0x1f0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_Init+0x174>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_DMA_Init+0x1f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d108      	bne.n	8001c52 <HAL_DMA_Init+0x186>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e007      	b.n	8001c62 <HAL_DMA_Init+0x196>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c62:	e02f      	b.n	8001cc4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c64:	f7ff fd7a 	bl	800175c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d928      	bls.n	8001cc4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e242      	b.n	800210a <HAL_DMA_Init+0x63e>
 8001c84:	40020010 	.word	0x40020010
 8001c88:	40020028 	.word	0x40020028
 8001c8c:	40020040 	.word	0x40020040
 8001c90:	40020058 	.word	0x40020058
 8001c94:	40020070 	.word	0x40020070
 8001c98:	40020088 	.word	0x40020088
 8001c9c:	400200a0 	.word	0x400200a0
 8001ca0:	400200b8 	.word	0x400200b8
 8001ca4:	40020410 	.word	0x40020410
 8001ca8:	40020428 	.word	0x40020428
 8001cac:	40020440 	.word	0x40020440
 8001cb0:	40020458 	.word	0x40020458
 8001cb4:	40020470 	.word	0x40020470
 8001cb8:	40020488 	.word	0x40020488
 8001cbc:	400204a0 	.word	0x400204a0
 8001cc0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1c8      	bne.n	8001c64 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4b83      	ldr	r3, [pc, #524]	@ (8001eec <HAL_DMA_Init+0x420>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	4313      	orrs	r3, r2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b28      	cmp	r3, #40	@ 0x28
 8001d2e:	d903      	bls.n	8001d38 <HAL_DMA_Init+0x26c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d36:	d91f      	bls.n	8001d78 <HAL_DMA_Init+0x2ac>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d3e:	d903      	bls.n	8001d48 <HAL_DMA_Init+0x27c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b42      	cmp	r3, #66	@ 0x42
 8001d46:	d917      	bls.n	8001d78 <HAL_DMA_Init+0x2ac>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b46      	cmp	r3, #70	@ 0x46
 8001d4e:	d903      	bls.n	8001d58 <HAL_DMA_Init+0x28c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b48      	cmp	r3, #72	@ 0x48
 8001d56:	d90f      	bls.n	8001d78 <HAL_DMA_Init+0x2ac>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d5e:	d903      	bls.n	8001d68 <HAL_DMA_Init+0x29c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b52      	cmp	r3, #82	@ 0x52
 8001d66:	d907      	bls.n	8001d78 <HAL_DMA_Init+0x2ac>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b73      	cmp	r3, #115	@ 0x73
 8001d6e:	d905      	bls.n	8001d7c <HAL_DMA_Init+0x2b0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b77      	cmp	r3, #119	@ 0x77
 8001d76:	d801      	bhi.n	8001d7c <HAL_DMA_Init+0x2b0>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_Init+0x2b2>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d88:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f023 0307 	bic.w	r3, r3, #7
 8001da0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d117      	bne.n	8001de4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00e      	beq.n	8001de4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f002 fb2e 	bl	8004428 <DMA_CheckFifoParam>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2240      	movs	r2, #64	@ 0x40
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e192      	b.n	800210a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f002 fa69 	bl	80042c4 <DMA_CalcBaseAndBitshift>
 8001df2:	4603      	mov	r3, r0
 8001df4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	223f      	movs	r2, #63	@ 0x3f
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	e0c8      	b.n	8001f9a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a38      	ldr	r2, [pc, #224]	@ (8001ef0 <HAL_DMA_Init+0x424>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a37      	ldr	r2, [pc, #220]	@ (8001ef4 <HAL_DMA_Init+0x428>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01d      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a35      	ldr	r2, [pc, #212]	@ (8001ef8 <HAL_DMA_Init+0x42c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a34      	ldr	r2, [pc, #208]	@ (8001efc <HAL_DMA_Init+0x430>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a32      	ldr	r2, [pc, #200]	@ (8001f00 <HAL_DMA_Init+0x434>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a31      	ldr	r2, [pc, #196]	@ (8001f04 <HAL_DMA_Init+0x438>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2f      	ldr	r2, [pc, #188]	@ (8001f08 <HAL_DMA_Init+0x43c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_DMA_Init+0x38c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2e      	ldr	r2, [pc, #184]	@ (8001f0c <HAL_DMA_Init+0x440>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_DMA_Init+0x390>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_Init+0x392>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8092 	beq.w	8001f88 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a21      	ldr	r2, [pc, #132]	@ (8001ef0 <HAL_DMA_Init+0x424>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d021      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a20      	ldr	r2, [pc, #128]	@ (8001ef4 <HAL_DMA_Init+0x428>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01c      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <HAL_DMA_Init+0x42c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d017      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_DMA_Init+0x430>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <HAL_DMA_Init+0x434>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f04 <HAL_DMA_Init+0x438>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <HAL_DMA_Init+0x43c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_DMA_Init+0x3e6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <HAL_DMA_Init+0x440>)
 8001eb0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <HAL_DMA_Init+0x444>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b40      	cmp	r3, #64	@ 0x40
 8001ed8:	d01c      	beq.n	8001f14 <HAL_DMA_Init+0x448>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b80      	cmp	r3, #128	@ 0x80
 8001ee0:	d102      	bne.n	8001ee8 <HAL_DMA_Init+0x41c>
 8001ee2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ee6:	e016      	b.n	8001f16 <HAL_DMA_Init+0x44a>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e014      	b.n	8001f16 <HAL_DMA_Init+0x44a>
 8001eec:	fe10803f 	.word	0xfe10803f
 8001ef0:	58025408 	.word	0x58025408
 8001ef4:	5802541c 	.word	0x5802541c
 8001ef8:	58025430 	.word	0x58025430
 8001efc:	58025444 	.word	0x58025444
 8001f00:	58025458 	.word	0x58025458
 8001f04:	5802546c 	.word	0x5802546c
 8001f08:	58025480 	.word	0x58025480
 8001f0c:	58025494 	.word	0x58025494
 8001f10:	fffe000f 	.word	0xfffe000f
 8001f14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68d2      	ldr	r2, [r2, #12]
 8001f1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002114 <HAL_DMA_Init+0x648>)
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a6e      	ldr	r2, [pc, #440]	@ (8002118 <HAL_DMA_Init+0x64c>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f002 f9a9 	bl	80042c4 <DMA_CalcBaseAndBitshift>
 8001f72:	4603      	mov	r3, r0
 8001f74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2201      	movs	r2, #1
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	e008      	b.n	8001f9a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0b7      	b.n	800210a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800211c <HAL_DMA_Init+0x650>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d072      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5d      	ldr	r2, [pc, #372]	@ (8002120 <HAL_DMA_Init+0x654>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d06d      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002124 <HAL_DMA_Init+0x658>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d068      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a5a      	ldr	r2, [pc, #360]	@ (8002128 <HAL_DMA_Init+0x65c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d063      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a59      	ldr	r2, [pc, #356]	@ (800212c <HAL_DMA_Init+0x660>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d05e      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a57      	ldr	r2, [pc, #348]	@ (8002130 <HAL_DMA_Init+0x664>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d059      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a56      	ldr	r2, [pc, #344]	@ (8002134 <HAL_DMA_Init+0x668>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d054      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a54      	ldr	r2, [pc, #336]	@ (8002138 <HAL_DMA_Init+0x66c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04f      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a53      	ldr	r2, [pc, #332]	@ (800213c <HAL_DMA_Init+0x670>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04a      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a51      	ldr	r2, [pc, #324]	@ (8002140 <HAL_DMA_Init+0x674>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d045      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a50      	ldr	r2, [pc, #320]	@ (8002144 <HAL_DMA_Init+0x678>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d040      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a4e      	ldr	r2, [pc, #312]	@ (8002148 <HAL_DMA_Init+0x67c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d03b      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a4d      	ldr	r2, [pc, #308]	@ (800214c <HAL_DMA_Init+0x680>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d036      	beq.n	800208a <HAL_DMA_Init+0x5be>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <HAL_DMA_Init+0x684>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_DMA_Init+0x688>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d02c      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a48      	ldr	r2, [pc, #288]	@ (8002158 <HAL_DMA_Init+0x68c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d027      	beq.n	800208a <HAL_DMA_Init+0x5be>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a47      	ldr	r2, [pc, #284]	@ (800215c <HAL_DMA_Init+0x690>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a45      	ldr	r2, [pc, #276]	@ (8002160 <HAL_DMA_Init+0x694>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01d      	beq.n	800208a <HAL_DMA_Init+0x5be>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a44      	ldr	r2, [pc, #272]	@ (8002164 <HAL_DMA_Init+0x698>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d018      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a42      	ldr	r2, [pc, #264]	@ (8002168 <HAL_DMA_Init+0x69c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a41      	ldr	r2, [pc, #260]	@ (800216c <HAL_DMA_Init+0x6a0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Init+0x5be>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3f      	ldr	r2, [pc, #252]	@ (8002170 <HAL_DMA_Init+0x6a4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3e      	ldr	r2, [pc, #248]	@ (8002174 <HAL_DMA_Init+0x6a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Init+0x5be>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3c      	ldr	r2, [pc, #240]	@ (8002178 <HAL_DMA_Init+0x6ac>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_DMA_Init+0x5c2>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_DMA_Init+0x5c4>
 800208e:	2300      	movs	r3, #0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d032      	beq.n	80020fa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f002 fa43 	bl	8004520 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b80      	cmp	r3, #128	@ 0x80
 80020a0:	d102      	bne.n	80020a8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <HAL_DMA_Init+0x61c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d80c      	bhi.n	80020e8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f002 fac0 	bl	8004654 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	e008      	b.n	80020fa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	a7fdabf8 	.word	0xa7fdabf8
 8002118:	cccccccd 	.word	0xcccccccd
 800211c:	40020010 	.word	0x40020010
 8002120:	40020028 	.word	0x40020028
 8002124:	40020040 	.word	0x40020040
 8002128:	40020058 	.word	0x40020058
 800212c:	40020070 	.word	0x40020070
 8002130:	40020088 	.word	0x40020088
 8002134:	400200a0 	.word	0x400200a0
 8002138:	400200b8 	.word	0x400200b8
 800213c:	40020410 	.word	0x40020410
 8002140:	40020428 	.word	0x40020428
 8002144:	40020440 	.word	0x40020440
 8002148:	40020458 	.word	0x40020458
 800214c:	40020470 	.word	0x40020470
 8002150:	40020488 	.word	0x40020488
 8002154:	400204a0 	.word	0x400204a0
 8002158:	400204b8 	.word	0x400204b8
 800215c:	58025408 	.word	0x58025408
 8002160:	5802541c 	.word	0x5802541c
 8002164:	58025430 	.word	0x58025430
 8002168:	58025444 	.word	0x58025444
 800216c:	58025458 	.word	0x58025458
 8002170:	5802546c 	.word	0x5802546c
 8002174:	58025480 	.word	0x58025480
 8002178:	58025494 	.word	0x58025494

0800217c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e226      	b.n	80025e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Start_IT+0x2a>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e21f      	b.n	80025e6 <HAL_DMA_Start_IT+0x46a>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	f040 820a 	bne.w	80025d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a68      	ldr	r2, [pc, #416]	@ (8002370 <HAL_DMA_Start_IT+0x1f4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d04a      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a66      	ldr	r2, [pc, #408]	@ (8002374 <HAL_DMA_Start_IT+0x1f8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d045      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <HAL_DMA_Start_IT+0x1fc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d040      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a63      	ldr	r2, [pc, #396]	@ (800237c <HAL_DMA_Start_IT+0x200>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d03b      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a62      	ldr	r2, [pc, #392]	@ (8002380 <HAL_DMA_Start_IT+0x204>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d036      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a60      	ldr	r2, [pc, #384]	@ (8002384 <HAL_DMA_Start_IT+0x208>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d031      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5f      	ldr	r2, [pc, #380]	@ (8002388 <HAL_DMA_Start_IT+0x20c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d02c      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_DMA_Start_IT+0x210>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d027      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5c      	ldr	r2, [pc, #368]	@ (8002390 <HAL_DMA_Start_IT+0x214>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5a      	ldr	r2, [pc, #360]	@ (8002394 <HAL_DMA_Start_IT+0x218>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01d      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a59      	ldr	r2, [pc, #356]	@ (8002398 <HAL_DMA_Start_IT+0x21c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a57      	ldr	r2, [pc, #348]	@ (800239c <HAL_DMA_Start_IT+0x220>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_DMA_Start_IT+0x224>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a54      	ldr	r2, [pc, #336]	@ (80023a4 <HAL_DMA_Start_IT+0x228>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a53      	ldr	r2, [pc, #332]	@ (80023a8 <HAL_DMA_Start_IT+0x22c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_DMA_Start_IT+0xee>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a51      	ldr	r2, [pc, #324]	@ (80023ac <HAL_DMA_Start_IT+0x230>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <HAL_DMA_Start_IT+0x100>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e007      	b.n	800228c <HAL_DMA_Start_IT+0x110>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f001 fe6a 	bl	8003f6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a34      	ldr	r2, [pc, #208]	@ (8002370 <HAL_DMA_Start_IT+0x1f4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d04a      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a33      	ldr	r2, [pc, #204]	@ (8002374 <HAL_DMA_Start_IT+0x1f8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d045      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a31      	ldr	r2, [pc, #196]	@ (8002378 <HAL_DMA_Start_IT+0x1fc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d040      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a30      	ldr	r2, [pc, #192]	@ (800237c <HAL_DMA_Start_IT+0x200>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d03b      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002380 <HAL_DMA_Start_IT+0x204>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d036      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002384 <HAL_DMA_Start_IT+0x208>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d031      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_DMA_Start_IT+0x20c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02c      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	@ (800238c <HAL_DMA_Start_IT+0x210>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d027      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a28      	ldr	r2, [pc, #160]	@ (8002390 <HAL_DMA_Start_IT+0x214>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d022      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a27      	ldr	r2, [pc, #156]	@ (8002394 <HAL_DMA_Start_IT+0x218>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01d      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a25      	ldr	r2, [pc, #148]	@ (8002398 <HAL_DMA_Start_IT+0x21c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d018      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a24      	ldr	r2, [pc, #144]	@ (800239c <HAL_DMA_Start_IT+0x220>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_DMA_Start_IT+0x224>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00e      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a21      	ldr	r2, [pc, #132]	@ (80023a4 <HAL_DMA_Start_IT+0x228>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_DMA_Start_IT+0x22c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d004      	beq.n	8002338 <HAL_DMA_Start_IT+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_DMA_Start_IT+0x230>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_DMA_Start_IT+0x1c0>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_DMA_Start_IT+0x1c2>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d036      	beq.n	80023b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 021e 	bic.w	r2, r3, #30
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0216 	orr.w	r2, r2, #22
 8002354:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03e      	beq.n	80023dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0208 	orr.w	r2, r2, #8
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e035      	b.n	80023dc <HAL_DMA_Start_IT+0x260>
 8002370:	40020010 	.word	0x40020010
 8002374:	40020028 	.word	0x40020028
 8002378:	40020040 	.word	0x40020040
 800237c:	40020058 	.word	0x40020058
 8002380:	40020070 	.word	0x40020070
 8002384:	40020088 	.word	0x40020088
 8002388:	400200a0 	.word	0x400200a0
 800238c:	400200b8 	.word	0x400200b8
 8002390:	40020410 	.word	0x40020410
 8002394:	40020428 	.word	0x40020428
 8002398:	40020440 	.word	0x40020440
 800239c:	40020458 	.word	0x40020458
 80023a0:	40020470 	.word	0x40020470
 80023a4:	40020488 	.word	0x40020488
 80023a8:	400204a0 	.word	0x400204a0
 80023ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 020e 	bic.w	r2, r3, #14
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 020a 	orr.w	r2, r2, #10
 80023c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0204 	orr.w	r2, r2, #4
 80023da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a83      	ldr	r2, [pc, #524]	@ (80025f0 <HAL_DMA_Start_IT+0x474>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d072      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a82      	ldr	r2, [pc, #520]	@ (80025f4 <HAL_DMA_Start_IT+0x478>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d06d      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a80      	ldr	r2, [pc, #512]	@ (80025f8 <HAL_DMA_Start_IT+0x47c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d068      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7f      	ldr	r2, [pc, #508]	@ (80025fc <HAL_DMA_Start_IT+0x480>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d063      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7d      	ldr	r2, [pc, #500]	@ (8002600 <HAL_DMA_Start_IT+0x484>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d05e      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7c      	ldr	r2, [pc, #496]	@ (8002604 <HAL_DMA_Start_IT+0x488>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d059      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a7a      	ldr	r2, [pc, #488]	@ (8002608 <HAL_DMA_Start_IT+0x48c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d054      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a79      	ldr	r2, [pc, #484]	@ (800260c <HAL_DMA_Start_IT+0x490>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d04f      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a77      	ldr	r2, [pc, #476]	@ (8002610 <HAL_DMA_Start_IT+0x494>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d04a      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a76      	ldr	r2, [pc, #472]	@ (8002614 <HAL_DMA_Start_IT+0x498>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d045      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a74      	ldr	r2, [pc, #464]	@ (8002618 <HAL_DMA_Start_IT+0x49c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d040      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a73      	ldr	r2, [pc, #460]	@ (800261c <HAL_DMA_Start_IT+0x4a0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d03b      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a71      	ldr	r2, [pc, #452]	@ (8002620 <HAL_DMA_Start_IT+0x4a4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d036      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a70      	ldr	r2, [pc, #448]	@ (8002624 <HAL_DMA_Start_IT+0x4a8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d031      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6e      	ldr	r2, [pc, #440]	@ (8002628 <HAL_DMA_Start_IT+0x4ac>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02c      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6d      	ldr	r2, [pc, #436]	@ (800262c <HAL_DMA_Start_IT+0x4b0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d027      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6b      	ldr	r2, [pc, #428]	@ (8002630 <HAL_DMA_Start_IT+0x4b4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d022      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6a      	ldr	r2, [pc, #424]	@ (8002634 <HAL_DMA_Start_IT+0x4b8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d01d      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	@ (8002638 <HAL_DMA_Start_IT+0x4bc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d018      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a67      	ldr	r2, [pc, #412]	@ (800263c <HAL_DMA_Start_IT+0x4c0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a65      	ldr	r2, [pc, #404]	@ (8002640 <HAL_DMA_Start_IT+0x4c4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a64      	ldr	r2, [pc, #400]	@ (8002644 <HAL_DMA_Start_IT+0x4c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a62      	ldr	r2, [pc, #392]	@ (8002648 <HAL_DMA_Start_IT+0x4cc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a61      	ldr	r2, [pc, #388]	@ (800264c <HAL_DMA_Start_IT+0x4d0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_DMA_Start_IT+0x354>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_DMA_Start_IT+0x356>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01a      	beq.n	800250c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a37      	ldr	r2, [pc, #220]	@ (80025f0 <HAL_DMA_Start_IT+0x474>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d04a      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a36      	ldr	r2, [pc, #216]	@ (80025f4 <HAL_DMA_Start_IT+0x478>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d045      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_DMA_Start_IT+0x47c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d040      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a33      	ldr	r2, [pc, #204]	@ (80025fc <HAL_DMA_Start_IT+0x480>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d03b      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <HAL_DMA_Start_IT+0x484>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d036      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a30      	ldr	r2, [pc, #192]	@ (8002604 <HAL_DMA_Start_IT+0x488>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d031      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2e      	ldr	r2, [pc, #184]	@ (8002608 <HAL_DMA_Start_IT+0x48c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02c      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2d      	ldr	r2, [pc, #180]	@ (800260c <HAL_DMA_Start_IT+0x490>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d027      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2b      	ldr	r2, [pc, #172]	@ (8002610 <HAL_DMA_Start_IT+0x494>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d022      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2a      	ldr	r2, [pc, #168]	@ (8002614 <HAL_DMA_Start_IT+0x498>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01d      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	@ (8002618 <HAL_DMA_Start_IT+0x49c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a27      	ldr	r2, [pc, #156]	@ (800261c <HAL_DMA_Start_IT+0x4a0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a25      	ldr	r2, [pc, #148]	@ (8002620 <HAL_DMA_Start_IT+0x4a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00e      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a24      	ldr	r2, [pc, #144]	@ (8002624 <HAL_DMA_Start_IT+0x4a8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a22      	ldr	r2, [pc, #136]	@ (8002628 <HAL_DMA_Start_IT+0x4ac>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Start_IT+0x430>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a21      	ldr	r2, [pc, #132]	@ (800262c <HAL_DMA_Start_IT+0x4b0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <HAL_DMA_Start_IT+0x442>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e012      	b.n	80025e4 <HAL_DMA_Start_IT+0x468>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e009      	b.n	80025e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40020010 	.word	0x40020010
 80025f4:	40020028 	.word	0x40020028
 80025f8:	40020040 	.word	0x40020040
 80025fc:	40020058 	.word	0x40020058
 8002600:	40020070 	.word	0x40020070
 8002604:	40020088 	.word	0x40020088
 8002608:	400200a0 	.word	0x400200a0
 800260c:	400200b8 	.word	0x400200b8
 8002610:	40020410 	.word	0x40020410
 8002614:	40020428 	.word	0x40020428
 8002618:	40020440 	.word	0x40020440
 800261c:	40020458 	.word	0x40020458
 8002620:	40020470 	.word	0x40020470
 8002624:	40020488 	.word	0x40020488
 8002628:	400204a0 	.word	0x400204a0
 800262c:	400204b8 	.word	0x400204b8
 8002630:	58025408 	.word	0x58025408
 8002634:	5802541c 	.word	0x5802541c
 8002638:	58025430 	.word	0x58025430
 800263c:	58025444 	.word	0x58025444
 8002640:	58025458 	.word	0x58025458
 8002644:	5802546c 	.word	0x5802546c
 8002648:	58025480 	.word	0x58025480
 800264c:	58025494 	.word	0x58025494

08002650 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff f880 	bl	800175c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e2dc      	b.n	8002c22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2280      	movs	r2, #128	@ 0x80
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e2cd      	b.n	8002c22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a76      	ldr	r2, [pc, #472]	@ (8002864 <HAL_DMA_Abort+0x214>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d04a      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a74      	ldr	r2, [pc, #464]	@ (8002868 <HAL_DMA_Abort+0x218>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d045      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	@ (800286c <HAL_DMA_Abort+0x21c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d040      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a71      	ldr	r2, [pc, #452]	@ (8002870 <HAL_DMA_Abort+0x220>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d03b      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a70      	ldr	r2, [pc, #448]	@ (8002874 <HAL_DMA_Abort+0x224>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d036      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002878 <HAL_DMA_Abort+0x228>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6d      	ldr	r2, [pc, #436]	@ (800287c <HAL_DMA_Abort+0x22c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d02c      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002880 <HAL_DMA_Abort+0x230>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d027      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6a      	ldr	r2, [pc, #424]	@ (8002884 <HAL_DMA_Abort+0x234>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a68      	ldr	r2, [pc, #416]	@ (8002888 <HAL_DMA_Abort+0x238>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01d      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a67      	ldr	r2, [pc, #412]	@ (800288c <HAL_DMA_Abort+0x23c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a65      	ldr	r2, [pc, #404]	@ (8002890 <HAL_DMA_Abort+0x240>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a64      	ldr	r2, [pc, #400]	@ (8002894 <HAL_DMA_Abort+0x244>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a62      	ldr	r2, [pc, #392]	@ (8002898 <HAL_DMA_Abort+0x248>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a61      	ldr	r2, [pc, #388]	@ (800289c <HAL_DMA_Abort+0x24c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_Abort+0xd6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5f      	ldr	r2, [pc, #380]	@ (80028a0 <HAL_DMA_Abort+0x250>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_DMA_Abort+0xda>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_DMA_Abort+0xdc>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 021e 	bic.w	r2, r2, #30
 800273e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e00a      	b.n	800276e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3c      	ldr	r2, [pc, #240]	@ (8002864 <HAL_DMA_Abort+0x214>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d072      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_DMA_Abort+0x218>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d06d      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a39      	ldr	r2, [pc, #228]	@ (800286c <HAL_DMA_Abort+0x21c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d068      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a37      	ldr	r2, [pc, #220]	@ (8002870 <HAL_DMA_Abort+0x220>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d063      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a36      	ldr	r2, [pc, #216]	@ (8002874 <HAL_DMA_Abort+0x224>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d05e      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a34      	ldr	r2, [pc, #208]	@ (8002878 <HAL_DMA_Abort+0x228>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d059      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a33      	ldr	r2, [pc, #204]	@ (800287c <HAL_DMA_Abort+0x22c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d054      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a31      	ldr	r2, [pc, #196]	@ (8002880 <HAL_DMA_Abort+0x230>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d04f      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <HAL_DMA_Abort+0x234>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d04a      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002888 <HAL_DMA_Abort+0x238>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d045      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2d      	ldr	r2, [pc, #180]	@ (800288c <HAL_DMA_Abort+0x23c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d040      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_DMA_Abort+0x240>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d03b      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002894 <HAL_DMA_Abort+0x244>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d036      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <HAL_DMA_Abort+0x248>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d031      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a27      	ldr	r2, [pc, #156]	@ (800289c <HAL_DMA_Abort+0x24c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d02c      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a25      	ldr	r2, [pc, #148]	@ (80028a0 <HAL_DMA_Abort+0x250>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d027      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a24      	ldr	r2, [pc, #144]	@ (80028a4 <HAL_DMA_Abort+0x254>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a22      	ldr	r2, [pc, #136]	@ (80028a8 <HAL_DMA_Abort+0x258>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a21      	ldr	r2, [pc, #132]	@ (80028ac <HAL_DMA_Abort+0x25c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1f      	ldr	r2, [pc, #124]	@ (80028b0 <HAL_DMA_Abort+0x260>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <HAL_DMA_Abort+0x264>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_DMA_Abort+0x268>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_DMA_Abort+0x26c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	@ (80028c0 <HAL_DMA_Abort+0x270>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d132      	bne.n	80028c4 <HAL_DMA_Abort+0x274>
 800285e:	2301      	movs	r3, #1
 8002860:	e031      	b.n	80028c6 <HAL_DMA_Abort+0x276>
 8002862:	bf00      	nop
 8002864:	40020010 	.word	0x40020010
 8002868:	40020028 	.word	0x40020028
 800286c:	40020040 	.word	0x40020040
 8002870:	40020058 	.word	0x40020058
 8002874:	40020070 	.word	0x40020070
 8002878:	40020088 	.word	0x40020088
 800287c:	400200a0 	.word	0x400200a0
 8002880:	400200b8 	.word	0x400200b8
 8002884:	40020410 	.word	0x40020410
 8002888:	40020428 	.word	0x40020428
 800288c:	40020440 	.word	0x40020440
 8002890:	40020458 	.word	0x40020458
 8002894:	40020470 	.word	0x40020470
 8002898:	40020488 	.word	0x40020488
 800289c:	400204a0 	.word	0x400204a0
 80028a0:	400204b8 	.word	0x400204b8
 80028a4:	58025408 	.word	0x58025408
 80028a8:	5802541c 	.word	0x5802541c
 80028ac:	58025430 	.word	0x58025430
 80028b0:	58025444 	.word	0x58025444
 80028b4:	58025458 	.word	0x58025458
 80028b8:	5802546c 	.word	0x5802546c
 80028bc:	58025480 	.word	0x58025480
 80028c0:	58025494 	.word	0x58025494
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6d      	ldr	r2, [pc, #436]	@ (8002a94 <HAL_DMA_Abort+0x444>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04a      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002a98 <HAL_DMA_Abort+0x448>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d045      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a6a      	ldr	r2, [pc, #424]	@ (8002a9c <HAL_DMA_Abort+0x44c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a68      	ldr	r2, [pc, #416]	@ (8002aa0 <HAL_DMA_Abort+0x450>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03b      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a67      	ldr	r2, [pc, #412]	@ (8002aa4 <HAL_DMA_Abort+0x454>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d036      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	@ (8002aa8 <HAL_DMA_Abort+0x458>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a64      	ldr	r2, [pc, #400]	@ (8002aac <HAL_DMA_Abort+0x45c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a62      	ldr	r2, [pc, #392]	@ (8002ab0 <HAL_DMA_Abort+0x460>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a61      	ldr	r2, [pc, #388]	@ (8002ab4 <HAL_DMA_Abort+0x464>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab8 <HAL_DMA_Abort+0x468>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <HAL_DMA_Abort+0x46c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac0 <HAL_DMA_Abort+0x470>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5b      	ldr	r2, [pc, #364]	@ (8002ac4 <HAL_DMA_Abort+0x474>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a59      	ldr	r2, [pc, #356]	@ (8002ac8 <HAL_DMA_Abort+0x478>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <HAL_DMA_Abort+0x47c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Abort+0x32a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a56      	ldr	r2, [pc, #344]	@ (8002ad0 <HAL_DMA_Abort+0x480>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <HAL_DMA_Abort+0x33c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <HAL_DMA_Abort+0x34c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800299c:	e013      	b.n	80029c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299e:	f7fe fedd 	bl	800175c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d90c      	bls.n	80029c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e12d      	b.n	8002c22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e5      	bne.n	800299e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a94 <HAL_DMA_Abort+0x444>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04a      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <HAL_DMA_Abort+0x448>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d045      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	@ (8002a9c <HAL_DMA_Abort+0x44c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d040      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa0 <HAL_DMA_Abort+0x450>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d03b      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a29      	ldr	r2, [pc, #164]	@ (8002aa4 <HAL_DMA_Abort+0x454>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d036      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_DMA_Abort+0x458>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d031      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a26      	ldr	r2, [pc, #152]	@ (8002aac <HAL_DMA_Abort+0x45c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d02c      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	@ (8002ab0 <HAL_DMA_Abort+0x460>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d027      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a23      	ldr	r2, [pc, #140]	@ (8002ab4 <HAL_DMA_Abort+0x464>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a21      	ldr	r2, [pc, #132]	@ (8002ab8 <HAL_DMA_Abort+0x468>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <HAL_DMA_Abort+0x46c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d018      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac0 <HAL_DMA_Abort+0x470>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <HAL_DMA_Abort+0x474>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <HAL_DMA_Abort+0x478>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1a      	ldr	r2, [pc, #104]	@ (8002acc <HAL_DMA_Abort+0x47c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_DMA_Abort+0x422>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <HAL_DMA_Abort+0x480>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_DMA_Abort+0x426>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_DMA_Abort+0x428>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02b      	beq.n	8002ad4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	223f      	movs	r2, #63	@ 0x3f
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	e02a      	b.n	8002aea <HAL_DMA_Abort+0x49a>
 8002a94:	40020010 	.word	0x40020010
 8002a98:	40020028 	.word	0x40020028
 8002a9c:	40020040 	.word	0x40020040
 8002aa0:	40020058 	.word	0x40020058
 8002aa4:	40020070 	.word	0x40020070
 8002aa8:	40020088 	.word	0x40020088
 8002aac:	400200a0 	.word	0x400200a0
 8002ab0:	400200b8 	.word	0x400200b8
 8002ab4:	40020410 	.word	0x40020410
 8002ab8:	40020428 	.word	0x40020428
 8002abc:	40020440 	.word	0x40020440
 8002ac0:	40020458 	.word	0x40020458
 8002ac4:	40020470 	.word	0x40020470
 8002ac8:	40020488 	.word	0x40020488
 8002acc:	400204a0 	.word	0x400204a0
 8002ad0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4f      	ldr	r2, [pc, #316]	@ (8002c2c <HAL_DMA_Abort+0x5dc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d072      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4d      	ldr	r2, [pc, #308]	@ (8002c30 <HAL_DMA_Abort+0x5e0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d06d      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4c      	ldr	r2, [pc, #304]	@ (8002c34 <HAL_DMA_Abort+0x5e4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d068      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c38 <HAL_DMA_Abort+0x5e8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d063      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a49      	ldr	r2, [pc, #292]	@ (8002c3c <HAL_DMA_Abort+0x5ec>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d05e      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a47      	ldr	r2, [pc, #284]	@ (8002c40 <HAL_DMA_Abort+0x5f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d059      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a46      	ldr	r2, [pc, #280]	@ (8002c44 <HAL_DMA_Abort+0x5f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d054      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a44      	ldr	r2, [pc, #272]	@ (8002c48 <HAL_DMA_Abort+0x5f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d04f      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a43      	ldr	r2, [pc, #268]	@ (8002c4c <HAL_DMA_Abort+0x5fc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a41      	ldr	r2, [pc, #260]	@ (8002c50 <HAL_DMA_Abort+0x600>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a40      	ldr	r2, [pc, #256]	@ (8002c54 <HAL_DMA_Abort+0x604>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c58 <HAL_DMA_Abort+0x608>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a3d      	ldr	r2, [pc, #244]	@ (8002c5c <HAL_DMA_Abort+0x60c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3b      	ldr	r2, [pc, #236]	@ (8002c60 <HAL_DMA_Abort+0x610>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c64 <HAL_DMA_Abort+0x614>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a38      	ldr	r2, [pc, #224]	@ (8002c68 <HAL_DMA_Abort+0x618>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a37      	ldr	r2, [pc, #220]	@ (8002c6c <HAL_DMA_Abort+0x61c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a35      	ldr	r2, [pc, #212]	@ (8002c70 <HAL_DMA_Abort+0x620>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a34      	ldr	r2, [pc, #208]	@ (8002c74 <HAL_DMA_Abort+0x624>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a32      	ldr	r2, [pc, #200]	@ (8002c78 <HAL_DMA_Abort+0x628>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a31      	ldr	r2, [pc, #196]	@ (8002c7c <HAL_DMA_Abort+0x62c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c80 <HAL_DMA_Abort+0x630>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2e      	ldr	r2, [pc, #184]	@ (8002c84 <HAL_DMA_Abort+0x634>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <HAL_DMA_Abort+0x638>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_DMA_Abort+0x58e>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_Abort+0x590>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002bec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40020010 	.word	0x40020010
 8002c30:	40020028 	.word	0x40020028
 8002c34:	40020040 	.word	0x40020040
 8002c38:	40020058 	.word	0x40020058
 8002c3c:	40020070 	.word	0x40020070
 8002c40:	40020088 	.word	0x40020088
 8002c44:	400200a0 	.word	0x400200a0
 8002c48:	400200b8 	.word	0x400200b8
 8002c4c:	40020410 	.word	0x40020410
 8002c50:	40020428 	.word	0x40020428
 8002c54:	40020440 	.word	0x40020440
 8002c58:	40020458 	.word	0x40020458
 8002c5c:	40020470 	.word	0x40020470
 8002c60:	40020488 	.word	0x40020488
 8002c64:	400204a0 	.word	0x400204a0
 8002c68:	400204b8 	.word	0x400204b8
 8002c6c:	58025408 	.word	0x58025408
 8002c70:	5802541c 	.word	0x5802541c
 8002c74:	58025430 	.word	0x58025430
 8002c78:	58025444 	.word	0x58025444
 8002c7c:	58025458 	.word	0x58025458
 8002c80:	5802546c 	.word	0x5802546c
 8002c84:	58025480 	.word	0x58025480
 8002c88:	58025494 	.word	0x58025494

08002c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e237      	b.n	800310e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e22c      	b.n	800310e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a5c      	ldr	r2, [pc, #368]	@ (8002e2c <HAL_DMA_Abort_IT+0x1a0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04a      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e30 <HAL_DMA_Abort_IT+0x1a4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d045      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a59      	ldr	r2, [pc, #356]	@ (8002e34 <HAL_DMA_Abort_IT+0x1a8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d040      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a58      	ldr	r2, [pc, #352]	@ (8002e38 <HAL_DMA_Abort_IT+0x1ac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d03b      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a56      	ldr	r2, [pc, #344]	@ (8002e3c <HAL_DMA_Abort_IT+0x1b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d036      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a55      	ldr	r2, [pc, #340]	@ (8002e40 <HAL_DMA_Abort_IT+0x1b4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d031      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a53      	ldr	r2, [pc, #332]	@ (8002e44 <HAL_DMA_Abort_IT+0x1b8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02c      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a52      	ldr	r2, [pc, #328]	@ (8002e48 <HAL_DMA_Abort_IT+0x1bc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d027      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_DMA_Abort_IT+0x1c0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a4f      	ldr	r2, [pc, #316]	@ (8002e50 <HAL_DMA_Abort_IT+0x1c4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01d      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_DMA_Abort_IT+0x1c8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a4c      	ldr	r2, [pc, #304]	@ (8002e58 <HAL_DMA_Abort_IT+0x1cc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a4a      	ldr	r2, [pc, #296]	@ (8002e5c <HAL_DMA_Abort_IT+0x1d0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a49      	ldr	r2, [pc, #292]	@ (8002e60 <HAL_DMA_Abort_IT+0x1d4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a47      	ldr	r2, [pc, #284]	@ (8002e64 <HAL_DMA_Abort_IT+0x1d8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_Abort_IT+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a46      	ldr	r2, [pc, #280]	@ (8002e68 <HAL_DMA_Abort_IT+0x1dc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_DMA_Abort_IT+0xcc>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_DMA_Abort_IT+0xce>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8086 	beq.w	8002e6c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2204      	movs	r2, #4
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <HAL_DMA_Abort_IT+0x1a0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04a      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2e      	ldr	r2, [pc, #184]	@ (8002e30 <HAL_DMA_Abort_IT+0x1a4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d045      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2c      	ldr	r2, [pc, #176]	@ (8002e34 <HAL_DMA_Abort_IT+0x1a8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d040      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <HAL_DMA_Abort_IT+0x1ac>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d03b      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a29      	ldr	r2, [pc, #164]	@ (8002e3c <HAL_DMA_Abort_IT+0x1b0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d036      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	@ (8002e40 <HAL_DMA_Abort_IT+0x1b4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d031      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a26      	ldr	r2, [pc, #152]	@ (8002e44 <HAL_DMA_Abort_IT+0x1b8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02c      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a25      	ldr	r2, [pc, #148]	@ (8002e48 <HAL_DMA_Abort_IT+0x1bc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d027      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <HAL_DMA_Abort_IT+0x1c0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_DMA_Abort_IT+0x1c4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01d      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	@ (8002e54 <HAL_DMA_Abort_IT+0x1c8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_DMA_Abort_IT+0x1cc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e5c <HAL_DMA_Abort_IT+0x1d0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1c      	ldr	r2, [pc, #112]	@ (8002e60 <HAL_DMA_Abort_IT+0x1d4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e64 <HAL_DMA_Abort_IT+0x1d8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x17c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_DMA_Abort_IT+0x1dc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <HAL_DMA_Abort_IT+0x18e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e178      	b.n	800310c <HAL_DMA_Abort_IT+0x480>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e16f      	b.n	800310c <HAL_DMA_Abort_IT+0x480>
 8002e2c:	40020010 	.word	0x40020010
 8002e30:	40020028 	.word	0x40020028
 8002e34:	40020040 	.word	0x40020040
 8002e38:	40020058 	.word	0x40020058
 8002e3c:	40020070 	.word	0x40020070
 8002e40:	40020088 	.word	0x40020088
 8002e44:	400200a0 	.word	0x400200a0
 8002e48:	400200b8 	.word	0x400200b8
 8002e4c:	40020410 	.word	0x40020410
 8002e50:	40020428 	.word	0x40020428
 8002e54:	40020440 	.word	0x40020440
 8002e58:	40020458 	.word	0x40020458
 8002e5c:	40020470 	.word	0x40020470
 8002e60:	40020488 	.word	0x40020488
 8002e64:	400204a0 	.word	0x400204a0
 8002e68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 020e 	bic.w	r2, r2, #14
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6c      	ldr	r2, [pc, #432]	@ (8003034 <HAL_DMA_Abort_IT+0x3a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d04a      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003038 <HAL_DMA_Abort_IT+0x3ac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d045      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a69      	ldr	r2, [pc, #420]	@ (800303c <HAL_DMA_Abort_IT+0x3b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d040      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a68      	ldr	r2, [pc, #416]	@ (8003040 <HAL_DMA_Abort_IT+0x3b4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d03b      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a66      	ldr	r2, [pc, #408]	@ (8003044 <HAL_DMA_Abort_IT+0x3b8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d036      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a65      	ldr	r2, [pc, #404]	@ (8003048 <HAL_DMA_Abort_IT+0x3bc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d031      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a63      	ldr	r2, [pc, #396]	@ (800304c <HAL_DMA_Abort_IT+0x3c0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02c      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a62      	ldr	r2, [pc, #392]	@ (8003050 <HAL_DMA_Abort_IT+0x3c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d027      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a60      	ldr	r2, [pc, #384]	@ (8003054 <HAL_DMA_Abort_IT+0x3c8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a5f      	ldr	r2, [pc, #380]	@ (8003058 <HAL_DMA_Abort_IT+0x3cc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d01d      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800305c <HAL_DMA_Abort_IT+0x3d0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5c      	ldr	r2, [pc, #368]	@ (8003060 <HAL_DMA_Abort_IT+0x3d4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8003064 <HAL_DMA_Abort_IT+0x3d8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a59      	ldr	r2, [pc, #356]	@ (8003068 <HAL_DMA_Abort_IT+0x3dc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a57      	ldr	r2, [pc, #348]	@ (800306c <HAL_DMA_Abort_IT+0x3e0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x290>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a56      	ldr	r2, [pc, #344]	@ (8003070 <HAL_DMA_Abort_IT+0x3e4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <HAL_DMA_Abort_IT+0x2a2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e007      	b.n	8002f3e <HAL_DMA_Abort_IT+0x2b2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3c      	ldr	r2, [pc, #240]	@ (8003034 <HAL_DMA_Abort_IT+0x3a8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d072      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	@ (8003038 <HAL_DMA_Abort_IT+0x3ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d06d      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a39      	ldr	r2, [pc, #228]	@ (800303c <HAL_DMA_Abort_IT+0x3b0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d068      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a37      	ldr	r2, [pc, #220]	@ (8003040 <HAL_DMA_Abort_IT+0x3b4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d063      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	@ (8003044 <HAL_DMA_Abort_IT+0x3b8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d05e      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a34      	ldr	r2, [pc, #208]	@ (8003048 <HAL_DMA_Abort_IT+0x3bc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d059      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a33      	ldr	r2, [pc, #204]	@ (800304c <HAL_DMA_Abort_IT+0x3c0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d054      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a31      	ldr	r2, [pc, #196]	@ (8003050 <HAL_DMA_Abort_IT+0x3c4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d04f      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a30      	ldr	r2, [pc, #192]	@ (8003054 <HAL_DMA_Abort_IT+0x3c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d04a      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003058 <HAL_DMA_Abort_IT+0x3cc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d045      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800305c <HAL_DMA_Abort_IT+0x3d0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d040      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003060 <HAL_DMA_Abort_IT+0x3d4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d03b      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2a      	ldr	r2, [pc, #168]	@ (8003064 <HAL_DMA_Abort_IT+0x3d8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d036      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	@ (8003068 <HAL_DMA_Abort_IT+0x3dc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d031      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a27      	ldr	r2, [pc, #156]	@ (800306c <HAL_DMA_Abort_IT+0x3e0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d02c      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	@ (8003070 <HAL_DMA_Abort_IT+0x3e4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d027      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a24      	ldr	r2, [pc, #144]	@ (8003074 <HAL_DMA_Abort_IT+0x3e8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <HAL_DMA_Abort_IT+0x3ec>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	@ (800307c <HAL_DMA_Abort_IT+0x3f0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1f      	ldr	r2, [pc, #124]	@ (8003080 <HAL_DMA_Abort_IT+0x3f4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1e      	ldr	r2, [pc, #120]	@ (8003084 <HAL_DMA_Abort_IT+0x3f8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1c      	ldr	r2, [pc, #112]	@ (8003088 <HAL_DMA_Abort_IT+0x3fc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <HAL_DMA_Abort_IT+0x400>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	@ (8003090 <HAL_DMA_Abort_IT+0x404>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d132      	bne.n	8003094 <HAL_DMA_Abort_IT+0x408>
 800302e:	2301      	movs	r3, #1
 8003030:	e031      	b.n	8003096 <HAL_DMA_Abort_IT+0x40a>
 8003032:	bf00      	nop
 8003034:	40020010 	.word	0x40020010
 8003038:	40020028 	.word	0x40020028
 800303c:	40020040 	.word	0x40020040
 8003040:	40020058 	.word	0x40020058
 8003044:	40020070 	.word	0x40020070
 8003048:	40020088 	.word	0x40020088
 800304c:	400200a0 	.word	0x400200a0
 8003050:	400200b8 	.word	0x400200b8
 8003054:	40020410 	.word	0x40020410
 8003058:	40020428 	.word	0x40020428
 800305c:	40020440 	.word	0x40020440
 8003060:	40020458 	.word	0x40020458
 8003064:	40020470 	.word	0x40020470
 8003068:	40020488 	.word	0x40020488
 800306c:	400204a0 	.word	0x400204a0
 8003070:	400204b8 	.word	0x400204b8
 8003074:	58025408 	.word	0x58025408
 8003078:	5802541c 	.word	0x5802541c
 800307c:	58025430 	.word	0x58025430
 8003080:	58025444 	.word	0x58025444
 8003084:	58025458 	.word	0x58025458
 8003088:	5802546c 	.word	0x5802546c
 800308c:	58025480 	.word	0x58025480
 8003090:	58025494 	.word	0x58025494
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d028      	beq.n	80030ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop

08003118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003124:	4b67      	ldr	r3, [pc, #412]	@ (80032c4 <HAL_DMA_IRQHandler+0x1ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a67      	ldr	r2, [pc, #412]	@ (80032c8 <HAL_DMA_IRQHandler+0x1b0>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0a9b      	lsrs	r3, r3, #10
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a5f      	ldr	r2, [pc, #380]	@ (80032cc <HAL_DMA_IRQHandler+0x1b4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04a      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5d      	ldr	r2, [pc, #372]	@ (80032d0 <HAL_DMA_IRQHandler+0x1b8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d045      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5c      	ldr	r2, [pc, #368]	@ (80032d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d040      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5a      	ldr	r2, [pc, #360]	@ (80032d8 <HAL_DMA_IRQHandler+0x1c0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d03b      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a59      	ldr	r2, [pc, #356]	@ (80032dc <HAL_DMA_IRQHandler+0x1c4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d031      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a56      	ldr	r2, [pc, #344]	@ (80032e4 <HAL_DMA_IRQHandler+0x1cc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02c      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a54      	ldr	r2, [pc, #336]	@ (80032e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d027      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a53      	ldr	r2, [pc, #332]	@ (80032ec <HAL_DMA_IRQHandler+0x1d4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a51      	ldr	r2, [pc, #324]	@ (80032f0 <HAL_DMA_IRQHandler+0x1d8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a50      	ldr	r2, [pc, #320]	@ (80032f4 <HAL_DMA_IRQHandler+0x1dc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a4e      	ldr	r2, [pc, #312]	@ (80032f8 <HAL_DMA_IRQHandler+0x1e0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4d      	ldr	r2, [pc, #308]	@ (80032fc <HAL_DMA_IRQHandler+0x1e4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003300 <HAL_DMA_IRQHandler+0x1e8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a4a      	ldr	r2, [pc, #296]	@ (8003304 <HAL_DMA_IRQHandler+0x1ec>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_DMA_IRQHandler+0xd2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a48      	ldr	r2, [pc, #288]	@ (8003308 <HAL_DMA_IRQHandler+0x1f0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_DMA_IRQHandler+0xd6>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_IRQHandler+0xd8>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 842b 	beq.w	8003a4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2208      	movs	r2, #8
 8003200:	409a      	lsls	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80a2 	beq.w	8003350 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2e      	ldr	r2, [pc, #184]	@ (80032cc <HAL_DMA_IRQHandler+0x1b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d04a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2d      	ldr	r2, [pc, #180]	@ (80032d0 <HAL_DMA_IRQHandler+0x1b8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d045      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2b      	ldr	r2, [pc, #172]	@ (80032d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d040      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2a      	ldr	r2, [pc, #168]	@ (80032d8 <HAL_DMA_IRQHandler+0x1c0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d03b      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	@ (80032dc <HAL_DMA_IRQHandler+0x1c4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d036      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a27      	ldr	r2, [pc, #156]	@ (80032e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d031      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a25      	ldr	r2, [pc, #148]	@ (80032e4 <HAL_DMA_IRQHandler+0x1cc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02c      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a24      	ldr	r2, [pc, #144]	@ (80032e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d027      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <HAL_DMA_IRQHandler+0x1d4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d022      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a21      	ldr	r2, [pc, #132]	@ (80032f0 <HAL_DMA_IRQHandler+0x1d8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d01d      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d018      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_DMA_IRQHandler+0x1e4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00e      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <HAL_DMA_IRQHandler+0x1e8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <HAL_DMA_IRQHandler+0x1ec>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_DMA_IRQHandler+0x194>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <HAL_DMA_IRQHandler+0x1f0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d12f      	bne.n	800330c <HAL_DMA_IRQHandler+0x1f4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e02e      	b.n	8003320 <HAL_DMA_IRQHandler+0x208>
 80032c2:	bf00      	nop
 80032c4:	24000000 	.word	0x24000000
 80032c8:	1b4e81b5 	.word	0x1b4e81b5
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2208      	movs	r2, #8
 800333e:	409a      	lsls	r2, r3
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d06e      	beq.n	8003444 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a69      	ldr	r2, [pc, #420]	@ (8003510 <HAL_DMA_IRQHandler+0x3f8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d04a      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <HAL_DMA_IRQHandler+0x3fc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d045      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a66      	ldr	r2, [pc, #408]	@ (8003518 <HAL_DMA_IRQHandler+0x400>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d040      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a64      	ldr	r2, [pc, #400]	@ (800351c <HAL_DMA_IRQHandler+0x404>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d03b      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a63      	ldr	r2, [pc, #396]	@ (8003520 <HAL_DMA_IRQHandler+0x408>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d036      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a61      	ldr	r2, [pc, #388]	@ (8003524 <HAL_DMA_IRQHandler+0x40c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d031      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a60      	ldr	r2, [pc, #384]	@ (8003528 <HAL_DMA_IRQHandler+0x410>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d02c      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5e      	ldr	r2, [pc, #376]	@ (800352c <HAL_DMA_IRQHandler+0x414>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d027      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003530 <HAL_DMA_IRQHandler+0x418>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d022      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5b      	ldr	r2, [pc, #364]	@ (8003534 <HAL_DMA_IRQHandler+0x41c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01d      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003538 <HAL_DMA_IRQHandler+0x420>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d018      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a58      	ldr	r2, [pc, #352]	@ (800353c <HAL_DMA_IRQHandler+0x424>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a57      	ldr	r2, [pc, #348]	@ (8003540 <HAL_DMA_IRQHandler+0x428>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a55      	ldr	r2, [pc, #340]	@ (8003544 <HAL_DMA_IRQHandler+0x42c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a54      	ldr	r2, [pc, #336]	@ (8003548 <HAL_DMA_IRQHandler+0x430>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_DMA_IRQHandler+0x2ee>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a52      	ldr	r2, [pc, #328]	@ (800354c <HAL_DMA_IRQHandler+0x434>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10a      	bne.n	800341c <HAL_DMA_IRQHandler+0x304>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e003      	b.n	8003424 <HAL_DMA_IRQHandler+0x30c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808f 	beq.w	8003578 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <HAL_DMA_IRQHandler+0x3f8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04a      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2a      	ldr	r2, [pc, #168]	@ (8003514 <HAL_DMA_IRQHandler+0x3fc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d045      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a29      	ldr	r2, [pc, #164]	@ (8003518 <HAL_DMA_IRQHandler+0x400>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d040      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a27      	ldr	r2, [pc, #156]	@ (800351c <HAL_DMA_IRQHandler+0x404>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03b      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <HAL_DMA_IRQHandler+0x408>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d036      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a24      	ldr	r2, [pc, #144]	@ (8003524 <HAL_DMA_IRQHandler+0x40c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <HAL_DMA_IRQHandler+0x410>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d02c      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a21      	ldr	r2, [pc, #132]	@ (800352c <HAL_DMA_IRQHandler+0x414>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <HAL_DMA_IRQHandler+0x418>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003534 <HAL_DMA_IRQHandler+0x41c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_DMA_IRQHandler+0x420>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <HAL_DMA_IRQHandler+0x424>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003540 <HAL_DMA_IRQHandler+0x428>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a18      	ldr	r2, [pc, #96]	@ (8003544 <HAL_DMA_IRQHandler+0x42c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_DMA_IRQHandler+0x430>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_IRQHandler+0x3e2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <HAL_DMA_IRQHandler+0x434>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12a      	bne.n	8003550 <HAL_DMA_IRQHandler+0x438>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e023      	b.n	8003558 <HAL_DMA_IRQHandler+0x440>
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2204      	movs	r2, #4
 8003566:	409a      	lsls	r2, r3
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2210      	movs	r2, #16
 8003582:	409a      	lsls	r2, r3
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a6 	beq.w	80036da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a85      	ldr	r2, [pc, #532]	@ (80037a8 <HAL_DMA_IRQHandler+0x690>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a83      	ldr	r2, [pc, #524]	@ (80037ac <HAL_DMA_IRQHandler+0x694>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a82      	ldr	r2, [pc, #520]	@ (80037b0 <HAL_DMA_IRQHandler+0x698>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a80      	ldr	r2, [pc, #512]	@ (80037b4 <HAL_DMA_IRQHandler+0x69c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7f      	ldr	r2, [pc, #508]	@ (80037b8 <HAL_DMA_IRQHandler+0x6a0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7d      	ldr	r2, [pc, #500]	@ (80037bc <HAL_DMA_IRQHandler+0x6a4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7c      	ldr	r2, [pc, #496]	@ (80037c0 <HAL_DMA_IRQHandler+0x6a8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a7a      	ldr	r2, [pc, #488]	@ (80037c4 <HAL_DMA_IRQHandler+0x6ac>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a79      	ldr	r2, [pc, #484]	@ (80037c8 <HAL_DMA_IRQHandler+0x6b0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a77      	ldr	r2, [pc, #476]	@ (80037cc <HAL_DMA_IRQHandler+0x6b4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a76      	ldr	r2, [pc, #472]	@ (80037d0 <HAL_DMA_IRQHandler+0x6b8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a74      	ldr	r2, [pc, #464]	@ (80037d4 <HAL_DMA_IRQHandler+0x6bc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	@ (80037d8 <HAL_DMA_IRQHandler+0x6c0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a71      	ldr	r2, [pc, #452]	@ (80037dc <HAL_DMA_IRQHandler+0x6c4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a70      	ldr	r2, [pc, #448]	@ (80037e0 <HAL_DMA_IRQHandler+0x6c8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_IRQHandler+0x516>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6e      	ldr	r2, [pc, #440]	@ (80037e4 <HAL_DMA_IRQHandler+0x6cc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10a      	bne.n	8003644 <HAL_DMA_IRQHandler+0x52c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e009      	b.n	8003658 <HAL_DMA_IRQHandler+0x540>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03e      	beq.n	80036da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2210      	movs	r2, #16
 8003666:	409a      	lsls	r2, r3
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d018      	beq.n	80036ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d024      	beq.n	80036da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e01f      	b.n	80036da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01b      	beq.n	80036da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
 80036aa:	e016      	b.n	80036da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2220      	movs	r2, #32
 80036e4:	409a      	lsls	r2, r3
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8110 	beq.w	8003910 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2c      	ldr	r2, [pc, #176]	@ (80037a8 <HAL_DMA_IRQHandler+0x690>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d04a      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2b      	ldr	r2, [pc, #172]	@ (80037ac <HAL_DMA_IRQHandler+0x694>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d045      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a29      	ldr	r2, [pc, #164]	@ (80037b0 <HAL_DMA_IRQHandler+0x698>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d040      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a28      	ldr	r2, [pc, #160]	@ (80037b4 <HAL_DMA_IRQHandler+0x69c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d03b      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a26      	ldr	r2, [pc, #152]	@ (80037b8 <HAL_DMA_IRQHandler+0x6a0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d036      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a25      	ldr	r2, [pc, #148]	@ (80037bc <HAL_DMA_IRQHandler+0x6a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d031      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	@ (80037c0 <HAL_DMA_IRQHandler+0x6a8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d02c      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a22      	ldr	r2, [pc, #136]	@ (80037c4 <HAL_DMA_IRQHandler+0x6ac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d027      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <HAL_DMA_IRQHandler+0x6b0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1f      	ldr	r2, [pc, #124]	@ (80037cc <HAL_DMA_IRQHandler+0x6b4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d01d      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <HAL_DMA_IRQHandler+0x6b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1c      	ldr	r2, [pc, #112]	@ (80037d4 <HAL_DMA_IRQHandler+0x6bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1a      	ldr	r2, [pc, #104]	@ (80037d8 <HAL_DMA_IRQHandler+0x6c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a19      	ldr	r2, [pc, #100]	@ (80037dc <HAL_DMA_IRQHandler+0x6c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <HAL_DMA_IRQHandler+0x6c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_DMA_IRQHandler+0x678>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <HAL_DMA_IRQHandler+0x6cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d12b      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x6d0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	e02a      	b.n	80037fc <HAL_DMA_IRQHandler+0x6e4>
 80037a6:	bf00      	nop
 80037a8:	40020010 	.word	0x40020010
 80037ac:	40020028 	.word	0x40020028
 80037b0:	40020040 	.word	0x40020040
 80037b4:	40020058 	.word	0x40020058
 80037b8:	40020070 	.word	0x40020070
 80037bc:	40020088 	.word	0x40020088
 80037c0:	400200a0 	.word	0x400200a0
 80037c4:	400200b8 	.word	0x400200b8
 80037c8:	40020410 	.word	0x40020410
 80037cc:	40020428 	.word	0x40020428
 80037d0:	40020440 	.word	0x40020440
 80037d4:	40020458 	.word	0x40020458
 80037d8:	40020470 	.word	0x40020470
 80037dc:	40020488 	.word	0x40020488
 80037e0:	400204a0 	.word	0x400204a0
 80037e4:	400204b8 	.word	0x400204b8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8087 	beq.w	8003910 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2220      	movs	r2, #32
 800380c:	409a      	lsls	r2, r3
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b04      	cmp	r3, #4
 800381c:	d139      	bne.n	8003892 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0216 	bic.w	r2, r2, #22
 800382c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800383c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <HAL_DMA_IRQHandler+0x736>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0208 	bic.w	r2, r2, #8
 800385c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	223f      	movs	r2, #63	@ 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 834a 	beq.w	8003f1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
          }
          return;
 8003890:	e344      	b.n	8003f1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d02c      	beq.n	8003910 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e027      	b.n	8003910 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	e01e      	b.n	8003910 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0210 	bic.w	r2, r2, #16
 80038ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8306 	beq.w	8003f26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8088 	beq.w	8003a38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2204      	movs	r2, #4
 800392c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a7a      	ldr	r2, [pc, #488]	@ (8003b20 <HAL_DMA_IRQHandler+0xa08>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d04a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a79      	ldr	r2, [pc, #484]	@ (8003b24 <HAL_DMA_IRQHandler+0xa0c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d045      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a77      	ldr	r2, [pc, #476]	@ (8003b28 <HAL_DMA_IRQHandler+0xa10>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d040      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a76      	ldr	r2, [pc, #472]	@ (8003b2c <HAL_DMA_IRQHandler+0xa14>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d03b      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a74      	ldr	r2, [pc, #464]	@ (8003b30 <HAL_DMA_IRQHandler+0xa18>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d036      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a73      	ldr	r2, [pc, #460]	@ (8003b34 <HAL_DMA_IRQHandler+0xa1c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d031      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a71      	ldr	r2, [pc, #452]	@ (8003b38 <HAL_DMA_IRQHandler+0xa20>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02c      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a70      	ldr	r2, [pc, #448]	@ (8003b3c <HAL_DMA_IRQHandler+0xa24>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d027      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a6e      	ldr	r2, [pc, #440]	@ (8003b40 <HAL_DMA_IRQHandler+0xa28>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d022      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6d      	ldr	r2, [pc, #436]	@ (8003b44 <HAL_DMA_IRQHandler+0xa2c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d01d      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a6b      	ldr	r2, [pc, #428]	@ (8003b48 <HAL_DMA_IRQHandler+0xa30>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d018      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6a      	ldr	r2, [pc, #424]	@ (8003b4c <HAL_DMA_IRQHandler+0xa34>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_DMA_IRQHandler+0xa38>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00e      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a67      	ldr	r2, [pc, #412]	@ (8003b54 <HAL_DMA_IRQHandler+0xa3c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a65      	ldr	r2, [pc, #404]	@ (8003b58 <HAL_DMA_IRQHandler+0xa40>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x8b8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a64      	ldr	r2, [pc, #400]	@ (8003b5c <HAL_DMA_IRQHandler+0xa44>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <HAL_DMA_IRQHandler+0x8ca>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	e007      	b.n	80039f2 <HAL_DMA_IRQHandler+0x8da>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d307      	bcc.n	8003a0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f2      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x8da>
 8003a0c:	e000      	b.n	8003a10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2203      	movs	r2, #3
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003a26:	e003      	b.n	8003a30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8272 	beq.w	8003f26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
 8003a4a:	e26c      	b.n	8003f26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a43      	ldr	r2, [pc, #268]	@ (8003b60 <HAL_DMA_IRQHandler+0xa48>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <HAL_DMA_IRQHandler+0xa4c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a40      	ldr	r2, [pc, #256]	@ (8003b68 <HAL_DMA_IRQHandler+0xa50>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b6c <HAL_DMA_IRQHandler+0xa54>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3d      	ldr	r2, [pc, #244]	@ (8003b70 <HAL_DMA_IRQHandler+0xa58>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3c      	ldr	r2, [pc, #240]	@ (8003b74 <HAL_DMA_IRQHandler+0xa5c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b78 <HAL_DMA_IRQHandler+0xa60>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x984>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a39      	ldr	r2, [pc, #228]	@ (8003b7c <HAL_DMA_IRQHandler+0xa64>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x988>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x98a>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 823f 	beq.w	8003f26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2204      	movs	r2, #4
 8003aba:	409a      	lsls	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80cd 	beq.w	8003c60 <HAL_DMA_IRQHandler+0xb48>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80c7 	beq.w	8003c60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2204      	movs	r2, #4
 8003adc:	409a      	lsls	r2, r3
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d049      	beq.n	8003b80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8210 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b08:	e20a      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8206 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1c:	e200      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe08>
 8003b1e:	bf00      	nop
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8
 8003b60:	58025408 	.word	0x58025408
 8003b64:	5802541c 	.word	0x5802541c
 8003b68:	58025430 	.word	0x58025430
 8003b6c:	58025444 	.word	0x58025444
 8003b70:	58025458 	.word	0x58025458
 8003b74:	5802546c 	.word	0x5802546c
 8003b78:	58025480 	.word	0x58025480
 8003b7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d160      	bne.n	8003c4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d8c <HAL_DMA_IRQHandler+0xc74>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d04a      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7d      	ldr	r2, [pc, #500]	@ (8003d90 <HAL_DMA_IRQHandler+0xc78>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d045      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7c      	ldr	r2, [pc, #496]	@ (8003d94 <HAL_DMA_IRQHandler+0xc7c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d040      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a7a      	ldr	r2, [pc, #488]	@ (8003d98 <HAL_DMA_IRQHandler+0xc80>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d03b      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a79      	ldr	r2, [pc, #484]	@ (8003d9c <HAL_DMA_IRQHandler+0xc84>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d036      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a77      	ldr	r2, [pc, #476]	@ (8003da0 <HAL_DMA_IRQHandler+0xc88>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d031      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a76      	ldr	r2, [pc, #472]	@ (8003da4 <HAL_DMA_IRQHandler+0xc8c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d02c      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a74      	ldr	r2, [pc, #464]	@ (8003da8 <HAL_DMA_IRQHandler+0xc90>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d027      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a73      	ldr	r2, [pc, #460]	@ (8003dac <HAL_DMA_IRQHandler+0xc94>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d022      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a71      	ldr	r2, [pc, #452]	@ (8003db0 <HAL_DMA_IRQHandler+0xc98>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01d      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a70      	ldr	r2, [pc, #448]	@ (8003db4 <HAL_DMA_IRQHandler+0xc9c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d018      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6e      	ldr	r2, [pc, #440]	@ (8003db8 <HAL_DMA_IRQHandler+0xca0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6d      	ldr	r2, [pc, #436]	@ (8003dbc <HAL_DMA_IRQHandler+0xca4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a6b      	ldr	r2, [pc, #428]	@ (8003dc0 <HAL_DMA_IRQHandler+0xca8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6a      	ldr	r2, [pc, #424]	@ (8003dc4 <HAL_DMA_IRQHandler+0xcac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_DMA_IRQHandler+0xb12>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a68      	ldr	r2, [pc, #416]	@ (8003dc8 <HAL_DMA_IRQHandler+0xcb0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <HAL_DMA_IRQHandler+0xb24>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0208 	bic.w	r2, r2, #8
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e007      	b.n	8003c4c <HAL_DMA_IRQHandler+0xb34>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8165 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5e:	e15f      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2202      	movs	r2, #2
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80c5 	beq.w	8003e00 <HAL_DMA_IRQHandler+0xce8>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80bf 	beq.w	8003e00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d018      	beq.n	8003cce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 813a 	beq.w	8003f24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb8:	e134      	b.n	8003f24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8130 	beq.w	8003f24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ccc:	e12a      	b.n	8003f24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 8089 	bne.w	8003dec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2b      	ldr	r2, [pc, #172]	@ (8003d8c <HAL_DMA_IRQHandler+0xc74>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d04a      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a29      	ldr	r2, [pc, #164]	@ (8003d90 <HAL_DMA_IRQHandler+0xc78>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d045      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a28      	ldr	r2, [pc, #160]	@ (8003d94 <HAL_DMA_IRQHandler+0xc7c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d040      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	@ (8003d98 <HAL_DMA_IRQHandler+0xc80>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d03b      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a25      	ldr	r2, [pc, #148]	@ (8003d9c <HAL_DMA_IRQHandler+0xc84>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d036      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <HAL_DMA_IRQHandler+0xc88>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d031      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a22      	ldr	r2, [pc, #136]	@ (8003da4 <HAL_DMA_IRQHandler+0xc8c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d02c      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a20      	ldr	r2, [pc, #128]	@ (8003da8 <HAL_DMA_IRQHandler+0xc90>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d027      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dac <HAL_DMA_IRQHandler+0xc94>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <HAL_DMA_IRQHandler+0xc98>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01d      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <HAL_DMA_IRQHandler+0xc9c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003db8 <HAL_DMA_IRQHandler+0xca0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <HAL_DMA_IRQHandler+0xca4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a17      	ldr	r2, [pc, #92]	@ (8003dc0 <HAL_DMA_IRQHandler+0xca8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a16      	ldr	r2, [pc, #88]	@ (8003dc4 <HAL_DMA_IRQHandler+0xcac>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xc62>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <HAL_DMA_IRQHandler+0xcb0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d128      	bne.n	8003dcc <HAL_DMA_IRQHandler+0xcb4>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0214 	bic.w	r2, r2, #20
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e027      	b.n	8003ddc <HAL_DMA_IRQHandler+0xcc4>
 8003d8c:	40020010 	.word	0x40020010
 8003d90:	40020028 	.word	0x40020028
 8003d94:	40020040 	.word	0x40020040
 8003d98:	40020058 	.word	0x40020058
 8003d9c:	40020070 	.word	0x40020070
 8003da0:	40020088 	.word	0x40020088
 8003da4:	400200a0 	.word	0x400200a0
 8003da8:	400200b8 	.word	0x400200b8
 8003dac:	40020410 	.word	0x40020410
 8003db0:	40020428 	.word	0x40020428
 8003db4:	40020440 	.word	0x40020440
 8003db8:	40020458 	.word	0x40020458
 8003dbc:	40020470 	.word	0x40020470
 8003dc0:	40020488 	.word	0x40020488
 8003dc4:	400204a0 	.word	0x400204a0
 8003dc8:	400204b8 	.word	0x400204b8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 020a 	bic.w	r2, r2, #10
 8003dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8097 	beq.w	8003f24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dfe:	e091      	b.n	8003f24 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2208      	movs	r2, #8
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8088 	beq.w	8003f26 <HAL_DMA_IRQHandler+0xe0e>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8082 	beq.w	8003f26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a41      	ldr	r2, [pc, #260]	@ (8003f2c <HAL_DMA_IRQHandler+0xe14>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d04a      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a3f      	ldr	r2, [pc, #252]	@ (8003f30 <HAL_DMA_IRQHandler+0xe18>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d045      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f34 <HAL_DMA_IRQHandler+0xe1c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d040      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3c      	ldr	r2, [pc, #240]	@ (8003f38 <HAL_DMA_IRQHandler+0xe20>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d03b      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f3c <HAL_DMA_IRQHandler+0xe24>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d036      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a39      	ldr	r2, [pc, #228]	@ (8003f40 <HAL_DMA_IRQHandler+0xe28>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a38      	ldr	r2, [pc, #224]	@ (8003f44 <HAL_DMA_IRQHandler+0xe2c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02c      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a36      	ldr	r2, [pc, #216]	@ (8003f48 <HAL_DMA_IRQHandler+0xe30>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a35      	ldr	r2, [pc, #212]	@ (8003f4c <HAL_DMA_IRQHandler+0xe34>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a33      	ldr	r2, [pc, #204]	@ (8003f50 <HAL_DMA_IRQHandler+0xe38>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a32      	ldr	r2, [pc, #200]	@ (8003f54 <HAL_DMA_IRQHandler+0xe3c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a30      	ldr	r2, [pc, #192]	@ (8003f58 <HAL_DMA_IRQHandler+0xe40>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f5c <HAL_DMA_IRQHandler+0xe44>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <HAL_DMA_IRQHandler+0xe48>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f64 <HAL_DMA_IRQHandler+0xe4c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0xdaa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8003f68 <HAL_DMA_IRQHandler+0xe50>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0xdbc>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 021c 	bic.w	r2, r2, #28
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e007      	b.n	8003ee4 <HAL_DMA_IRQHandler+0xdcc>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 020e 	bic.w	r2, r2, #14
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2201      	movs	r2, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e004      	b.n	8003f26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f26:	3728      	adds	r7, #40	@ 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8

08003f6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7f      	ldr	r2, [pc, #508]	@ (8004188 <DMA_SetConfig+0x21c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d072      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7d      	ldr	r2, [pc, #500]	@ (800418c <DMA_SetConfig+0x220>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d06d      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004190 <DMA_SetConfig+0x224>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d068      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a7a      	ldr	r2, [pc, #488]	@ (8004194 <DMA_SetConfig+0x228>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d063      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a79      	ldr	r2, [pc, #484]	@ (8004198 <DMA_SetConfig+0x22c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d05e      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a77      	ldr	r2, [pc, #476]	@ (800419c <DMA_SetConfig+0x230>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d059      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a76      	ldr	r2, [pc, #472]	@ (80041a0 <DMA_SetConfig+0x234>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d054      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a74      	ldr	r2, [pc, #464]	@ (80041a4 <DMA_SetConfig+0x238>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d04f      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a73      	ldr	r2, [pc, #460]	@ (80041a8 <DMA_SetConfig+0x23c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d04a      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a71      	ldr	r2, [pc, #452]	@ (80041ac <DMA_SetConfig+0x240>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d045      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a70      	ldr	r2, [pc, #448]	@ (80041b0 <DMA_SetConfig+0x244>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d040      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80041b4 <DMA_SetConfig+0x248>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d03b      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6d      	ldr	r2, [pc, #436]	@ (80041b8 <DMA_SetConfig+0x24c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d036      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6b      	ldr	r2, [pc, #428]	@ (80041bc <DMA_SetConfig+0x250>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d031      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6a      	ldr	r2, [pc, #424]	@ (80041c0 <DMA_SetConfig+0x254>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d02c      	beq.n	8004076 <DMA_SetConfig+0x10a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a68      	ldr	r2, [pc, #416]	@ (80041c4 <DMA_SetConfig+0x258>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d027      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a67      	ldr	r2, [pc, #412]	@ (80041c8 <DMA_SetConfig+0x25c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a65      	ldr	r2, [pc, #404]	@ (80041cc <DMA_SetConfig+0x260>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01d      	beq.n	8004076 <DMA_SetConfig+0x10a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a64      	ldr	r2, [pc, #400]	@ (80041d0 <DMA_SetConfig+0x264>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d018      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a62      	ldr	r2, [pc, #392]	@ (80041d4 <DMA_SetConfig+0x268>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <DMA_SetConfig+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a61      	ldr	r2, [pc, #388]	@ (80041d8 <DMA_SetConfig+0x26c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5f      	ldr	r2, [pc, #380]	@ (80041dc <DMA_SetConfig+0x270>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <DMA_SetConfig+0x10a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a5e      	ldr	r2, [pc, #376]	@ (80041e0 <DMA_SetConfig+0x274>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a5c      	ldr	r2, [pc, #368]	@ (80041e4 <DMA_SetConfig+0x278>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <DMA_SetConfig+0x10e>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <DMA_SetConfig+0x110>
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004088:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800409a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a39      	ldr	r2, [pc, #228]	@ (8004188 <DMA_SetConfig+0x21c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d04a      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a38      	ldr	r2, [pc, #224]	@ (800418c <DMA_SetConfig+0x220>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d045      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a36      	ldr	r2, [pc, #216]	@ (8004190 <DMA_SetConfig+0x224>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d040      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a35      	ldr	r2, [pc, #212]	@ (8004194 <DMA_SetConfig+0x228>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d03b      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a33      	ldr	r2, [pc, #204]	@ (8004198 <DMA_SetConfig+0x22c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d036      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a32      	ldr	r2, [pc, #200]	@ (800419c <DMA_SetConfig+0x230>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d031      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a30      	ldr	r2, [pc, #192]	@ (80041a0 <DMA_SetConfig+0x234>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d02c      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a2f      	ldr	r2, [pc, #188]	@ (80041a4 <DMA_SetConfig+0x238>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d027      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2d      	ldr	r2, [pc, #180]	@ (80041a8 <DMA_SetConfig+0x23c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d022      	beq.n	800413c <DMA_SetConfig+0x1d0>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2c      	ldr	r2, [pc, #176]	@ (80041ac <DMA_SetConfig+0x240>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d01d      	beq.n	800413c <DMA_SetConfig+0x1d0>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2a      	ldr	r2, [pc, #168]	@ (80041b0 <DMA_SetConfig+0x244>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d018      	beq.n	800413c <DMA_SetConfig+0x1d0>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a29      	ldr	r2, [pc, #164]	@ (80041b4 <DMA_SetConfig+0x248>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d013      	beq.n	800413c <DMA_SetConfig+0x1d0>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a27      	ldr	r2, [pc, #156]	@ (80041b8 <DMA_SetConfig+0x24c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00e      	beq.n	800413c <DMA_SetConfig+0x1d0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a26      	ldr	r2, [pc, #152]	@ (80041bc <DMA_SetConfig+0x250>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d009      	beq.n	800413c <DMA_SetConfig+0x1d0>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <DMA_SetConfig+0x254>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <DMA_SetConfig+0x1d0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a23      	ldr	r2, [pc, #140]	@ (80041c4 <DMA_SetConfig+0x258>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d101      	bne.n	8004140 <DMA_SetConfig+0x1d4>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <DMA_SetConfig+0x1d6>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d059      	beq.n	80041fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	223f      	movs	r2, #63	@ 0x3f
 8004150:	409a      	lsls	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004164:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d138      	bne.n	80041e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004186:	e086      	b.n	8004296 <DMA_SetConfig+0x32a>
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	58025408 	.word	0x58025408
 80041cc:	5802541c 	.word	0x5802541c
 80041d0:	58025430 	.word	0x58025430
 80041d4:	58025444 	.word	0x58025444
 80041d8:	58025458 	.word	0x58025458
 80041dc:	5802546c 	.word	0x5802546c
 80041e0:	58025480 	.word	0x58025480
 80041e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	e04d      	b.n	8004296 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a29      	ldr	r2, [pc, #164]	@ (80042a4 <DMA_SetConfig+0x338>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <DMA_SetConfig+0x2de>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a27      	ldr	r2, [pc, #156]	@ (80042a8 <DMA_SetConfig+0x33c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <DMA_SetConfig+0x2de>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <DMA_SetConfig+0x340>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <DMA_SetConfig+0x2de>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a24      	ldr	r2, [pc, #144]	@ (80042b0 <DMA_SetConfig+0x344>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <DMA_SetConfig+0x2de>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a23      	ldr	r2, [pc, #140]	@ (80042b4 <DMA_SetConfig+0x348>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <DMA_SetConfig+0x2de>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	@ (80042b8 <DMA_SetConfig+0x34c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <DMA_SetConfig+0x2de>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a20      	ldr	r2, [pc, #128]	@ (80042bc <DMA_SetConfig+0x350>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <DMA_SetConfig+0x2de>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <DMA_SetConfig+0x354>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <DMA_SetConfig+0x2e2>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <DMA_SetConfig+0x2e4>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d108      	bne.n	8004286 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	60da      	str	r2, [r3, #12]
}
 8004284:	e007      	b.n	8004296 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	60da      	str	r2, [r3, #12]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	58025444 	.word	0x58025444
 80042b4:	58025458 	.word	0x58025458
 80042b8:	5802546c 	.word	0x5802546c
 80042bc:	58025480 	.word	0x58025480
 80042c0:	58025494 	.word	0x58025494

080042c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a42      	ldr	r2, [pc, #264]	@ (80043dc <DMA_CalcBaseAndBitshift+0x118>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04a      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a41      	ldr	r2, [pc, #260]	@ (80043e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d045      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3f      	ldr	r2, [pc, #252]	@ (80043e4 <DMA_CalcBaseAndBitshift+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d040      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3e      	ldr	r2, [pc, #248]	@ (80043e8 <DMA_CalcBaseAndBitshift+0x124>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d03b      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a3c      	ldr	r2, [pc, #240]	@ (80043ec <DMA_CalcBaseAndBitshift+0x128>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d036      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3b      	ldr	r2, [pc, #236]	@ (80043f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d031      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a39      	ldr	r2, [pc, #228]	@ (80043f4 <DMA_CalcBaseAndBitshift+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02c      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a38      	ldr	r2, [pc, #224]	@ (80043f8 <DMA_CalcBaseAndBitshift+0x134>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d027      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a36      	ldr	r2, [pc, #216]	@ (80043fc <DMA_CalcBaseAndBitshift+0x138>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a35      	ldr	r2, [pc, #212]	@ (8004400 <DMA_CalcBaseAndBitshift+0x13c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d01d      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a33      	ldr	r2, [pc, #204]	@ (8004404 <DMA_CalcBaseAndBitshift+0x140>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <DMA_CalcBaseAndBitshift+0x144>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a30      	ldr	r2, [pc, #192]	@ (800440c <DMA_CalcBaseAndBitshift+0x148>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2f      	ldr	r2, [pc, #188]	@ (8004410 <DMA_CalcBaseAndBitshift+0x14c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2d      	ldr	r2, [pc, #180]	@ (8004414 <DMA_CalcBaseAndBitshift+0x150>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <DMA_CalcBaseAndBitshift+0xa8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2c      	ldr	r2, [pc, #176]	@ (8004418 <DMA_CalcBaseAndBitshift+0x154>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d101      	bne.n	8004370 <DMA_CalcBaseAndBitshift+0xac>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <DMA_CalcBaseAndBitshift+0xae>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d024      	beq.n	80043c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3b10      	subs	r3, #16
 800437e:	4a27      	ldr	r2, [pc, #156]	@ (800441c <DMA_CalcBaseAndBitshift+0x158>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	4a24      	ldr	r2, [pc, #144]	@ (8004420 <DMA_CalcBaseAndBitshift+0x15c>)
 8004390:	5cd3      	ldrb	r3, [r2, r3]
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d908      	bls.n	80043b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <DMA_CalcBaseAndBitshift+0x160>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80043ae:	e00d      	b.n	80043cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <DMA_CalcBaseAndBitshift+0x160>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043be:	e005      	b.n	80043cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40020010 	.word	0x40020010
 80043e0:	40020028 	.word	0x40020028
 80043e4:	40020040 	.word	0x40020040
 80043e8:	40020058 	.word	0x40020058
 80043ec:	40020070 	.word	0x40020070
 80043f0:	40020088 	.word	0x40020088
 80043f4:	400200a0 	.word	0x400200a0
 80043f8:	400200b8 	.word	0x400200b8
 80043fc:	40020410 	.word	0x40020410
 8004400:	40020428 	.word	0x40020428
 8004404:	40020440 	.word	0x40020440
 8004408:	40020458 	.word	0x40020458
 800440c:	40020470 	.word	0x40020470
 8004410:	40020488 	.word	0x40020488
 8004414:	400204a0 	.word	0x400204a0
 8004418:	400204b8 	.word	0x400204b8
 800441c:	aaaaaaab 	.word	0xaaaaaaab
 8004420:	0800c39c 	.word	0x0800c39c
 8004424:	fffffc00 	.word	0xfffffc00

08004428 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d120      	bne.n	800447e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	2b03      	cmp	r3, #3
 8004442:	d858      	bhi.n	80044f6 <DMA_CheckFifoParam+0xce>
 8004444:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <DMA_CheckFifoParam+0x24>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800446f 	.word	0x0800446f
 8004454:	0800445d 	.word	0x0800445d
 8004458:	080044f7 	.word	0x080044f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d048      	beq.n	80044fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800446c:	e045      	b.n	80044fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004476:	d142      	bne.n	80044fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800447c:	e03f      	b.n	80044fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004486:	d123      	bne.n	80044d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	2b03      	cmp	r3, #3
 800448e:	d838      	bhi.n	8004502 <DMA_CheckFifoParam+0xda>
 8004490:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <DMA_CheckFifoParam+0x70>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044af 	.word	0x080044af
 80044a0:	080044a9 	.word	0x080044a9
 80044a4:	080044c1 	.word	0x080044c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
        break;
 80044ac:	e030      	b.n	8004510 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d025      	beq.n	8004506 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044be:	e022      	b.n	8004506 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044c8:	d11f      	bne.n	800450a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ce:	e01c      	b.n	800450a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d902      	bls.n	80044de <DMA_CheckFifoParam+0xb6>
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d003      	beq.n	80044e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044dc:	e018      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
        break;
 80044e2:	e015      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00e      	beq.n	800450e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
    break;
 80044f4:	e00b      	b.n	800450e <DMA_CheckFifoParam+0xe6>
        break;
 80044f6:	bf00      	nop
 80044f8:	e00a      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        break;
 80044fa:	bf00      	nop
 80044fc:	e008      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        break;
 80044fe:	bf00      	nop
 8004500:	e006      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        break;
 8004502:	bf00      	nop
 8004504:	e004      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        break;
 8004506:	bf00      	nop
 8004508:	e002      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
        break;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <DMA_CheckFifoParam+0xe8>
    break;
 800450e:	bf00      	nop
    }
  }

  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop

08004520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a38      	ldr	r2, [pc, #224]	@ (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a36      	ldr	r2, [pc, #216]	@ (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a35      	ldr	r2, [pc, #212]	@ (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a33      	ldr	r2, [pc, #204]	@ (8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a32      	ldr	r2, [pc, #200]	@ (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a30      	ldr	r2, [pc, #192]	@ (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2f      	ldr	r2, [pc, #188]	@ (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a2d      	ldr	r2, [pc, #180]	@ (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	3b08      	subs	r3, #8
 8004590:	4a28      	ldr	r2, [pc, #160]	@ (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4b26      	ldr	r3, [pc, #152]	@ (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	461a      	mov	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a24      	ldr	r2, [pc, #144]	@ (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045bc:	e024      	b.n	8004608 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3b10      	subs	r3, #16
 80045c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d806      	bhi.n	80045e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d902      	bls.n	80045e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3308      	adds	r3, #8
 80045e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4b18      	ldr	r3, [pc, #96]	@ (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80045f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	58025408 	.word	0x58025408
 8004618:	5802541c 	.word	0x5802541c
 800461c:	58025430 	.word	0x58025430
 8004620:	58025444 	.word	0x58025444
 8004624:	58025458 	.word	0x58025458
 8004628:	5802546c 	.word	0x5802546c
 800462c:	58025480 	.word	0x58025480
 8004630:	58025494 	.word	0x58025494
 8004634:	cccccccd 	.word	0xcccccccd
 8004638:	16009600 	.word	0x16009600
 800463c:	58025880 	.word	0x58025880
 8004640:	aaaaaaab 	.word	0xaaaaaaab
 8004644:	400204b8 	.word	0x400204b8
 8004648:	4002040f 	.word	0x4002040f
 800464c:	10008200 	.word	0x10008200
 8004650:	40020880 	.word	0x40020880

08004654 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d04a      	beq.n	8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d847      	bhi.n	8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a25      	ldr	r2, [pc, #148]	@ (800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a24      	ldr	r2, [pc, #144]	@ (8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d01d      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a22      	ldr	r2, [pc, #136]	@ (8004714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d018      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1f      	ldr	r2, [pc, #124]	@ (800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4b17      	ldr	r3, [pc, #92]	@ (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a15      	ldr	r2, [pc, #84]	@ (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80046de:	e009      	b.n	80046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4b14      	ldr	r3, [pc, #80]	@ (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a11      	ldr	r2, [pc, #68]	@ (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	2201      	movs	r2, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	58025408 	.word	0x58025408
 8004710:	5802541c 	.word	0x5802541c
 8004714:	58025430 	.word	0x58025430
 8004718:	58025444 	.word	0x58025444
 800471c:	58025458 	.word	0x58025458
 8004720:	5802546c 	.word	0x5802546c
 8004724:	58025480 	.word	0x58025480
 8004728:	58025494 	.word	0x58025494
 800472c:	1600963f 	.word	0x1600963f
 8004730:	58025940 	.word	0x58025940
 8004734:	1000823f 	.word	0x1000823f
 8004738:	40020940 	.word	0x40020940

0800473c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800474a:	4b86      	ldr	r3, [pc, #536]	@ (8004964 <HAL_GPIO_Init+0x228>)
 800474c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800474e:	e18c      	b.n	8004a6a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2101      	movs	r1, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 817e 	beq.w	8004a64 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d005      	beq.n	8004780 <HAL_GPIO_Init+0x44>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d130      	bne.n	80047e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047b6:	2201      	movs	r2, #1
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0201 	and.w	r2, r3, #1
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d017      	beq.n	800481e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	2203      	movs	r2, #3
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d123      	bne.n	8004872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	08da      	lsrs	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3208      	adds	r2, #8
 8004832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	08da      	lsrs	r2, r3, #3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3208      	adds	r2, #8
 800486c:	69b9      	ldr	r1, [r7, #24]
 800486e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	2203      	movs	r2, #3
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0203 	and.w	r2, r3, #3
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80d8 	beq.w	8004a64 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004968 <HAL_GPIO_Init+0x22c>)
 80048b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <HAL_GPIO_Init+0x22c>)
 80048bc:	f043 0302 	orr.w	r3, r3, #2
 80048c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80048c4:	4b28      	ldr	r3, [pc, #160]	@ (8004968 <HAL_GPIO_Init+0x22c>)
 80048c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d2:	4a26      	ldr	r2, [pc, #152]	@ (800496c <HAL_GPIO_Init+0x230>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <HAL_GPIO_Init+0x234>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d04a      	beq.n	8004994 <HAL_GPIO_Init+0x258>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_GPIO_Init+0x238>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02b      	beq.n	800495e <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <HAL_GPIO_Init+0x23c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d025      	beq.n	800495a <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1a      	ldr	r2, [pc, #104]	@ (800497c <HAL_GPIO_Init+0x240>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01f      	beq.n	8004956 <HAL_GPIO_Init+0x21a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <HAL_GPIO_Init+0x244>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d019      	beq.n	8004952 <HAL_GPIO_Init+0x216>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a18      	ldr	r2, [pc, #96]	@ (8004984 <HAL_GPIO_Init+0x248>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_GPIO_Init+0x212>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a17      	ldr	r2, [pc, #92]	@ (8004988 <HAL_GPIO_Init+0x24c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00d      	beq.n	800494a <HAL_GPIO_Init+0x20e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a16      	ldr	r2, [pc, #88]	@ (800498c <HAL_GPIO_Init+0x250>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <HAL_GPIO_Init+0x20a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a15      	ldr	r2, [pc, #84]	@ (8004990 <HAL_GPIO_Init+0x254>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <HAL_GPIO_Init+0x206>
 800493e:	2309      	movs	r3, #9
 8004940:	e029      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 8004942:	230a      	movs	r3, #10
 8004944:	e027      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 8004946:	2307      	movs	r3, #7
 8004948:	e025      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 800494a:	2306      	movs	r3, #6
 800494c:	e023      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 800494e:	2305      	movs	r3, #5
 8004950:	e021      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 8004952:	2304      	movs	r3, #4
 8004954:	e01f      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 8004956:	2303      	movs	r3, #3
 8004958:	e01d      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 800495a:	2302      	movs	r3, #2
 800495c:	e01b      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 800495e:	2301      	movs	r3, #1
 8004960:	e019      	b.n	8004996 <HAL_GPIO_Init+0x25a>
 8004962:	bf00      	nop
 8004964:	58000080 	.word	0x58000080
 8004968:	58024400 	.word	0x58024400
 800496c:	58000400 	.word	0x58000400
 8004970:	58020000 	.word	0x58020000
 8004974:	58020400 	.word	0x58020400
 8004978:	58020800 	.word	0x58020800
 800497c:	58020c00 	.word	0x58020c00
 8004980:	58021000 	.word	0x58021000
 8004984:	58021400 	.word	0x58021400
 8004988:	58021800 	.word	0x58021800
 800498c:	58021c00 	.word	0x58021c00
 8004990:	58022400 	.word	0x58022400
 8004994:	2300      	movs	r3, #0
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	f002 0203 	and.w	r2, r2, #3
 800499c:	0092      	lsls	r2, r2, #2
 800499e:	4093      	lsls	r3, r2
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a6:	4938      	ldr	r1, [pc, #224]	@ (8004a88 <HAL_GPIO_Init+0x34c>)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3302      	adds	r3, #2
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f ae6b 	bne.w	8004750 <HAL_GPIO_Init+0x14>
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	3724      	adds	r7, #36	@ 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	58000400 	.word	0x58000400

08004a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	807b      	strh	r3, [r7, #2]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a9c:	787b      	ldrb	r3, [r7, #1]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aa2:	887a      	ldrh	r2, [r7, #2]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004aa8:	e003      	b.n	8004ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aaa:	887b      	ldrh	r3, [r7, #2]
 8004aac:	041a      	lsls	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	619a      	str	r2, [r3, #24]
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad0:	887a      	ldrh	r2, [r7, #2]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	041a      	lsls	r2, r3, #16
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	43d9      	mvns	r1, r3
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	400b      	ands	r3, r1
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	619a      	str	r2, [r3, #24]
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fc f8a7 	bl	8000c6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a04      	ldr	r2, [pc, #16]	@ (8004b44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	58024800 	.word	0x58024800

08004b48 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d00a      	beq.n	8004b72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b5c:	4b16      	ldr	r3, [pc, #88]	@ (8004bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d001      	beq.n	8004b6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01f      	b.n	8004bae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e01d      	b.n	8004bae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b72:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f023 0207 	bic.w	r2, r3, #7
 8004b7a:	490f      	ldr	r1, [pc, #60]	@ (8004bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b82:	f7fc fdeb 	bl	800175c <HAL_GetTick>
 8004b86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b88:	e009      	b.n	8004b9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b8a:	f7fc fde7 	bl	800175c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b98:	d901      	bls.n	8004b9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e007      	b.n	8004bae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004baa:	d1ee      	bne.n	8004b8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	58024800 	.word	0x58024800

08004bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08c      	sub	sp, #48	@ 0x30
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e3c8      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8087 	beq.w	8004cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bdc:	4b88      	ldr	r3, [pc, #544]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be6:	4b86      	ldr	r3, [pc, #536]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCC_OscConfig+0x46>
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	2b18      	cmp	r3, #24
 8004bf6:	d110      	bne.n	8004c1a <HAL_RCC_OscConfig+0x5e>
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d10b      	bne.n	8004c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c02:	4b7f      	ldr	r3, [pc, #508]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d06c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x12c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d168      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e3a2      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x76>
 8004c24:	4b76      	ldr	r3, [pc, #472]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a75      	ldr	r2, [pc, #468]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e02e      	b.n	8004c90 <HAL_RCC_OscConfig+0xd4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x98>
 8004c3a:	4b71      	ldr	r3, [pc, #452]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a70      	ldr	r2, [pc, #448]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6e      	ldr	r3, [pc, #440]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e01d      	b.n	8004c90 <HAL_RCC_OscConfig+0xd4>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0xbc>
 8004c5e:	4b68      	ldr	r3, [pc, #416]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a67      	ldr	r2, [pc, #412]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4b65      	ldr	r3, [pc, #404]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a64      	ldr	r2, [pc, #400]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e00b      	b.n	8004c90 <HAL_RCC_OscConfig+0xd4>
 8004c78:	4b61      	ldr	r3, [pc, #388]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a60      	ldr	r2, [pc, #384]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b5e      	ldr	r3, [pc, #376]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a5d      	ldr	r2, [pc, #372]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fc fd60 	bl	800175c <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fc fd5c 	bl	800175c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	@ 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e356      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cb2:	4b53      	ldr	r3, [pc, #332]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xe4>
 8004cbe:	e014      	b.n	8004cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fc fd4c 	bl	800175c <HAL_GetTick>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fc fd48 	bl	800175c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	@ 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e342      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cda:	4b49      	ldr	r3, [pc, #292]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x10c>
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808c 	beq.w	8004e10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf8:	4b41      	ldr	r3, [pc, #260]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d02:	4b3f      	ldr	r3, [pc, #252]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_RCC_OscConfig+0x162>
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	2b18      	cmp	r3, #24
 8004d12:	d137      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1c8>
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d132      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d1e:	4b38      	ldr	r3, [pc, #224]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_RCC_OscConfig+0x17a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e314      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d36:	4b32      	ldr	r3, [pc, #200]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 0219 	bic.w	r2, r3, #25
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	492f      	ldr	r1, [pc, #188]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fc fd08 	bl	800175c <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fc fd04 	bl	800175c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e2fe      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d62:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	4920      	ldr	r1, [pc, #128]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d82:	e045      	b.n	8004e10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d026      	beq.n	8004dda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 0219 	bic.w	r2, r3, #25
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4919      	ldr	r1, [pc, #100]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fc fcdd 	bl	800175c <HAL_GetTick>
 8004da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fc fcd9 	bl	800175c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e2d3      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db8:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	490b      	ldr	r1, [pc, #44]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
 8004dd8:	e01a      	b.n	8004e10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dda:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a08      	ldr	r2, [pc, #32]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fc fcb9 	bl	800175c <HAL_GetTick>
 8004dea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dee:	f7fc fcb5 	bl	800175c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d903      	bls.n	8004e04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e2af      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
 8004e00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e04:	4b96      	ldr	r3, [pc, #600]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ee      	bne.n	8004dee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d06a      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1c:	4b90      	ldr	r3, [pc, #576]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e26:	4b8e      	ldr	r3, [pc, #568]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d007      	beq.n	8004e42 <HAL_RCC_OscConfig+0x286>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b18      	cmp	r3, #24
 8004e36:	d11b      	bne.n	8004e70 <HAL_RCC_OscConfig+0x2b4>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d116      	bne.n	8004e70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e42:	4b87      	ldr	r3, [pc, #540]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_RCC_OscConfig+0x29e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	2b80      	cmp	r3, #128	@ 0x80
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e282      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e5a:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	497d      	ldr	r1, [pc, #500]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e6e:	e040      	b.n	8004ef2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d023      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e78:	4b79      	ldr	r3, [pc, #484]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a78      	ldr	r2, [pc, #480]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fc fc6a 	bl	800175c <HAL_GetTick>
 8004e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e8c:	f7fc fc66 	bl	800175c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e260      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e9e:	4b70      	ldr	r3, [pc, #448]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	4969      	ldr	r1, [pc, #420]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60cb      	str	r3, [r1, #12]
 8004ebe:	e018      	b.n	8004ef2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ec0:	4b67      	ldr	r3, [pc, #412]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a66      	ldr	r2, [pc, #408]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fc fc46 	bl	800175c <HAL_GetTick>
 8004ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ed4:	f7fc fc42 	bl	800175c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e23c      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d036      	beq.n	8004f6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d019      	beq.n	8004f3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f06:	4b56      	ldr	r3, [pc, #344]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0a:	4a55      	ldr	r2, [pc, #340]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fc fc23 	bl	800175c <HAL_GetTick>
 8004f16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1a:	f7fc fc1f 	bl	800175c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e219      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x35e>
 8004f38:	e018      	b.n	8004f6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3a:	4b49      	ldr	r3, [pc, #292]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3e:	4a48      	ldr	r2, [pc, #288]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fc fc09 	bl	800175c <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fc fc05 	bl	800175c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1ff      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f60:	4b3f      	ldr	r3, [pc, #252]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d036      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d019      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f80:	4b37      	ldr	r3, [pc, #220]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a36      	ldr	r2, [pc, #216]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004f86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f8c:	f7fc fbe6 	bl	800175c <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f94:	f7fc fbe2 	bl	800175c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e1dc      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x3d8>
 8004fb2:	e018      	b.n	8004fe6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a29      	ldr	r2, [pc, #164]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004fba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fc0:	f7fc fbcc 	bl	800175c <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc8:	f7fc fbc8 	bl	800175c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1c2      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fda:	4b21      	ldr	r3, [pc, #132]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8086 	beq.w	8005100 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <HAL_RCC_OscConfig+0x4a8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8005064 <HAL_RCC_OscConfig+0x4a8>)
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005000:	f7fc fbac 	bl	800175c <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005008:	f7fc fba8 	bl	800175c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	@ 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1a2      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501a:	4b12      	ldr	r3, [pc, #72]	@ (8005064 <HAL_RCC_OscConfig+0x4a8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d106      	bne.n	800503c <HAL_RCC_OscConfig+0x480>
 800502e:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	4a0b      	ldr	r2, [pc, #44]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
 800503a:	e032      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d111      	bne.n	8005068 <HAL_RCC_OscConfig+0x4ac>
 8005044:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	4a05      	ldr	r2, [pc, #20]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005050:	4b03      	ldr	r3, [pc, #12]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005054:	4a02      	ldr	r2, [pc, #8]	@ (8005060 <HAL_RCC_OscConfig+0x4a4>)
 8005056:	f023 0304 	bic.w	r3, r3, #4
 800505a:	6713      	str	r3, [r2, #112]	@ 0x70
 800505c:	e021      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e6>
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
 8005064:	58024800 	.word	0x58024800
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b05      	cmp	r3, #5
 800506e:	d10c      	bne.n	800508a <HAL_RCC_OscConfig+0x4ce>
 8005070:	4b83      	ldr	r3, [pc, #524]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	4a82      	ldr	r2, [pc, #520]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
 800507c:	4b80      	ldr	r3, [pc, #512]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005080:	4a7f      	ldr	r2, [pc, #508]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6713      	str	r3, [r2, #112]	@ 0x70
 8005088:	e00b      	b.n	80050a2 <HAL_RCC_OscConfig+0x4e6>
 800508a:	4b7d      	ldr	r3, [pc, #500]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	4a7c      	ldr	r2, [pc, #496]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	6713      	str	r3, [r2, #112]	@ 0x70
 8005096:	4b7a      	ldr	r3, [pc, #488]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a79      	ldr	r2, [pc, #484]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d015      	beq.n	80050d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7fc fb57 	bl	800175c <HAL_GetTick>
 80050ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fc fb53 	bl	800175c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e14b      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ee      	beq.n	80050b2 <HAL_RCC_OscConfig+0x4f6>
 80050d4:	e014      	b.n	8005100 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fc fb41 	bl	800175c <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fc fb3d 	bl	800175c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e135      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050f4:	4b62      	ldr	r3, [pc, #392]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ee      	bne.n	80050de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 812a 	beq.w	800535e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800510a:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005112:	2b18      	cmp	r3, #24
 8005114:	f000 80ba 	beq.w	800528c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	2b02      	cmp	r3, #2
 800511e:	f040 8095 	bne.w	800524c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b57      	ldr	r3, [pc, #348]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a56      	ldr	r2, [pc, #344]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005128:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fc fb15 	bl	800175c <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005136:	f7fc fb11 	bl	800175c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e10b      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005148:	4b4d      	ldr	r3, [pc, #308]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005154:	4b4a      	ldr	r3, [pc, #296]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005156:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005158:	4b4a      	ldr	r3, [pc, #296]	@ (8005284 <HAL_RCC_OscConfig+0x6c8>)
 800515a:	4013      	ands	r3, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005164:	0112      	lsls	r2, r2, #4
 8005166:	430a      	orrs	r2, r1
 8005168:	4945      	ldr	r1, [pc, #276]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	628b      	str	r3, [r1, #40]	@ 0x28
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	3b01      	subs	r3, #1
 8005174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517c:	3b01      	subs	r3, #1
 800517e:	025b      	lsls	r3, r3, #9
 8005180:	b29b      	uxth	r3, r3
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	3b01      	subs	r3, #1
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005196:	3b01      	subs	r3, #1
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800519e:	4938      	ldr	r1, [pc, #224]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051a4:	4b36      	ldr	r3, [pc, #216]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a8:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051b0:	4b33      	ldr	r3, [pc, #204]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051b4:	4b34      	ldr	r3, [pc, #208]	@ (8005288 <HAL_RCC_OscConfig+0x6cc>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051bc:	00d2      	lsls	r2, r2, #3
 80051be:	4930      	ldr	r1, [pc, #192]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	f023 020c 	bic.w	r2, r3, #12
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	492b      	ldr	r1, [pc, #172]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	f023 0202 	bic.w	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	4927      	ldr	r1, [pc, #156]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051e8:	4b25      	ldr	r3, [pc, #148]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	4a24      	ldr	r2, [pc, #144]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f4:	4b22      	ldr	r3, [pc, #136]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	4a21      	ldr	r2, [pc, #132]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 80051fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005200:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005206:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800520c:	4b1c      	ldr	r3, [pc, #112]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	4a1b      	ldr	r2, [pc, #108]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005218:	4b19      	ldr	r3, [pc, #100]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800521e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fc fa9a 	bl	800175c <HAL_GetTick>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522c:	f7fc fa96 	bl	800175c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e090      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800523e:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x670>
 800524a:	e088      	b.n	800535e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524c:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0b      	ldr	r2, [pc, #44]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc fa80 	bl	800175c <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fc fa7c 	bl	800175c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e076      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005272:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <HAL_RCC_OscConfig+0x6c4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x6a4>
 800527e:	e06e      	b.n	800535e <HAL_RCC_OscConfig+0x7a2>
 8005280:	58024400 	.word	0x58024400
 8005284:	fffffc0c 	.word	0xfffffc0c
 8005288:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800528c:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005292:	4b35      	ldr	r3, [pc, #212]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	2b01      	cmp	r3, #1
 800529e:	d031      	beq.n	8005304 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f003 0203 	and.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d12a      	bne.n	8005304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	091b      	lsrs	r3, r3, #4
 80052b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d122      	bne.n	8005304 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d11a      	bne.n	8005304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	0a5b      	lsrs	r3, r3, #9
 80052d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d111      	bne.n	8005304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d108      	bne.n	8005304 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e02b      	b.n	8005360 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005308:	4b17      	ldr	r3, [pc, #92]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005312:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	429a      	cmp	r2, r3
 800531c:	d01f      	beq.n	800535e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800531e:	4b12      	ldr	r3, [pc, #72]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	4a11      	ldr	r2, [pc, #68]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800532a:	f7fc fa17 	bl	800175c <HAL_GetTick>
 800532e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005330:	bf00      	nop
 8005332:	f7fc fa13 	bl	800175c <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	4293      	cmp	r3, r2
 800533c:	d0f9      	beq.n	8005332 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800533e:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 8005340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005342:	4b0a      	ldr	r3, [pc, #40]	@ (800536c <HAL_RCC_OscConfig+0x7b0>)
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800534a:	00d2      	lsls	r2, r2, #3
 800534c:	4906      	ldr	r1, [pc, #24]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 800534e:	4313      	orrs	r3, r2
 8005350:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005352:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	4a04      	ldr	r2, [pc, #16]	@ (8005368 <HAL_RCC_OscConfig+0x7ac>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3730      	adds	r7, #48	@ 0x30
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	58024400 	.word	0x58024400
 800536c:	ffff0007 	.word	0xffff0007

08005370 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e19c      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b8a      	ldr	r3, [pc, #552]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d910      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b87      	ldr	r3, [pc, #540]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 020f 	bic.w	r2, r3, #15
 800539a:	4985      	ldr	r1, [pc, #532]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b83      	ldr	r3, [pc, #524]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e184      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	4b7b      	ldr	r3, [pc, #492]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d908      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053d0:	4b78      	ldr	r3, [pc, #480]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	4975      	ldr	r1, [pc, #468]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d010      	beq.n	8005410 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	4b70      	ldr	r3, [pc, #448]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d908      	bls.n	8005410 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053fe:	4b6d      	ldr	r3, [pc, #436]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	496a      	ldr	r1, [pc, #424]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	4b64      	ldr	r3, [pc, #400]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005428:	429a      	cmp	r2, r3
 800542a:	d908      	bls.n	800543e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800542c:	4b61      	ldr	r3, [pc, #388]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	495e      	ldr	r1, [pc, #376]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800543a:	4313      	orrs	r3, r2
 800543c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d010      	beq.n	800546c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	4b59      	ldr	r3, [pc, #356]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005456:	429a      	cmp	r2, r3
 8005458:	d908      	bls.n	800546c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800545a:	4b56      	ldr	r3, [pc, #344]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	4953      	ldr	r1, [pc, #332]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005468:	4313      	orrs	r3, r2
 800546a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d010      	beq.n	800549a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	4b4d      	ldr	r3, [pc, #308]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	429a      	cmp	r2, r3
 8005486:	d908      	bls.n	800549a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b4a      	ldr	r3, [pc, #296]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f023 020f 	bic.w	r2, r3, #15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4947      	ldr	r1, [pc, #284]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005496:	4313      	orrs	r3, r2
 8005498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d055      	beq.n	8005552 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054a6:	4b43      	ldr	r3, [pc, #268]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	4940      	ldr	r1, [pc, #256]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054c0:	4b3c      	ldr	r3, [pc, #240]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d121      	bne.n	8005510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0f6      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054d8:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d115      	bne.n	8005510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0ea      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054f0:	4b30      	ldr	r3, [pc, #192]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0de      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005500:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0d6      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005510:	4b28      	ldr	r3, [pc, #160]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f023 0207 	bic.w	r2, r3, #7
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4925      	ldr	r1, [pc, #148]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800551e:	4313      	orrs	r3, r2
 8005520:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005522:	f7fc f91b 	bl	800175c <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005528:	e00a      	b.n	8005540 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552a:	f7fc f917 	bl	800175c <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005538:	4293      	cmp	r3, r2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e0be      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005540:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	429a      	cmp	r2, r3
 8005550:	d1eb      	bne.n	800552a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d010      	beq.n	8005580 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	429a      	cmp	r2, r3
 800556c:	d208      	bcs.n	8005580 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556e:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f023 020f 	bic.w	r2, r3, #15
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	490e      	ldr	r1, [pc, #56]	@ (80055b4 <HAL_RCC_ClockConfig+0x244>)
 800557c:	4313      	orrs	r3, r2
 800557e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d214      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 020f 	bic.w	r2, r3, #15
 8005596:	4906      	ldr	r1, [pc, #24]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <HAL_RCC_ClockConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e086      	b.n	80056be <HAL_RCC_ClockConfig+0x34e>
 80055b0:	52002000 	.word	0x52002000
 80055b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d208      	bcs.n	80055e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055d4:	4b3c      	ldr	r3, [pc, #240]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	4939      	ldr	r1, [pc, #228]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d010      	beq.n	8005614 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	4b34      	ldr	r3, [pc, #208]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055fe:	429a      	cmp	r2, r3
 8005600:	d208      	bcs.n	8005614 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005602:	4b31      	ldr	r3, [pc, #196]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	492e      	ldr	r1, [pc, #184]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005610:	4313      	orrs	r3, r2
 8005612:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	4b28      	ldr	r3, [pc, #160]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800562c:	429a      	cmp	r2, r3
 800562e:	d208      	bcs.n	8005642 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005630:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4922      	ldr	r1, [pc, #136]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 800563e:	4313      	orrs	r3, r2
 8005640:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d010      	beq.n	8005670 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800565a:	429a      	cmp	r2, r3
 800565c:	d208      	bcs.n	8005670 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	4917      	ldr	r1, [pc, #92]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 800566c:	4313      	orrs	r3, r2
 800566e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005670:	f000 f834 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	4912      	ldr	r1, [pc, #72]	@ (80056cc <HAL_RCC_ClockConfig+0x35c>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
 800568c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800568e:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <HAL_RCC_ClockConfig+0x358>)
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	4a0d      	ldr	r2, [pc, #52]	@ (80056cc <HAL_RCC_ClockConfig+0x35c>)
 8005698:	5cd3      	ldrb	r3, [r2, r3]
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <HAL_RCC_ClockConfig+0x360>)
 80056a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056a8:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <HAL_RCC_ClockConfig+0x364>)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <HAL_RCC_ClockConfig+0x368>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc f808 	bl	80016c8 <HAL_InitTick>
 80056b8:	4603      	mov	r3, r0
 80056ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	0800c38c 	.word	0x0800c38c
 80056d0:	24000004 	.word	0x24000004
 80056d4:	24000000 	.word	0x24000000
 80056d8:	24000008 	.word	0x24000008

080056dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	@ 0x24
 80056e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e2:	4bb3      	ldr	r3, [pc, #716]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ea:	2b18      	cmp	r3, #24
 80056ec:	f200 8155 	bhi.w	800599a <HAL_RCC_GetSysClockFreq+0x2be>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	0800575d 	.word	0x0800575d
 80056fc:	0800599b 	.word	0x0800599b
 8005700:	0800599b 	.word	0x0800599b
 8005704:	0800599b 	.word	0x0800599b
 8005708:	0800599b 	.word	0x0800599b
 800570c:	0800599b 	.word	0x0800599b
 8005710:	0800599b 	.word	0x0800599b
 8005714:	0800599b 	.word	0x0800599b
 8005718:	08005783 	.word	0x08005783
 800571c:	0800599b 	.word	0x0800599b
 8005720:	0800599b 	.word	0x0800599b
 8005724:	0800599b 	.word	0x0800599b
 8005728:	0800599b 	.word	0x0800599b
 800572c:	0800599b 	.word	0x0800599b
 8005730:	0800599b 	.word	0x0800599b
 8005734:	0800599b 	.word	0x0800599b
 8005738:	08005789 	.word	0x08005789
 800573c:	0800599b 	.word	0x0800599b
 8005740:	0800599b 	.word	0x0800599b
 8005744:	0800599b 	.word	0x0800599b
 8005748:	0800599b 	.word	0x0800599b
 800574c:	0800599b 	.word	0x0800599b
 8005750:	0800599b 	.word	0x0800599b
 8005754:	0800599b 	.word	0x0800599b
 8005758:	0800578f 	.word	0x0800578f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800575c:	4b94      	ldr	r3, [pc, #592]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d009      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005768:	4b91      	ldr	r3, [pc, #580]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	08db      	lsrs	r3, r3, #3
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	4a90      	ldr	r2, [pc, #576]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800577a:	e111      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800577c:	4b8d      	ldr	r3, [pc, #564]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800577e:	61bb      	str	r3, [r7, #24]
      break;
 8005780:	e10e      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005782:	4b8d      	ldr	r3, [pc, #564]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005784:	61bb      	str	r3, [r7, #24]
      break;
 8005786:	e10b      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005788:	4b8c      	ldr	r3, [pc, #560]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800578a:	61bb      	str	r3, [r7, #24]
      break;
 800578c:	e108      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800578e:	4b88      	ldr	r3, [pc, #544]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005798:	4b85      	ldr	r3, [pc, #532]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057a4:	4b82      	ldr	r3, [pc, #520]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ae:	4b80      	ldr	r3, [pc, #512]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b2:	08db      	lsrs	r3, r3, #3
 80057b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80e1 	beq.w	8005994 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	f000 8083 	beq.w	80058e0 <HAL_RCC_GetSysClockFreq+0x204>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	f200 80a1 	bhi.w	8005924 <HAL_RCC_GetSysClockFreq+0x248>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0x114>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d056      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x1c0>
 80057ee:	e099      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f0:	4b6f      	ldr	r3, [pc, #444]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02d      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057fc:	4b6c      	ldr	r3, [pc, #432]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	08db      	lsrs	r3, r3, #3
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	4a6b      	ldr	r2, [pc, #428]	@ (80059b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	ee07 3a90 	vmov	s15, r3
 8005814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005826:	4b62      	ldr	r3, [pc, #392]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	ed97 6a02 	vldr	s12, [r7, #8]
 800583a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005852:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005856:	e087      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b51      	ldr	r3, [pc, #324]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a02 	vldr	s12, [r7, #8]
 800587e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800589a:	e065      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b40      	ldr	r3, [pc, #256]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058de:	e043      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f2:	4b2f      	ldr	r3, [pc, #188]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005902:	ed97 6a02 	vldr	s12, [r7, #8]
 8005906:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005922:	e021      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005936:	4b1e      	ldr	r3, [pc, #120]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005946:	ed97 6a02 	vldr	s12, [r7, #8]
 800594a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800594e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005966:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005968:	4b11      	ldr	r3, [pc, #68]	@ (80059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	0a5b      	lsrs	r3, r3, #9
 800596e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005972:	3301      	adds	r3, #1
 8005974:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005980:	edd7 6a07 	vldr	s13, [r7, #28]
 8005984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800598c:	ee17 3a90 	vmov	r3, s15
 8005990:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005992:	e005      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	61bb      	str	r3, [r7, #24]
      break;
 8005998:	e002      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800599a:	4b07      	ldr	r3, [pc, #28]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800599c:	61bb      	str	r3, [r7, #24]
      break;
 800599e:	bf00      	nop
  }

  return sysclockfreq;
 80059a0:	69bb      	ldr	r3, [r7, #24]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3724      	adds	r7, #36	@ 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
 80059b4:	03d09000 	.word	0x03d09000
 80059b8:	003d0900 	.word	0x003d0900
 80059bc:	017d7840 	.word	0x017d7840
 80059c0:	46000000 	.word	0x46000000
 80059c4:	4c742400 	.word	0x4c742400
 80059c8:	4a742400 	.word	0x4a742400
 80059cc:	4bbebc20 	.word	0x4bbebc20

080059d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059d6:	f7ff fe81 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 80059da:	4602      	mov	r2, r0
 80059dc:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <HAL_RCC_GetHCLKFreq+0x50>)
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	490f      	ldr	r1, [pc, #60]	@ (8005a24 <HAL_RCC_GetHCLKFreq+0x54>)
 80059e8:	5ccb      	ldrb	r3, [r1, r3]
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <HAL_RCC_GetHCLKFreq+0x50>)
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	4a09      	ldr	r2, [pc, #36]	@ (8005a24 <HAL_RCC_GetHCLKFreq+0x54>)
 80059fe:	5cd3      	ldrb	r3, [r2, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	4a07      	ldr	r2, [pc, #28]	@ (8005a28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a0e:	4a07      	ldr	r2, [pc, #28]	@ (8005a2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a14:	4b04      	ldr	r3, [pc, #16]	@ (8005a28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	58024400 	.word	0x58024400
 8005a24:	0800c38c 	.word	0x0800c38c
 8005a28:	24000004 	.word	0x24000004
 8005a2c:	24000000 	.word	0x24000000

08005a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a34:	f7ff ffcc 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	4904      	ldr	r1, [pc, #16]	@ (8005a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	58024400 	.word	0x58024400
 8005a58:	0800c38c 	.word	0x0800c38c

08005a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a60:	f7ff ffb6 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4904      	ldr	r1, [pc, #16]	@ (8005a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	58024400 	.word	0x58024400
 8005a84:	0800c38c 	.word	0x0800c38c

08005a88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a8c:	b0c6      	sub	sp, #280	@ 0x118
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005aac:	2500      	movs	r5, #0
 8005aae:	ea54 0305 	orrs.w	r3, r4, r5
 8005ab2:	d049      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005abe:	d02f      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ac0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ac4:	d828      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aca:	d01a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005acc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ad0:	d822      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ada:	d007      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005adc:	e01c      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4bab      	ldr	r3, [pc, #684]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	4aaa      	ldr	r2, [pc, #680]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aea:	e01a      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af0:	3308      	adds	r3, #8
 8005af2:	2102      	movs	r1, #2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fc25 	bl	8007344 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b00:	e00f      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b06:	3328      	adds	r3, #40	@ 0x28
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 fccc 	bl	80074a8 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b2a:	4b98      	ldr	r3, [pc, #608]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b38:	4a94      	ldr	r2, [pc, #592]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b3e:	e003      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b54:	f04f 0900 	mov.w	r9, #0
 8005b58:	ea58 0309 	orrs.w	r3, r8, r9
 8005b5c:	d047      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d82a      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b85 	.word	0x08005b85
 8005b74:	08005b93 	.word	0x08005b93
 8005b78:	08005ba9 	.word	0x08005ba9
 8005b7c:	08005bc7 	.word	0x08005bc7
 8005b80:	08005bc7 	.word	0x08005bc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4b81      	ldr	r3, [pc, #516]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	4a80      	ldr	r2, [pc, #512]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b90:	e01a      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	3308      	adds	r3, #8
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fbd2 	bl	8007344 <RCCEx_PLL2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ba6:	e00f      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	3328      	adds	r3, #40	@ 0x28
 8005bae:	2100      	movs	r1, #0
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 fc79 	bl	80074a8 <RCCEx_PLL3_Config>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bbc:	e004      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bd0:	4b6e      	ldr	r3, [pc, #440]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd4:	f023 0107 	bic.w	r1, r3, #7
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bde:	4a6b      	ldr	r2, [pc, #428]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005bfa:	f04f 0b00 	mov.w	fp, #0
 8005bfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c02:	d05b      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c10:	d03b      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c16:	d834      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c1c:	d037      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c22:	d82e      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c28:	d033      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c2e:	d828      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c34:	d01a      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c3a:	d822      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c44:	d007      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c46:	e01c      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c48:	4b50      	ldr	r3, [pc, #320]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c54:	e01e      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 fb70 	bl	8007344 <RCCEx_PLL2_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c6a:	e013      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	3328      	adds	r3, #40	@ 0x28
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fc17 	bl	80074a8 <RCCEx_PLL3_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c80:	e008      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c88:	e004      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cac:	4a37      	ldr	r2, [pc, #220]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cb2:	e003      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d05d      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ce4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ce8:	d03b      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005cea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cee:	d834      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cf4:	d037      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005cf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cfa:	d82e      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d00:	d033      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d06:	d828      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d0c:	d01a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d12:	d822      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1c:	d007      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d1e:	e01c      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d20:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	4a19      	ldr	r2, [pc, #100]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d2c:	e01e      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d32:	3308      	adds	r3, #8
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 fb04 	bl	8007344 <RCCEx_PLL2_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d42:	e013      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d48:	3328      	adds	r3, #40	@ 0x28
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fbab 	bl	80074a8 <RCCEx_PLL3_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d58:	e008      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d60:	e004      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10d      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d74:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d84:	4a01      	ldr	r2, [pc, #4]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d86:	430b      	orrs	r3, r1
 8005d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d8a:	e005      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005da4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d03a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dbe:	2b30      	cmp	r3, #48	@ 0x30
 8005dc0:	d01f      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005dc2:	2b30      	cmp	r3, #48	@ 0x30
 8005dc4:	d819      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d815      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d019      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d111      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd6:	4baa      	ldr	r3, [pc, #680]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	4aa9      	ldr	r2, [pc, #676]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005de2:	e011      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	3308      	adds	r3, #8
 8005dea:	2102      	movs	r1, #2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 faa9 	bl	8007344 <RCCEx_PLL2_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005df8:	e006      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e10:	4b9b      	ldr	r3, [pc, #620]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1e:	4a98      	ldr	r2, [pc, #608]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e20:	430b      	orrs	r3, r1
 8005e22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d051      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e58:	d035      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e5e:	d82e      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e64:	d031      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e6a:	d828      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e70:	d01a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e76:	d822      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e80:	d007      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e82:	e01c      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e84:	4b7e      	ldr	r3, [pc, #504]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	4a7d      	ldr	r2, [pc, #500]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e90:	e01c      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e96:	3308      	adds	r3, #8
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fa52 	bl	8007344 <RCCEx_PLL2_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ea6:	e011      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	3328      	adds	r3, #40	@ 0x28
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 faf9 	bl	80074a8 <RCCEx_PLL3_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ec4:	e002      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005ec6:	bf00      	nop
 8005ec8:	e000      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee2:	4a67      	ldr	r2, [pc, #412]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ee8:	e003      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005efe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f02:	2300      	movs	r3, #0
 8005f04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d053      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f1c:	d033      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f22:	d82c      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f28:	d02f      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f2e:	d826      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f34:	d02b      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f3a:	d820      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f40:	d012      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f46:	d81a      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d022      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f50:	d115      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f56:	3308      	adds	r3, #8
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f9f2 	bl	8007344 <RCCEx_PLL2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f66:	e015      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	3328      	adds	r3, #40	@ 0x28
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 fa99 	bl	80074a8 <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f86:	bf00      	nop
 8005f88:	e004      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f9c:	4b38      	ldr	r3, [pc, #224]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005faa:	4a35      	ldr	r2, [pc, #212]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fb0:	e003      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fd0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d058      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe6:	d033      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fec:	d82c      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff2:	d02f      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff8:	d826      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ffa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ffe:	d02b      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006000:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006004:	d820      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800600a:	d012      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800600c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006010:	d81a      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d022      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800601a:	d115      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	3308      	adds	r3, #8
 8006022:	2101      	movs	r1, #1
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f98d 	bl	8007344 <RCCEx_PLL2_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006030:	e015      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006036:	3328      	adds	r3, #40	@ 0x28
 8006038:	2101      	movs	r1, #1
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fa34 	bl	80074a8 <RCCEx_PLL3_Config>
 8006040:	4603      	mov	r3, r0
 8006042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006046:	e00a      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800604e:	e006      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006050:	bf00      	nop
 8006052:	e004      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006054:	bf00      	nop
 8006056:	e002      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006058:	bf00      	nop
 800605a:	e000      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800605c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10e      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006066:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006076:	4a02      	ldr	r2, [pc, #8]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006078:	430b      	orrs	r3, r1
 800607a:	6593      	str	r3, [r2, #88]	@ 0x58
 800607c:	e006      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800607e:	bf00      	nop
 8006080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d037      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b6:	d00e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060bc:	d816      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c6:	d111      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c8:	4bc4      	ldr	r3, [pc, #784]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4ac3      	ldr	r2, [pc, #780]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060d4:	e00f      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060da:	3308      	adds	r3, #8
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f930 	bl	8007344 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060fe:	4bb7      	ldr	r3, [pc, #732]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006102:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800610c:	4ab3      	ldr	r2, [pc, #716]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610e:	430b      	orrs	r3, r1
 8006110:	6513      	str	r3, [r2, #80]	@ 0x50
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006128:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d039      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006142:	2b03      	cmp	r3, #3
 8006144:	d81c      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006146:	a201      	add	r2, pc, #4	@ (adr r2, 800614c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	08006189 	.word	0x08006189
 8006150:	0800615d 	.word	0x0800615d
 8006154:	0800616b 	.word	0x0800616b
 8006158:	08006189 	.word	0x08006189
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615c:	4b9f      	ldr	r3, [pc, #636]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	4a9e      	ldr	r2, [pc, #632]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006168:	e00f      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	3308      	adds	r3, #8
 8006170:	2102      	movs	r1, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f001 f8e6 	bl	8007344 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800617e:	e004      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006186:	e000      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006192:	4b92      	ldr	r3, [pc, #584]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006196:	f023 0103 	bic.w	r1, r3, #3
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a0:	4a8e      	ldr	r2, [pc, #568]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a2:	430b      	orrs	r3, r1
 80061a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061a6:	e003      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f000 8099 	beq.w	8006304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061d2:	4b83      	ldr	r3, [pc, #524]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a82      	ldr	r2, [pc, #520]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061de:	f7fb fabd 	bl	800175c <HAL_GetTick>
 80061e2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061e6:	e00b      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e8:	f7fb fab8 	bl	800175c <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b64      	cmp	r3, #100	@ 0x64
 80061f6:	d903      	bls.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061fe:	e005      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006200:	4b77      	ldr	r3, [pc, #476]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0ed      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800620c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006210:	2b00      	cmp	r3, #0
 8006212:	d173      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006214:	4b71      	ldr	r3, [pc, #452]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006216:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006220:	4053      	eors	r3, r2
 8006222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d015      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622a:	4b6c      	ldr	r3, [pc, #432]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006232:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006236:	4b69      	ldr	r3, [pc, #420]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623a:	4a68      	ldr	r2, [pc, #416]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006240:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006242:	4b66      	ldr	r3, [pc, #408]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006246:	4a65      	ldr	r2, [pc, #404]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800624c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800624e:	4a63      	ldr	r2, [pc, #396]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006254:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800625e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006262:	d118      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb fa7a 	bl	800175c <HAL_GetTick>
 8006268:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626c:	e00d      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7fb fa75 	bl	800175c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800627e:	429a      	cmp	r2, r3
 8006280:	d903      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006288:	e005      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628a:	4b54      	ldr	r3, [pc, #336]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0eb      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629a:	2b00      	cmp	r3, #0
 800629c:	d129      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ae:	d10e      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062b0:	4b4a      	ldr	r3, [pc, #296]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062c0:	091a      	lsrs	r2, r3, #4
 80062c2:	4b48      	ldr	r3, [pc, #288]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	4a45      	ldr	r2, [pc, #276]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6113      	str	r3, [r2, #16]
 80062cc:	e005      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062ce:	4b43      	ldr	r3, [pc, #268]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	4a42      	ldr	r2, [pc, #264]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062d8:	6113      	str	r3, [r2, #16]
 80062da:	4b40      	ldr	r3, [pc, #256]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ea:	4a3c      	ldr	r2, [pc, #240]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f0:	e008      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f002 0301 	and.w	r3, r2, #1
 8006310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800631a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	f000 808f 	beq.w	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800632c:	2b28      	cmp	r3, #40	@ 0x28
 800632e:	d871      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006330:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800641d 	.word	0x0800641d
 800633c:	08006415 	.word	0x08006415
 8006340:	08006415 	.word	0x08006415
 8006344:	08006415 	.word	0x08006415
 8006348:	08006415 	.word	0x08006415
 800634c:	08006415 	.word	0x08006415
 8006350:	08006415 	.word	0x08006415
 8006354:	08006415 	.word	0x08006415
 8006358:	080063e9 	.word	0x080063e9
 800635c:	08006415 	.word	0x08006415
 8006360:	08006415 	.word	0x08006415
 8006364:	08006415 	.word	0x08006415
 8006368:	08006415 	.word	0x08006415
 800636c:	08006415 	.word	0x08006415
 8006370:	08006415 	.word	0x08006415
 8006374:	08006415 	.word	0x08006415
 8006378:	080063ff 	.word	0x080063ff
 800637c:	08006415 	.word	0x08006415
 8006380:	08006415 	.word	0x08006415
 8006384:	08006415 	.word	0x08006415
 8006388:	08006415 	.word	0x08006415
 800638c:	08006415 	.word	0x08006415
 8006390:	08006415 	.word	0x08006415
 8006394:	08006415 	.word	0x08006415
 8006398:	0800641d 	.word	0x0800641d
 800639c:	08006415 	.word	0x08006415
 80063a0:	08006415 	.word	0x08006415
 80063a4:	08006415 	.word	0x08006415
 80063a8:	08006415 	.word	0x08006415
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006415 	.word	0x08006415
 80063b4:	08006415 	.word	0x08006415
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006415 	.word	0x08006415
 80063c8:	08006415 	.word	0x08006415
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006415 	.word	0x08006415
 80063d8:	0800641d 	.word	0x0800641d
 80063dc:	58024400 	.word	0x58024400
 80063e0:	58024800 	.word	0x58024800
 80063e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	3308      	adds	r3, #8
 80063ee:	2101      	movs	r1, #1
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 ffa7 	bl	8007344 <RCCEx_PLL2_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063fc:	e00f      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006402:	3328      	adds	r3, #40	@ 0x28
 8006404:	2101      	movs	r1, #1
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f84e 	bl	80074a8 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006412:	e004      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800641a:	e000      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800641c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006426:	4bbf      	ldr	r3, [pc, #764]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006432:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006434:	4abb      	ldr	r2, [pc, #748]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006436:	430b      	orrs	r3, r1
 8006438:	6553      	str	r3, [r2, #84]	@ 0x54
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f002 0302 	and.w	r3, r2, #2
 8006450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800645a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d041      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646a:	2b05      	cmp	r3, #5
 800646c:	d824      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064c1 	.word	0x080064c1
 8006478:	0800648d 	.word	0x0800648d
 800647c:	080064a3 	.word	0x080064a3
 8006480:	080064c1 	.word	0x080064c1
 8006484:	080064c1 	.word	0x080064c1
 8006488:	080064c1 	.word	0x080064c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	3308      	adds	r3, #8
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f000 ff55 	bl	8007344 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064a0:	e00f      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a6:	3328      	adds	r3, #40	@ 0x28
 80064a8:	2101      	movs	r1, #1
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fffc 	bl	80074a8 <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064b6:	e004      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ca:	4b96      	ldr	r3, [pc, #600]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ce:	f023 0107 	bic.w	r1, r3, #7
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d8:	4a92      	ldr	r2, [pc, #584]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f002 0304 	and.w	r3, r2, #4
 80064f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d044      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006510:	2b05      	cmp	r3, #5
 8006512:	d825      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006514:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006569 	.word	0x08006569
 8006520:	08006535 	.word	0x08006535
 8006524:	0800654b 	.word	0x0800654b
 8006528:	08006569 	.word	0x08006569
 800652c:	08006569 	.word	0x08006569
 8006530:	08006569 	.word	0x08006569
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	3308      	adds	r3, #8
 800653a:	2101      	movs	r1, #1
 800653c:	4618      	mov	r0, r3
 800653e:	f000 ff01 	bl	8007344 <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006548:	e00f      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	3328      	adds	r3, #40	@ 0x28
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f000 ffa8 	bl	80074a8 <RCCEx_PLL3_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800655e:	e004      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006566:	e000      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006572:	4b6c      	ldr	r3, [pc, #432]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	f023 0107 	bic.w	r1, r3, #7
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006582:	4a68      	ldr	r2, [pc, #416]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006584:	430b      	orrs	r3, r1
 8006586:	6593      	str	r3, [r2, #88]	@ 0x58
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f002 0320 	and.w	r3, r2, #32
 800659e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d055      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065be:	d033      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065c4:	d82c      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ca:	d02f      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d0:	d826      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065d6:	d02b      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065dc:	d820      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e2:	d012      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e8:	d81a      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d022      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f2:	d115      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	3308      	adds	r3, #8
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fea1 	bl	8007344 <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006608:	e015      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800660a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660e:	3328      	adds	r3, #40	@ 0x28
 8006610:	2102      	movs	r1, #2
 8006612:	4618      	mov	r0, r3
 8006614:	f000 ff48 	bl	80074a8 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800661e:	e00a      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006626:	e006      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006628:	bf00      	nop
 800662a:	e004      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800662c:	bf00      	nop
 800662e:	e002      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800663e:	4b39      	ldr	r3, [pc, #228]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006642:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800664e:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006650:	430b      	orrs	r3, r1
 8006652:	6553      	str	r3, [r2, #84]	@ 0x54
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800666a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800666e:	2300      	movs	r3, #0
 8006670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006674:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006678:	460b      	mov	r3, r1
 800667a:	4313      	orrs	r3, r2
 800667c:	d058      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006686:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800668a:	d033      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800668c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006690:	d82c      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006696:	d02f      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d826      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800669e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066a2:	d02b      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066a8:	d820      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ae:	d012      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b4:	d81a      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d022      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066be:	d115      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c4:	3308      	adds	r3, #8
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fe3b 	bl	8007344 <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066d4:	e015      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	3328      	adds	r3, #40	@ 0x28
 80066dc:	2102      	movs	r1, #2
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fee2 	bl	80074a8 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ea:	e00a      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066f2:	e006      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066f4:	bf00      	nop
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066f8:	bf00      	nop
 80066fa:	e002      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066fc:	bf00      	nop
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10e      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800670a:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800670c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800671a:	4a02      	ldr	r2, [pc, #8]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800671c:	430b      	orrs	r3, r1
 800671e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006720:	e006      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006722:	bf00      	nop
 8006724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800672c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800673c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006746:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d055      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006758:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800675c:	d033      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800675e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006762:	d82c      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006768:	d02f      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800676e:	d826      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006770:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006774:	d02b      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006776:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800677a:	d820      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800677c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006780:	d012      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006786:	d81a      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d022      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d115      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	3308      	adds	r3, #8
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fdd2 	bl	8007344 <RCCEx_PLL2_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067a6:	e015      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	3328      	adds	r3, #40	@ 0x28
 80067ae:	2102      	movs	r1, #2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fe79 	bl	80074a8 <RCCEx_PLL3_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067bc:	e00a      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067c4:	e006      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067c6:	bf00      	nop
 80067c8:	e004      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ca:	bf00      	nop
 80067cc:	e002      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067ce:	bf00      	nop
 80067d0:	e000      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067dc:	4ba0      	ldr	r3, [pc, #640]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ec:	4a9c      	ldr	r2, [pc, #624]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067ee:	430b      	orrs	r3, r1
 80067f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f2:	e003      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f002 0308 	and.w	r3, r2, #8
 8006808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800680c:	2300      	movs	r3, #0
 800680e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006812:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d01e      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006828:	d10c      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	3328      	adds	r3, #40	@ 0x28
 8006830:	2102      	movs	r1, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fe38 	bl	80074a8 <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006844:	4b86      	ldr	r3, [pc, #536]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006848:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006854:	4a82      	ldr	r2, [pc, #520]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006856:	430b      	orrs	r3, r1
 8006858:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f002 0310 	and.w	r3, r2, #16
 8006866:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006870:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d01e      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006886:	d10c      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688c:	3328      	adds	r3, #40	@ 0x28
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fe09 	bl	80074a8 <RCCEx_PLL3_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068a2:	4b6f      	ldr	r3, [pc, #444]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068b2:	4a6b      	ldr	r2, [pc, #428]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c6:	2300      	movs	r3, #0
 80068c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068ce:	460b      	mov	r3, r1
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d03e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e0:	d022      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80068e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e6:	d81b      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d00b      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068f2:	e015      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f8:	3308      	adds	r3, #8
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd21 	bl	8007344 <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006908:	e00f      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690e:	3328      	adds	r3, #40	@ 0x28
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fdc8 	bl	80074a8 <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800691e:	e004      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10b      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006932:	4b4b      	ldr	r3, [pc, #300]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006936:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006942:	4a47      	ldr	r2, [pc, #284]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006944:	430b      	orrs	r3, r1
 8006946:	6593      	str	r3, [r2, #88]	@ 0x58
 8006948:	e003      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800694e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800695e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006960:	2300      	movs	r3, #0
 8006962:	677b      	str	r3, [r7, #116]	@ 0x74
 8006964:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d03b      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006976:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800697a:	d01f      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800697c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006980:	d818      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006986:	d003      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800698c:	d007      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800698e:	e011      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006990:	4b33      	ldr	r3, [pc, #204]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	4a32      	ldr	r2, [pc, #200]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800699a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800699c:	e00f      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a2:	3328      	adds	r3, #40	@ 0x28
 80069a4:	2101      	movs	r1, #1
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fd7e 	bl	80074a8 <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069b2:	e004      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ba:	e000      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c6:	4b26      	ldr	r3, [pc, #152]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d6:	4a22      	ldr	r2, [pc, #136]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	6553      	str	r3, [r2, #84]	@ 0x54
 80069dc:	e003      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069f4:	2300      	movs	r3, #0
 80069f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069fc:	460b      	mov	r3, r1
 80069fe:	4313      	orrs	r3, r2
 8006a00:	d034      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a10:	d007      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a12:	e011      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a14:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a11      	ldr	r2, [pc, #68]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a20:	e00e      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	3308      	adds	r3, #8
 8006a28:	2102      	movs	r1, #2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fc8a 	bl	8007344 <RCCEx_PLL2_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a36:	e003      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10d      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a48:	4b05      	ldr	r3, [pc, #20]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a56:	4a02      	ldr	r2, [pc, #8]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a5c:	e006      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a78:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a82:	460b      	mov	r3, r1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	d00c      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	3328      	adds	r3, #40	@ 0x28
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fd09 	bl	80074a8 <RCCEx_PLL3_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ab4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d036      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ac8:	d018      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ace:	d811      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad4:	d014      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ada:	d80b      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d011      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae6:	4bb7      	ldr	r3, [pc, #732]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aea:	4ab6      	ldr	r2, [pc, #728]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006af2:	e008      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006afa:	e004      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b0e:	4bad      	ldr	r3, [pc, #692]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b1c:	4aa9      	ldr	r2, [pc, #676]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b22:	e003      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b42:	460b      	mov	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d009      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b48:	4b9e      	ldr	r3, [pc, #632]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b56:	4a9b      	ldr	r2, [pc, #620]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b78:	4b92      	ldr	r3, [pc, #584]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b86:	4a8f      	ldr	r2, [pc, #572]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ba8:	4b86      	ldr	r3, [pc, #536]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	4a85      	ldr	r2, [pc, #532]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bb2:	6113      	str	r3, [r2, #16]
 8006bb4:	4b83      	ldr	r3, [pc, #524]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bb6:	6919      	ldr	r1, [r3, #16]
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bc0:	4a80      	ldr	r2, [pc, #512]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4313      	orrs	r3, r2
 8006be0:	d009      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006be2:	4b78      	ldr	r3, [pc, #480]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf0:	4a74      	ldr	r2, [pc, #464]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	d00a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c12:	4b6c      	ldr	r3, [pc, #432]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	4a68      	ldr	r2, [pc, #416]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	2100      	movs	r1, #0
 8006c32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4313      	orrs	r3, r2
 8006c42:	d011      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	3308      	adds	r3, #8
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fb79 	bl	8007344 <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	2100      	movs	r1, #0
 8006c72:	6239      	str	r1, [r7, #32]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d011      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c88:	3308      	adds	r3, #8
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fb59 	bl	8007344 <RCCEx_PLL2_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	61b9      	str	r1, [r7, #24]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d011      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fb39 	bl	8007344 <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6139      	str	r1, [r7, #16]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d011      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	3328      	adds	r3, #40	@ 0x28
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fbcb 	bl	80074a8 <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	2100      	movs	r1, #0
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d011      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	3328      	adds	r3, #40	@ 0x28
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fbab 	bl	80074a8 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	2100      	movs	r1, #0
 8006d72:	6039      	str	r1, [r7, #0]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d011      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	3328      	adds	r3, #40	@ 0x28
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fb8b 	bl	80074a8 <RCCEx_PLL3_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006da8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dc2:	bf00      	nop
 8006dc4:	58024400 	.word	0x58024400

08006dc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006dcc:	f7fe fe00 	bl	80059d0 <HAL_RCC_GetHCLKFreq>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	091b      	lsrs	r3, r3, #4
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	4904      	ldr	r1, [pc, #16]	@ (8006df0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dde:	5ccb      	ldrb	r3, [r1, r3]
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	58024400 	.word	0x58024400
 8006df0:	0800c38c 	.word	0x0800c38c

08006df4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	@ 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dfc:	4ba1      	ldr	r3, [pc, #644]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e06:	4b9f      	ldr	r3, [pc, #636]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	0b1b      	lsrs	r3, r3, #12
 8006e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e12:	4b9c      	ldr	r3, [pc, #624]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e1e:	4b99      	ldr	r3, [pc, #612]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e22:	08db      	lsrs	r3, r3, #3
 8006e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8111 	beq.w	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	f000 8083 	beq.w	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	f200 80a1 	bhi.w	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d056      	beq.n	8006f0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e5e:	e099      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e60:	4b88      	ldr	r3, [pc, #544]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d02d      	beq.n	8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e6c:	4b85      	ldr	r3, [pc, #532]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	08db      	lsrs	r3, r3, #3
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	4a84      	ldr	r2, [pc, #528]	@ (8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	ee07 3a90 	vmov	s15, r3
 8006e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e96:	4b7b      	ldr	r3, [pc, #492]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ec6:	e087      	b.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eda:	4b6a      	ldr	r3, [pc, #424]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f0a:	e065      	b.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	4b59      	ldr	r3, [pc, #356]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f4e:	e043      	b.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b48      	ldr	r3, [pc, #288]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f92:	e021      	b.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa6:	4b37      	ldr	r3, [pc, #220]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800708c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fdc:	0a5b      	lsrs	r3, r3, #9
 8006fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ffe:	ee17 2a90 	vmov	r2, s15
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007006:	4b1f      	ldr	r3, [pc, #124]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800701c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007020:	edd7 6a07 	vldr	s13, [r7, #28]
 8007024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800702c:	ee17 2a90 	vmov	r2, s15
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007034:	4b13      	ldr	r3, [pc, #76]	@ (8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	0e1b      	lsrs	r3, r3, #24
 800703a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800704a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800704e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705a:	ee17 2a90 	vmov	r2, s15
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007062:	e008      	b.n	8007076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	609a      	str	r2, [r3, #8]
}
 8007076:	bf00      	nop
 8007078:	3724      	adds	r7, #36	@ 0x24
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400
 8007088:	03d09000 	.word	0x03d09000
 800708c:	46000000 	.word	0x46000000
 8007090:	4c742400 	.word	0x4c742400
 8007094:	4a742400 	.word	0x4a742400
 8007098:	4bbebc20 	.word	0x4bbebc20

0800709c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800709c:	b480      	push	{r7}
 800709e:	b089      	sub	sp, #36	@ 0x24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a4:	4ba1      	ldr	r3, [pc, #644]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070ae:	4b9f      	ldr	r3, [pc, #636]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b2:	0d1b      	lsrs	r3, r3, #20
 80070b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070ba:	4b9c      	ldr	r3, [pc, #624]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070c6:	4b99      	ldr	r3, [pc, #612]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ca:	08db      	lsrs	r3, r3, #3
 80070cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8111 	beq.w	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f000 8083 	beq.w	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f200 80a1 	bhi.w	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d056      	beq.n	80071b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007106:	e099      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007108:	4b88      	ldr	r3, [pc, #544]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02d      	beq.n	8007170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007114:	4b85      	ldr	r3, [pc, #532]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	4a84      	ldr	r2, [pc, #528]	@ (8007330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b7b      	ldr	r3, [pc, #492]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007152:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800716e:	e087      	b.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b6a      	ldr	r3, [pc, #424]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a03 	vldr	s12, [r7, #12]
 8007196:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b2:	e065      	b.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800733c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b59      	ldr	r3, [pc, #356]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f6:	e043      	b.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b48      	ldr	r3, [pc, #288]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723a:	e021      	b.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800733c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b37      	ldr	r3, [pc, #220]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007262:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007280:	4b2a      	ldr	r3, [pc, #168]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007284:	0a5b      	lsrs	r3, r3, #9
 8007286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800729a:	edd7 6a07 	vldr	s13, [r7, #28]
 800729e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a6:	ee17 2a90 	vmov	r2, s15
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072ae:	4b1f      	ldr	r3, [pc, #124]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d4:	ee17 2a90 	vmov	r2, s15
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072dc:	4b13      	ldr	r3, [pc, #76]	@ (800732c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007302:	ee17 2a90 	vmov	r2, s15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800730a:	e008      	b.n	800731e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	@ 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	58024400 	.word	0x58024400
 8007330:	03d09000 	.word	0x03d09000
 8007334:	46000000 	.word	0x46000000
 8007338:	4c742400 	.word	0x4c742400
 800733c:	4a742400 	.word	0x4a742400
 8007340:	4bbebc20 	.word	0x4bbebc20

08007344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007352:	4b53      	ldr	r3, [pc, #332]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d101      	bne.n	8007362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e099      	b.n	8007496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007362:	4b4f      	ldr	r3, [pc, #316]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4e      	ldr	r2, [pc, #312]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007368:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800736c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736e:	f7fa f9f5 	bl	800175c <HAL_GetTick>
 8007372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007374:	e008      	b.n	8007388 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007376:	f7fa f9f1 	bl	800175c <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e086      	b.n	8007496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007388:	4b45      	ldr	r3, [pc, #276]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007394:	4b42      	ldr	r3, [pc, #264]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	493f      	ldr	r1, [pc, #252]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	025b      	lsls	r3, r3, #9
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	061b      	lsls	r3, r3, #24
 80073d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073d8:	4931      	ldr	r1, [pc, #196]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073de:	4b30      	ldr	r3, [pc, #192]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	492d      	ldr	r1, [pc, #180]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073f0:	4b2b      	ldr	r3, [pc, #172]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	f023 0220 	bic.w	r2, r3, #32
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	4928      	ldr	r1, [pc, #160]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007402:	4b27      	ldr	r3, [pc, #156]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	4a26      	ldr	r2, [pc, #152]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800740e:	4b24      	ldr	r3, [pc, #144]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007410:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007412:	4b24      	ldr	r3, [pc, #144]	@ (80074a4 <RCCEx_PLL2_Config+0x160>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	69d2      	ldr	r2, [r2, #28]
 800741a:	00d2      	lsls	r2, r2, #3
 800741c:	4920      	ldr	r1, [pc, #128]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007422:	4b1f      	ldr	r3, [pc, #124]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007428:	f043 0310 	orr.w	r3, r3, #16
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007434:	4b1a      	ldr	r3, [pc, #104]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800743a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800743e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007440:	e00f      	b.n	8007462 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d106      	bne.n	8007456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007448:	4b15      	ldr	r3, [pc, #84]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800744a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744c:	4a14      	ldr	r2, [pc, #80]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800744e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007452:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007454:	e005      	b.n	8007462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007456:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a11      	ldr	r2, [pc, #68]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800745c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007460:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007462:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a0e      	ldr	r2, [pc, #56]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 8007468:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800746c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746e:	f7fa f975 	bl	800175c <HAL_GetTick>
 8007472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007474:	e008      	b.n	8007488 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007476:	f7fa f971 	bl	800175c <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e006      	b.n	8007496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007488:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <RCCEx_PLL2_Config+0x15c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
 80074a4:	ffff0007 	.word	0xffff0007

080074a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074b6:	4b53      	ldr	r3, [pc, #332]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d101      	bne.n	80074c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e099      	b.n	80075fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d2:	f7fa f943 	bl	800175c <HAL_GetTick>
 80074d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d8:	e008      	b.n	80074ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074da:	f7fa f93f 	bl	800175c <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e086      	b.n	80075fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074ec:	4b45      	ldr	r3, [pc, #276]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f0      	bne.n	80074da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074f8:	4b42      	ldr	r3, [pc, #264]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	051b      	lsls	r3, r3, #20
 8007506:	493f      	ldr	r1, [pc, #252]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007508:	4313      	orrs	r3, r2
 800750a:	628b      	str	r3, [r1, #40]	@ 0x28
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	3b01      	subs	r3, #1
 8007512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	3b01      	subs	r3, #1
 800751c:	025b      	lsls	r3, r3, #9
 800751e:	b29b      	uxth	r3, r3
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	3b01      	subs	r3, #1
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	3b01      	subs	r3, #1
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800753c:	4931      	ldr	r1, [pc, #196]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007542:	4b30      	ldr	r3, [pc, #192]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	492d      	ldr	r1, [pc, #180]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007550:	4313      	orrs	r3, r2
 8007552:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007554:	4b2b      	ldr	r3, [pc, #172]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	4928      	ldr	r1, [pc, #160]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007566:	4b27      	ldr	r3, [pc, #156]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	4a26      	ldr	r2, [pc, #152]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 800756c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007572:	4b24      	ldr	r3, [pc, #144]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007576:	4b24      	ldr	r3, [pc, #144]	@ (8007608 <RCCEx_PLL3_Config+0x160>)
 8007578:	4013      	ands	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	69d2      	ldr	r2, [r2, #28]
 800757e:	00d2      	lsls	r2, r2, #3
 8007580:	4920      	ldr	r1, [pc, #128]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007582:	4313      	orrs	r3, r2
 8007584:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007586:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 800758c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d106      	bne.n	80075a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007598:	4b1a      	ldr	r3, [pc, #104]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4a19      	ldr	r2, [pc, #100]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 800759e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a4:	e00f      	b.n	80075c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d106      	bne.n	80075ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075ac:	4b15      	ldr	r3, [pc, #84]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4a14      	ldr	r2, [pc, #80]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075b8:	e005      	b.n	80075c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a11      	ldr	r2, [pc, #68]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d2:	f7fa f8c3 	bl	800175c <HAL_GetTick>
 80075d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075d8:	e008      	b.n	80075ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075da:	f7fa f8bf 	bl	800175c <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e006      	b.n	80075fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	58024400 	.word	0x58024400
 8007608:	ffff0007 	.word	0xffff0007

0800760c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e042      	b.n	80076a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7f9 fc3b 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	@ 0x24
 800763a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fbee 	bl	8008e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fd7f 	bl	8008160 <UART_SetConfig>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e01b      	b.n	80076a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800767a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800768a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fc6d 	bl	8008f7c <UART_CheckIdleState>
 80076a2:	4603      	mov	r3, r0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d17b      	bne.n	80077be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_UART_Transmit+0x26>
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e074      	b.n	80077c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2221      	movs	r2, #33	@ 0x21
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076e6:	f7fa f839 	bl	800175c <HAL_GetTick>
 80076ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007704:	d108      	bne.n	8007718 <HAL_UART_Transmit+0x6c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	e003      	b.n	8007720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007720:	e030      	b.n	8007784 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2200      	movs	r2, #0
 800772a:	2180      	movs	r1, #128	@ 0x80
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f001 fccf 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e03d      	b.n	80077c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007758:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3302      	adds	r3, #2
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	e007      	b.n	8007772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3301      	adds	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1c8      	bne.n	8007722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	2140      	movs	r1, #64	@ 0x40
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f001 fc98 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e006      	b.n	80077c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	e000      	b.n	80077c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077be:	2302      	movs	r3, #2
  }
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	@ 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d167      	bne.n	80078b0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Transmit_DMA+0x24>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e060      	b.n	80078b2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2221      	movs	r2, #33	@ 0x21
 8007812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d028      	beq.n	8007870 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007822:	4a26      	ldr	r2, [pc, #152]	@ (80078bc <HAL_UART_Transmit_DMA+0xf4>)
 8007824:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800782a:	4a25      	ldr	r2, [pc, #148]	@ (80078c0 <HAL_UART_Transmit_DMA+0xf8>)
 800782c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007832:	4a24      	ldr	r2, [pc, #144]	@ (80078c4 <HAL_UART_Transmit_DMA+0xfc>)
 8007834:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800783a:	2200      	movs	r2, #0
 800783c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007846:	4619      	mov	r1, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3328      	adds	r3, #40	@ 0x28
 800784e:	461a      	mov	r2, r3
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	f7fa fc93 	bl	800217c <HAL_DMA_Start_IT>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2210      	movs	r2, #16
 8007860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e020      	b.n	80078b2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2240      	movs	r2, #64	@ 0x40
 8007876:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3308      	adds	r3, #8
 800787e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	613b      	str	r3, [r7, #16]
   return(result);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800788e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007898:	623a      	str	r2, [r7, #32]
 800789a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	69f9      	ldr	r1, [r7, #28]
 800789e:	6a3a      	ldr	r2, [r7, #32]
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e5      	bne.n	8007878 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e000      	b.n	80078b2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3728      	adds	r7, #40	@ 0x28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	08009449 	.word	0x08009449
 80078c0:	080094df 	.word	0x080094df
 80078c4:	08009661 	.word	0x08009661

080078c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	@ 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d137      	bne.n	8007950 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_UART_Receive_DMA+0x24>
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e030      	b.n	8007952 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a18      	ldr	r2, [pc, #96]	@ (800795c <HAL_UART_Receive_DMA+0x94>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d01f      	beq.n	8007940 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d018      	beq.n	8007940 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	613b      	str	r3, [r7, #16]
   return(result);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	623b      	str	r3, [r7, #32]
 800792e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	69f9      	ldr	r1, [r7, #28]
 8007932:	6a3a      	ldr	r2, [r7, #32]
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	61bb      	str	r3, [r7, #24]
   return(result);
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e6      	bne.n	800790e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	461a      	mov	r2, r3
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f001 fc30 	bl	80091ac <UART_Start_Receive_DMA>
 800794c:	4603      	mov	r3, r0
 800794e:	e000      	b.n	8007952 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007950:	2302      	movs	r3, #2
  }
}
 8007952:	4618      	mov	r0, r3
 8007954:	3728      	adds	r7, #40	@ 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	58000c00 	.word	0x58000c00

08007960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b0ba      	sub	sp, #232	@ 0xe8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800798a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800798e:	4013      	ands	r3, r2
 8007990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007998:	2b00      	cmp	r3, #0
 800799a:	d11b      	bne.n	80079d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800799c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d015      	beq.n	80079d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d009      	beq.n	80079d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8393 	beq.w	80080f0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
      }
      return;
 80079d2:	e38d      	b.n	80080f0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8123 	beq.w	8007c24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007c18 <HAL_UART_IRQHandler+0x2b8>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80079ee:	4b8b      	ldr	r3, [pc, #556]	@ (8007c1c <HAL_UART_IRQHandler+0x2bc>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 8116 	beq.w	8007c24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d011      	beq.n	8007a28 <HAL_UART_IRQHandler+0xc8>
 8007a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2201      	movs	r2, #1
 8007a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1e:	f043 0201 	orr.w	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d011      	beq.n	8007a58 <HAL_UART_IRQHandler+0xf8>
 8007a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2202      	movs	r2, #2
 8007a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a4e:	f043 0204 	orr.w	r2, r3, #4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d011      	beq.n	8007a88 <HAL_UART_IRQHandler+0x128>
 8007a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2204      	movs	r2, #4
 8007a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7e:	f043 0202 	orr.w	r2, r3, #2
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d017      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a98:	f003 0320 	and.w	r3, r3, #32
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007aa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8007c18 <HAL_UART_IRQHandler+0x2b8>)
 8007aa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f043 0208 	orr.w	r2, r3, #8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d012      	beq.n	8007af6 <HAL_UART_IRQHandler+0x196>
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00c      	beq.n	8007af6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aec:	f043 0220 	orr.w	r2, r3, #32
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 82f9 	beq.w	80080f4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d013      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4a:	2b40      	cmp	r3, #64	@ 0x40
 8007b4c:	d005      	beq.n	8007b5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d054      	beq.n	8007c04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fc0e 	bl	800937c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6a:	2b40      	cmp	r3, #64	@ 0x40
 8007b6c:	d146      	bne.n	8007bfc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1d9      	bne.n	8007b6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d017      	beq.n	8007bf4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bca:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <HAL_UART_IRQHandler+0x2c0>)
 8007bcc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fb f859 	bl	8002c8c <HAL_DMA_Abort_IT>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d019      	beq.n	8007c14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007bee:	4610      	mov	r0, r2
 8007bf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	e00f      	b.n	8007c14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa9d 	bl	8008134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfa:	e00b      	b.n	8007c14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fa99 	bl	8008134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c02:	e007      	b.n	8007c14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa95 	bl	8008134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007c12:	e26f      	b.n	80080f4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	bf00      	nop
    return;
 8007c16:	e26d      	b.n	80080f4 <HAL_UART_IRQHandler+0x794>
 8007c18:	10000001 	.word	0x10000001
 8007c1c:	04000120 	.word	0x04000120
 8007c20:	080096e1 	.word	0x080096e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 8203 	bne.w	8008034 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 81fc 	beq.w	8008034 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 81f5 	beq.w	8008034 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2210      	movs	r2, #16
 8007c50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c5c:	2b40      	cmp	r3, #64	@ 0x40
 8007c5e:	f040 816d 	bne.w	8007f3c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4aa4      	ldr	r2, [pc, #656]	@ (8007efc <HAL_UART_IRQHandler+0x59c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d068      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4aa1      	ldr	r2, [pc, #644]	@ (8007f00 <HAL_UART_IRQHandler+0x5a0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d061      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a9f      	ldr	r2, [pc, #636]	@ (8007f04 <HAL_UART_IRQHandler+0x5a4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d05a      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a9c      	ldr	r2, [pc, #624]	@ (8007f08 <HAL_UART_IRQHandler+0x5a8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d053      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a9a      	ldr	r2, [pc, #616]	@ (8007f0c <HAL_UART_IRQHandler+0x5ac>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d04c      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a97      	ldr	r2, [pc, #604]	@ (8007f10 <HAL_UART_IRQHandler+0x5b0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d045      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a95      	ldr	r2, [pc, #596]	@ (8007f14 <HAL_UART_IRQHandler+0x5b4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d03e      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a92      	ldr	r2, [pc, #584]	@ (8007f18 <HAL_UART_IRQHandler+0x5b8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d037      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a90      	ldr	r2, [pc, #576]	@ (8007f1c <HAL_UART_IRQHandler+0x5bc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d030      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a8d      	ldr	r2, [pc, #564]	@ (8007f20 <HAL_UART_IRQHandler+0x5c0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d029      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a8b      	ldr	r2, [pc, #556]	@ (8007f24 <HAL_UART_IRQHandler+0x5c4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d022      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a88      	ldr	r2, [pc, #544]	@ (8007f28 <HAL_UART_IRQHandler+0x5c8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01b      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a86      	ldr	r2, [pc, #536]	@ (8007f2c <HAL_UART_IRQHandler+0x5cc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d014      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a83      	ldr	r2, [pc, #524]	@ (8007f30 <HAL_UART_IRQHandler+0x5d0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00d      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a81      	ldr	r2, [pc, #516]	@ (8007f34 <HAL_UART_IRQHandler+0x5d4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d006      	beq.n	8007d42 <HAL_UART_IRQHandler+0x3e2>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a7e      	ldr	r2, [pc, #504]	@ (8007f38 <HAL_UART_IRQHandler+0x5d8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d106      	bne.n	8007d50 <HAL_UART_IRQHandler+0x3f0>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	e005      	b.n	8007d5c <HAL_UART_IRQHandler+0x3fc>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80ad 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d74:	429a      	cmp	r2, r3
 8007d76:	f080 80a5 	bcs.w	8007ec4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d90:	f000 8087 	beq.w	8007ea2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dc2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007dca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1da      	bne.n	8007d94 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e1      	bne.n	8007dde <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e3      	bne.n	8007e1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e70:	f023 0310 	bic.w	r3, r3, #16
 8007e74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e4      	bne.n	8007e60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fa fbd7 	bl	8002650 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f943 	bl	8008148 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ec2:	e119      	b.n	80080f8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	f040 8112 	bne.w	80080f8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee0:	f040 810a 	bne.w	80080f8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f928 	bl	8008148 <HAL_UARTEx_RxEventCallback>
      return;
 8007ef8:	e0fe      	b.n	80080f8 <HAL_UART_IRQHandler+0x798>
 8007efa:	bf00      	nop
 8007efc:	40020010 	.word	0x40020010
 8007f00:	40020028 	.word	0x40020028
 8007f04:	40020040 	.word	0x40020040
 8007f08:	40020058 	.word	0x40020058
 8007f0c:	40020070 	.word	0x40020070
 8007f10:	40020088 	.word	0x40020088
 8007f14:	400200a0 	.word	0x400200a0
 8007f18:	400200b8 	.word	0x400200b8
 8007f1c:	40020410 	.word	0x40020410
 8007f20:	40020428 	.word	0x40020428
 8007f24:	40020440 	.word	0x40020440
 8007f28:	40020458 	.word	0x40020458
 8007f2c:	40020470 	.word	0x40020470
 8007f30:	40020488 	.word	0x40020488
 8007f34:	400204a0 	.word	0x400204a0
 8007f38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80cf 	beq.w	80080fc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007f5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 80ca 	beq.w	80080fc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e4      	bne.n	8007f68 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	623b      	str	r3, [r7, #32]
   return(result);
 8007fae:	6a3a      	ldr	r2, [r7, #32]
 8007fb0:	4b55      	ldr	r3, [pc, #340]	@ (8008108 <HAL_UART_IRQHandler+0x7a8>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e3      	bne.n	8007f9e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	617b      	str	r3, [r7, #20]
   return(result);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e4      	bne.n	8007fea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f88b 	bl	8008148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008032:	e063      	b.n	80080fc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00e      	beq.n	800805e <HAL_UART_IRQHandler+0x6fe>
 8008040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d008      	beq.n	800805e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fb7f 	bl	800975a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800805c:	e051      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d014      	beq.n	8008094 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800806a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800807a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008086:	2b00      	cmp	r3, #0
 8008088:	d03a      	beq.n	8008100 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
    }
    return;
 8008092:	e035      	b.n	8008100 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <HAL_UART_IRQHandler+0x754>
 80080a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fb29 	bl	8009704 <UART_EndTransmit_IT>
    return;
 80080b2:	e026      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <HAL_UART_IRQHandler+0x774>
 80080c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 fb58 	bl	8009782 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080d2:	e016      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d010      	beq.n	8008102 <HAL_UART_IRQHandler+0x7a2>
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da0c      	bge.n	8008102 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fb40 	bl	800976e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080ee:	e008      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
      return;
 80080f0:	bf00      	nop
 80080f2:	e006      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
    return;
 80080f4:	bf00      	nop
 80080f6:	e004      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
      return;
 80080f8:	bf00      	nop
 80080fa:	e002      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
      return;
 80080fc:	bf00      	nop
 80080fe:	e000      	b.n	8008102 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008100:	bf00      	nop
  }
}
 8008102:	37e8      	adds	r7, #232	@ 0xe8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	effffffe 	.word	0xeffffffe

0800810c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008164:	b092      	sub	sp, #72	@ 0x48
 8008166:	af00      	add	r7, sp, #0
 8008168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	431a      	orrs	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	431a      	orrs	r2, r3
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	4313      	orrs	r3, r2
 8008186:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4bbe      	ldr	r3, [pc, #760]	@ (8008488 <UART_SetConfig+0x328>)
 8008190:	4013      	ands	r3, r2
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008198:	430b      	orrs	r3, r1
 800819a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4ab3      	ldr	r2, [pc, #716]	@ (800848c <UART_SetConfig+0x32c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081c8:	4313      	orrs	r3, r2
 80081ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	4baf      	ldr	r3, [pc, #700]	@ (8008490 <UART_SetConfig+0x330>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081dc:	430b      	orrs	r3, r1
 80081de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	f023 010f 	bic.w	r1, r3, #15
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4aa6      	ldr	r2, [pc, #664]	@ (8008494 <UART_SetConfig+0x334>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d177      	bne.n	80082f0 <UART_SetConfig+0x190>
 8008200:	4ba5      	ldr	r3, [pc, #660]	@ (8008498 <UART_SetConfig+0x338>)
 8008202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008208:	2b28      	cmp	r3, #40	@ 0x28
 800820a:	d86d      	bhi.n	80082e8 <UART_SetConfig+0x188>
 800820c:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <UART_SetConfig+0xb4>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	080082b9 	.word	0x080082b9
 8008218:	080082e9 	.word	0x080082e9
 800821c:	080082e9 	.word	0x080082e9
 8008220:	080082e9 	.word	0x080082e9
 8008224:	080082e9 	.word	0x080082e9
 8008228:	080082e9 	.word	0x080082e9
 800822c:	080082e9 	.word	0x080082e9
 8008230:	080082e9 	.word	0x080082e9
 8008234:	080082c1 	.word	0x080082c1
 8008238:	080082e9 	.word	0x080082e9
 800823c:	080082e9 	.word	0x080082e9
 8008240:	080082e9 	.word	0x080082e9
 8008244:	080082e9 	.word	0x080082e9
 8008248:	080082e9 	.word	0x080082e9
 800824c:	080082e9 	.word	0x080082e9
 8008250:	080082e9 	.word	0x080082e9
 8008254:	080082c9 	.word	0x080082c9
 8008258:	080082e9 	.word	0x080082e9
 800825c:	080082e9 	.word	0x080082e9
 8008260:	080082e9 	.word	0x080082e9
 8008264:	080082e9 	.word	0x080082e9
 8008268:	080082e9 	.word	0x080082e9
 800826c:	080082e9 	.word	0x080082e9
 8008270:	080082e9 	.word	0x080082e9
 8008274:	080082d1 	.word	0x080082d1
 8008278:	080082e9 	.word	0x080082e9
 800827c:	080082e9 	.word	0x080082e9
 8008280:	080082e9 	.word	0x080082e9
 8008284:	080082e9 	.word	0x080082e9
 8008288:	080082e9 	.word	0x080082e9
 800828c:	080082e9 	.word	0x080082e9
 8008290:	080082e9 	.word	0x080082e9
 8008294:	080082d9 	.word	0x080082d9
 8008298:	080082e9 	.word	0x080082e9
 800829c:	080082e9 	.word	0x080082e9
 80082a0:	080082e9 	.word	0x080082e9
 80082a4:	080082e9 	.word	0x080082e9
 80082a8:	080082e9 	.word	0x080082e9
 80082ac:	080082e9 	.word	0x080082e9
 80082b0:	080082e9 	.word	0x080082e9
 80082b4:	080082e1 	.word	0x080082e1
 80082b8:	2301      	movs	r3, #1
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e326      	b.n	800890e <UART_SetConfig+0x7ae>
 80082c0:	2304      	movs	r3, #4
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e322      	b.n	800890e <UART_SetConfig+0x7ae>
 80082c8:	2308      	movs	r3, #8
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e31e      	b.n	800890e <UART_SetConfig+0x7ae>
 80082d0:	2310      	movs	r3, #16
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e31a      	b.n	800890e <UART_SetConfig+0x7ae>
 80082d8:	2320      	movs	r3, #32
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e316      	b.n	800890e <UART_SetConfig+0x7ae>
 80082e0:	2340      	movs	r3, #64	@ 0x40
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e312      	b.n	800890e <UART_SetConfig+0x7ae>
 80082e8:	2380      	movs	r3, #128	@ 0x80
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e30e      	b.n	800890e <UART_SetConfig+0x7ae>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a69      	ldr	r2, [pc, #420]	@ (800849c <UART_SetConfig+0x33c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d130      	bne.n	800835c <UART_SetConfig+0x1fc>
 80082fa:	4b67      	ldr	r3, [pc, #412]	@ (8008498 <UART_SetConfig+0x338>)
 80082fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	2b05      	cmp	r3, #5
 8008304:	d826      	bhi.n	8008354 <UART_SetConfig+0x1f4>
 8008306:	a201      	add	r2, pc, #4	@ (adr r2, 800830c <UART_SetConfig+0x1ac>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008325 	.word	0x08008325
 8008310:	0800832d 	.word	0x0800832d
 8008314:	08008335 	.word	0x08008335
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008345 	.word	0x08008345
 8008320:	0800834d 	.word	0x0800834d
 8008324:	2300      	movs	r3, #0
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e2f0      	b.n	800890e <UART_SetConfig+0x7ae>
 800832c:	2304      	movs	r3, #4
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e2ec      	b.n	800890e <UART_SetConfig+0x7ae>
 8008334:	2308      	movs	r3, #8
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e2e8      	b.n	800890e <UART_SetConfig+0x7ae>
 800833c:	2310      	movs	r3, #16
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e2e4      	b.n	800890e <UART_SetConfig+0x7ae>
 8008344:	2320      	movs	r3, #32
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834a:	e2e0      	b.n	800890e <UART_SetConfig+0x7ae>
 800834c:	2340      	movs	r3, #64	@ 0x40
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008352:	e2dc      	b.n	800890e <UART_SetConfig+0x7ae>
 8008354:	2380      	movs	r3, #128	@ 0x80
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835a:	e2d8      	b.n	800890e <UART_SetConfig+0x7ae>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a4f      	ldr	r2, [pc, #316]	@ (80084a0 <UART_SetConfig+0x340>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d130      	bne.n	80083c8 <UART_SetConfig+0x268>
 8008366:	4b4c      	ldr	r3, [pc, #304]	@ (8008498 <UART_SetConfig+0x338>)
 8008368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	2b05      	cmp	r3, #5
 8008370:	d826      	bhi.n	80083c0 <UART_SetConfig+0x260>
 8008372:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <UART_SetConfig+0x218>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	08008391 	.word	0x08008391
 800837c:	08008399 	.word	0x08008399
 8008380:	080083a1 	.word	0x080083a1
 8008384:	080083a9 	.word	0x080083a9
 8008388:	080083b1 	.word	0x080083b1
 800838c:	080083b9 	.word	0x080083b9
 8008390:	2300      	movs	r3, #0
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e2ba      	b.n	800890e <UART_SetConfig+0x7ae>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e2b6      	b.n	800890e <UART_SetConfig+0x7ae>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e2b2      	b.n	800890e <UART_SetConfig+0x7ae>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e2ae      	b.n	800890e <UART_SetConfig+0x7ae>
 80083b0:	2320      	movs	r3, #32
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e2aa      	b.n	800890e <UART_SetConfig+0x7ae>
 80083b8:	2340      	movs	r3, #64	@ 0x40
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e2a6      	b.n	800890e <UART_SetConfig+0x7ae>
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e2a2      	b.n	800890e <UART_SetConfig+0x7ae>
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a35      	ldr	r2, [pc, #212]	@ (80084a4 <UART_SetConfig+0x344>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d130      	bne.n	8008434 <UART_SetConfig+0x2d4>
 80083d2:	4b31      	ldr	r3, [pc, #196]	@ (8008498 <UART_SetConfig+0x338>)
 80083d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d826      	bhi.n	800842c <UART_SetConfig+0x2cc>
 80083de:	a201      	add	r2, pc, #4	@ (adr r2, 80083e4 <UART_SetConfig+0x284>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	08008405 	.word	0x08008405
 80083ec:	0800840d 	.word	0x0800840d
 80083f0:	08008415 	.word	0x08008415
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	08008425 	.word	0x08008425
 80083fc:	2300      	movs	r3, #0
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008402:	e284      	b.n	800890e <UART_SetConfig+0x7ae>
 8008404:	2304      	movs	r3, #4
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840a:	e280      	b.n	800890e <UART_SetConfig+0x7ae>
 800840c:	2308      	movs	r3, #8
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e27c      	b.n	800890e <UART_SetConfig+0x7ae>
 8008414:	2310      	movs	r3, #16
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e278      	b.n	800890e <UART_SetConfig+0x7ae>
 800841c:	2320      	movs	r3, #32
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e274      	b.n	800890e <UART_SetConfig+0x7ae>
 8008424:	2340      	movs	r3, #64	@ 0x40
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e270      	b.n	800890e <UART_SetConfig+0x7ae>
 800842c:	2380      	movs	r3, #128	@ 0x80
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e26c      	b.n	800890e <UART_SetConfig+0x7ae>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1b      	ldr	r2, [pc, #108]	@ (80084a8 <UART_SetConfig+0x348>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d142      	bne.n	80084c4 <UART_SetConfig+0x364>
 800843e:	4b16      	ldr	r3, [pc, #88]	@ (8008498 <UART_SetConfig+0x338>)
 8008440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	2b05      	cmp	r3, #5
 8008448:	d838      	bhi.n	80084bc <UART_SetConfig+0x35c>
 800844a:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <UART_SetConfig+0x2f0>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008469 	.word	0x08008469
 8008454:	08008471 	.word	0x08008471
 8008458:	08008479 	.word	0x08008479
 800845c:	08008481 	.word	0x08008481
 8008460:	080084ad 	.word	0x080084ad
 8008464:	080084b5 	.word	0x080084b5
 8008468:	2300      	movs	r3, #0
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846e:	e24e      	b.n	800890e <UART_SetConfig+0x7ae>
 8008470:	2304      	movs	r3, #4
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008476:	e24a      	b.n	800890e <UART_SetConfig+0x7ae>
 8008478:	2308      	movs	r3, #8
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847e:	e246      	b.n	800890e <UART_SetConfig+0x7ae>
 8008480:	2310      	movs	r3, #16
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008486:	e242      	b.n	800890e <UART_SetConfig+0x7ae>
 8008488:	cfff69f3 	.word	0xcfff69f3
 800848c:	58000c00 	.word	0x58000c00
 8008490:	11fff4ff 	.word	0x11fff4ff
 8008494:	40011000 	.word	0x40011000
 8008498:	58024400 	.word	0x58024400
 800849c:	40004400 	.word	0x40004400
 80084a0:	40004800 	.word	0x40004800
 80084a4:	40004c00 	.word	0x40004c00
 80084a8:	40005000 	.word	0x40005000
 80084ac:	2320      	movs	r3, #32
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e22c      	b.n	800890e <UART_SetConfig+0x7ae>
 80084b4:	2340      	movs	r3, #64	@ 0x40
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e228      	b.n	800890e <UART_SetConfig+0x7ae>
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e224      	b.n	800890e <UART_SetConfig+0x7ae>
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4ab1      	ldr	r2, [pc, #708]	@ (8008790 <UART_SetConfig+0x630>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d176      	bne.n	80085bc <UART_SetConfig+0x45c>
 80084ce:	4bb1      	ldr	r3, [pc, #708]	@ (8008794 <UART_SetConfig+0x634>)
 80084d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084d6:	2b28      	cmp	r3, #40	@ 0x28
 80084d8:	d86c      	bhi.n	80085b4 <UART_SetConfig+0x454>
 80084da:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <UART_SetConfig+0x380>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008585 	.word	0x08008585
 80084e4:	080085b5 	.word	0x080085b5
 80084e8:	080085b5 	.word	0x080085b5
 80084ec:	080085b5 	.word	0x080085b5
 80084f0:	080085b5 	.word	0x080085b5
 80084f4:	080085b5 	.word	0x080085b5
 80084f8:	080085b5 	.word	0x080085b5
 80084fc:	080085b5 	.word	0x080085b5
 8008500:	0800858d 	.word	0x0800858d
 8008504:	080085b5 	.word	0x080085b5
 8008508:	080085b5 	.word	0x080085b5
 800850c:	080085b5 	.word	0x080085b5
 8008510:	080085b5 	.word	0x080085b5
 8008514:	080085b5 	.word	0x080085b5
 8008518:	080085b5 	.word	0x080085b5
 800851c:	080085b5 	.word	0x080085b5
 8008520:	08008595 	.word	0x08008595
 8008524:	080085b5 	.word	0x080085b5
 8008528:	080085b5 	.word	0x080085b5
 800852c:	080085b5 	.word	0x080085b5
 8008530:	080085b5 	.word	0x080085b5
 8008534:	080085b5 	.word	0x080085b5
 8008538:	080085b5 	.word	0x080085b5
 800853c:	080085b5 	.word	0x080085b5
 8008540:	0800859d 	.word	0x0800859d
 8008544:	080085b5 	.word	0x080085b5
 8008548:	080085b5 	.word	0x080085b5
 800854c:	080085b5 	.word	0x080085b5
 8008550:	080085b5 	.word	0x080085b5
 8008554:	080085b5 	.word	0x080085b5
 8008558:	080085b5 	.word	0x080085b5
 800855c:	080085b5 	.word	0x080085b5
 8008560:	080085a5 	.word	0x080085a5
 8008564:	080085b5 	.word	0x080085b5
 8008568:	080085b5 	.word	0x080085b5
 800856c:	080085b5 	.word	0x080085b5
 8008570:	080085b5 	.word	0x080085b5
 8008574:	080085b5 	.word	0x080085b5
 8008578:	080085b5 	.word	0x080085b5
 800857c:	080085b5 	.word	0x080085b5
 8008580:	080085ad 	.word	0x080085ad
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e1c0      	b.n	800890e <UART_SetConfig+0x7ae>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e1bc      	b.n	800890e <UART_SetConfig+0x7ae>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e1b8      	b.n	800890e <UART_SetConfig+0x7ae>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e1b4      	b.n	800890e <UART_SetConfig+0x7ae>
 80085a4:	2320      	movs	r3, #32
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e1b0      	b.n	800890e <UART_SetConfig+0x7ae>
 80085ac:	2340      	movs	r3, #64	@ 0x40
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e1ac      	b.n	800890e <UART_SetConfig+0x7ae>
 80085b4:	2380      	movs	r3, #128	@ 0x80
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e1a8      	b.n	800890e <UART_SetConfig+0x7ae>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a75      	ldr	r2, [pc, #468]	@ (8008798 <UART_SetConfig+0x638>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d130      	bne.n	8008628 <UART_SetConfig+0x4c8>
 80085c6:	4b73      	ldr	r3, [pc, #460]	@ (8008794 <UART_SetConfig+0x634>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d826      	bhi.n	8008620 <UART_SetConfig+0x4c0>
 80085d2:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <UART_SetConfig+0x478>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	080085f9 	.word	0x080085f9
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008609 	.word	0x08008609
 80085e8:	08008611 	.word	0x08008611
 80085ec:	08008619 	.word	0x08008619
 80085f0:	2300      	movs	r3, #0
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f6:	e18a      	b.n	800890e <UART_SetConfig+0x7ae>
 80085f8:	2304      	movs	r3, #4
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e186      	b.n	800890e <UART_SetConfig+0x7ae>
 8008600:	2308      	movs	r3, #8
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e182      	b.n	800890e <UART_SetConfig+0x7ae>
 8008608:	2310      	movs	r3, #16
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e17e      	b.n	800890e <UART_SetConfig+0x7ae>
 8008610:	2320      	movs	r3, #32
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e17a      	b.n	800890e <UART_SetConfig+0x7ae>
 8008618:	2340      	movs	r3, #64	@ 0x40
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e176      	b.n	800890e <UART_SetConfig+0x7ae>
 8008620:	2380      	movs	r3, #128	@ 0x80
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e172      	b.n	800890e <UART_SetConfig+0x7ae>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a5b      	ldr	r2, [pc, #364]	@ (800879c <UART_SetConfig+0x63c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d130      	bne.n	8008694 <UART_SetConfig+0x534>
 8008632:	4b58      	ldr	r3, [pc, #352]	@ (8008794 <UART_SetConfig+0x634>)
 8008634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b05      	cmp	r3, #5
 800863c:	d826      	bhi.n	800868c <UART_SetConfig+0x52c>
 800863e:	a201      	add	r2, pc, #4	@ (adr r2, 8008644 <UART_SetConfig+0x4e4>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	0800865d 	.word	0x0800865d
 8008648:	08008665 	.word	0x08008665
 800864c:	0800866d 	.word	0x0800866d
 8008650:	08008675 	.word	0x08008675
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008685 	.word	0x08008685
 800865c:	2300      	movs	r3, #0
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008662:	e154      	b.n	800890e <UART_SetConfig+0x7ae>
 8008664:	2304      	movs	r3, #4
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e150      	b.n	800890e <UART_SetConfig+0x7ae>
 800866c:	2308      	movs	r3, #8
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e14c      	b.n	800890e <UART_SetConfig+0x7ae>
 8008674:	2310      	movs	r3, #16
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e148      	b.n	800890e <UART_SetConfig+0x7ae>
 800867c:	2320      	movs	r3, #32
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e144      	b.n	800890e <UART_SetConfig+0x7ae>
 8008684:	2340      	movs	r3, #64	@ 0x40
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e140      	b.n	800890e <UART_SetConfig+0x7ae>
 800868c:	2380      	movs	r3, #128	@ 0x80
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e13c      	b.n	800890e <UART_SetConfig+0x7ae>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a41      	ldr	r2, [pc, #260]	@ (80087a0 <UART_SetConfig+0x640>)
 800869a:	4293      	cmp	r3, r2
 800869c:	f040 8082 	bne.w	80087a4 <UART_SetConfig+0x644>
 80086a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008794 <UART_SetConfig+0x634>)
 80086a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086a8:	2b28      	cmp	r3, #40	@ 0x28
 80086aa:	d86d      	bhi.n	8008788 <UART_SetConfig+0x628>
 80086ac:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <UART_SetConfig+0x554>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	08008759 	.word	0x08008759
 80086b8:	08008789 	.word	0x08008789
 80086bc:	08008789 	.word	0x08008789
 80086c0:	08008789 	.word	0x08008789
 80086c4:	08008789 	.word	0x08008789
 80086c8:	08008789 	.word	0x08008789
 80086cc:	08008789 	.word	0x08008789
 80086d0:	08008789 	.word	0x08008789
 80086d4:	08008761 	.word	0x08008761
 80086d8:	08008789 	.word	0x08008789
 80086dc:	08008789 	.word	0x08008789
 80086e0:	08008789 	.word	0x08008789
 80086e4:	08008789 	.word	0x08008789
 80086e8:	08008789 	.word	0x08008789
 80086ec:	08008789 	.word	0x08008789
 80086f0:	08008789 	.word	0x08008789
 80086f4:	08008769 	.word	0x08008769
 80086f8:	08008789 	.word	0x08008789
 80086fc:	08008789 	.word	0x08008789
 8008700:	08008789 	.word	0x08008789
 8008704:	08008789 	.word	0x08008789
 8008708:	08008789 	.word	0x08008789
 800870c:	08008789 	.word	0x08008789
 8008710:	08008789 	.word	0x08008789
 8008714:	08008771 	.word	0x08008771
 8008718:	08008789 	.word	0x08008789
 800871c:	08008789 	.word	0x08008789
 8008720:	08008789 	.word	0x08008789
 8008724:	08008789 	.word	0x08008789
 8008728:	08008789 	.word	0x08008789
 800872c:	08008789 	.word	0x08008789
 8008730:	08008789 	.word	0x08008789
 8008734:	08008779 	.word	0x08008779
 8008738:	08008789 	.word	0x08008789
 800873c:	08008789 	.word	0x08008789
 8008740:	08008789 	.word	0x08008789
 8008744:	08008789 	.word	0x08008789
 8008748:	08008789 	.word	0x08008789
 800874c:	08008789 	.word	0x08008789
 8008750:	08008789 	.word	0x08008789
 8008754:	08008781 	.word	0x08008781
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e0d6      	b.n	800890e <UART_SetConfig+0x7ae>
 8008760:	2304      	movs	r3, #4
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e0d2      	b.n	800890e <UART_SetConfig+0x7ae>
 8008768:	2308      	movs	r3, #8
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e0ce      	b.n	800890e <UART_SetConfig+0x7ae>
 8008770:	2310      	movs	r3, #16
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e0ca      	b.n	800890e <UART_SetConfig+0x7ae>
 8008778:	2320      	movs	r3, #32
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877e:	e0c6      	b.n	800890e <UART_SetConfig+0x7ae>
 8008780:	2340      	movs	r3, #64	@ 0x40
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e0c2      	b.n	800890e <UART_SetConfig+0x7ae>
 8008788:	2380      	movs	r3, #128	@ 0x80
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e0be      	b.n	800890e <UART_SetConfig+0x7ae>
 8008790:	40011400 	.word	0x40011400
 8008794:	58024400 	.word	0x58024400
 8008798:	40007800 	.word	0x40007800
 800879c:	40007c00 	.word	0x40007c00
 80087a0:	40011800 	.word	0x40011800
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4aad      	ldr	r2, [pc, #692]	@ (8008a60 <UART_SetConfig+0x900>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d176      	bne.n	800889c <UART_SetConfig+0x73c>
 80087ae:	4bad      	ldr	r3, [pc, #692]	@ (8008a64 <UART_SetConfig+0x904>)
 80087b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087b6:	2b28      	cmp	r3, #40	@ 0x28
 80087b8:	d86c      	bhi.n	8008894 <UART_SetConfig+0x734>
 80087ba:	a201      	add	r2, pc, #4	@ (adr r2, 80087c0 <UART_SetConfig+0x660>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	08008865 	.word	0x08008865
 80087c4:	08008895 	.word	0x08008895
 80087c8:	08008895 	.word	0x08008895
 80087cc:	08008895 	.word	0x08008895
 80087d0:	08008895 	.word	0x08008895
 80087d4:	08008895 	.word	0x08008895
 80087d8:	08008895 	.word	0x08008895
 80087dc:	08008895 	.word	0x08008895
 80087e0:	0800886d 	.word	0x0800886d
 80087e4:	08008895 	.word	0x08008895
 80087e8:	08008895 	.word	0x08008895
 80087ec:	08008895 	.word	0x08008895
 80087f0:	08008895 	.word	0x08008895
 80087f4:	08008895 	.word	0x08008895
 80087f8:	08008895 	.word	0x08008895
 80087fc:	08008895 	.word	0x08008895
 8008800:	08008875 	.word	0x08008875
 8008804:	08008895 	.word	0x08008895
 8008808:	08008895 	.word	0x08008895
 800880c:	08008895 	.word	0x08008895
 8008810:	08008895 	.word	0x08008895
 8008814:	08008895 	.word	0x08008895
 8008818:	08008895 	.word	0x08008895
 800881c:	08008895 	.word	0x08008895
 8008820:	0800887d 	.word	0x0800887d
 8008824:	08008895 	.word	0x08008895
 8008828:	08008895 	.word	0x08008895
 800882c:	08008895 	.word	0x08008895
 8008830:	08008895 	.word	0x08008895
 8008834:	08008895 	.word	0x08008895
 8008838:	08008895 	.word	0x08008895
 800883c:	08008895 	.word	0x08008895
 8008840:	08008885 	.word	0x08008885
 8008844:	08008895 	.word	0x08008895
 8008848:	08008895 	.word	0x08008895
 800884c:	08008895 	.word	0x08008895
 8008850:	08008895 	.word	0x08008895
 8008854:	08008895 	.word	0x08008895
 8008858:	08008895 	.word	0x08008895
 800885c:	08008895 	.word	0x08008895
 8008860:	0800888d 	.word	0x0800888d
 8008864:	2301      	movs	r3, #1
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e050      	b.n	800890e <UART_SetConfig+0x7ae>
 800886c:	2304      	movs	r3, #4
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e04c      	b.n	800890e <UART_SetConfig+0x7ae>
 8008874:	2308      	movs	r3, #8
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e048      	b.n	800890e <UART_SetConfig+0x7ae>
 800887c:	2310      	movs	r3, #16
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e044      	b.n	800890e <UART_SetConfig+0x7ae>
 8008884:	2320      	movs	r3, #32
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e040      	b.n	800890e <UART_SetConfig+0x7ae>
 800888c:	2340      	movs	r3, #64	@ 0x40
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e03c      	b.n	800890e <UART_SetConfig+0x7ae>
 8008894:	2380      	movs	r3, #128	@ 0x80
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889a:	e038      	b.n	800890e <UART_SetConfig+0x7ae>
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a71      	ldr	r2, [pc, #452]	@ (8008a68 <UART_SetConfig+0x908>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d130      	bne.n	8008908 <UART_SetConfig+0x7a8>
 80088a6:	4b6f      	ldr	r3, [pc, #444]	@ (8008a64 <UART_SetConfig+0x904>)
 80088a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	2b05      	cmp	r3, #5
 80088b0:	d826      	bhi.n	8008900 <UART_SetConfig+0x7a0>
 80088b2:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <UART_SetConfig+0x758>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088d1 	.word	0x080088d1
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	080088e1 	.word	0x080088e1
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	2302      	movs	r3, #2
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e01a      	b.n	800890e <UART_SetConfig+0x7ae>
 80088d8:	2304      	movs	r3, #4
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e016      	b.n	800890e <UART_SetConfig+0x7ae>
 80088e0:	2308      	movs	r3, #8
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e012      	b.n	800890e <UART_SetConfig+0x7ae>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e00e      	b.n	800890e <UART_SetConfig+0x7ae>
 80088f0:	2320      	movs	r3, #32
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e00a      	b.n	800890e <UART_SetConfig+0x7ae>
 80088f8:	2340      	movs	r3, #64	@ 0x40
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e006      	b.n	800890e <UART_SetConfig+0x7ae>
 8008900:	2380      	movs	r3, #128	@ 0x80
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e002      	b.n	800890e <UART_SetConfig+0x7ae>
 8008908:	2380      	movs	r3, #128	@ 0x80
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a55      	ldr	r2, [pc, #340]	@ (8008a68 <UART_SetConfig+0x908>)
 8008914:	4293      	cmp	r3, r2
 8008916:	f040 80f8 	bne.w	8008b0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800891a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800891e:	2b20      	cmp	r3, #32
 8008920:	dc46      	bgt.n	80089b0 <UART_SetConfig+0x850>
 8008922:	2b02      	cmp	r3, #2
 8008924:	db75      	blt.n	8008a12 <UART_SetConfig+0x8b2>
 8008926:	3b02      	subs	r3, #2
 8008928:	2b1e      	cmp	r3, #30
 800892a:	d872      	bhi.n	8008a12 <UART_SetConfig+0x8b2>
 800892c:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <UART_SetConfig+0x7d4>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	080089b7 	.word	0x080089b7
 8008938:	08008a13 	.word	0x08008a13
 800893c:	080089bf 	.word	0x080089bf
 8008940:	08008a13 	.word	0x08008a13
 8008944:	08008a13 	.word	0x08008a13
 8008948:	08008a13 	.word	0x08008a13
 800894c:	080089cf 	.word	0x080089cf
 8008950:	08008a13 	.word	0x08008a13
 8008954:	08008a13 	.word	0x08008a13
 8008958:	08008a13 	.word	0x08008a13
 800895c:	08008a13 	.word	0x08008a13
 8008960:	08008a13 	.word	0x08008a13
 8008964:	08008a13 	.word	0x08008a13
 8008968:	08008a13 	.word	0x08008a13
 800896c:	080089df 	.word	0x080089df
 8008970:	08008a13 	.word	0x08008a13
 8008974:	08008a13 	.word	0x08008a13
 8008978:	08008a13 	.word	0x08008a13
 800897c:	08008a13 	.word	0x08008a13
 8008980:	08008a13 	.word	0x08008a13
 8008984:	08008a13 	.word	0x08008a13
 8008988:	08008a13 	.word	0x08008a13
 800898c:	08008a13 	.word	0x08008a13
 8008990:	08008a13 	.word	0x08008a13
 8008994:	08008a13 	.word	0x08008a13
 8008998:	08008a13 	.word	0x08008a13
 800899c:	08008a13 	.word	0x08008a13
 80089a0:	08008a13 	.word	0x08008a13
 80089a4:	08008a13 	.word	0x08008a13
 80089a8:	08008a13 	.word	0x08008a13
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	2b40      	cmp	r3, #64	@ 0x40
 80089b2:	d02a      	beq.n	8008a0a <UART_SetConfig+0x8aa>
 80089b4:	e02d      	b.n	8008a12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089b6:	f7fe fa07 	bl	8006dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 80089ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089bc:	e02f      	b.n	8008a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fa16 	bl	8006df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089cc:	e027      	b.n	8008a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ce:	f107 0318 	add.w	r3, r7, #24
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fb62 	bl	800709c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089dc:	e01f      	b.n	8008a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089de:	4b21      	ldr	r3, [pc, #132]	@ (8008a64 <UART_SetConfig+0x904>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008a64 <UART_SetConfig+0x904>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	08db      	lsrs	r3, r3, #3
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a6c <UART_SetConfig+0x90c>)
 80089f6:	fa22 f303 	lsr.w	r3, r2, r3
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089fc:	e00f      	b.n	8008a1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80089fe:	4b1b      	ldr	r3, [pc, #108]	@ (8008a6c <UART_SetConfig+0x90c>)
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a02:	e00c      	b.n	8008a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a04:	4b1a      	ldr	r3, [pc, #104]	@ (8008a70 <UART_SetConfig+0x910>)
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a08:	e009      	b.n	8008a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a10:	e005      	b.n	8008a1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 81ee 	beq.w	8008e02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2a:	4a12      	ldr	r2, [pc, #72]	@ (8008a74 <UART_SetConfig+0x914>)
 8008a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a38:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	4413      	add	r3, r2
 8008a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d305      	bcc.n	8008a56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d910      	bls.n	8008a78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a5c:	e1d1      	b.n	8008e02 <UART_SetConfig+0xca2>
 8008a5e:	bf00      	nop
 8008a60:	40011c00 	.word	0x40011c00
 8008a64:	58024400 	.word	0x58024400
 8008a68:	58000c00 	.word	0x58000c00
 8008a6c:	03d09000 	.word	0x03d09000
 8008a70:	003d0900 	.word	0x003d0900
 8008a74:	0800c3a4 	.word	0x0800c3a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	60bb      	str	r3, [r7, #8]
 8008a7e:	60fa      	str	r2, [r7, #12]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	4ac0      	ldr	r2, [pc, #768]	@ (8008d88 <UART_SetConfig+0xc28>)
 8008a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	607a      	str	r2, [r7, #4]
 8008a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a9a:	f7f7 fca1 	bl	80003e0 <__aeabi_uldivmod>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	f04f 0200 	mov.w	r2, #0
 8008aaa:	f04f 0300 	mov.w	r3, #0
 8008aae:	020b      	lsls	r3, r1, #8
 8008ab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ab4:	0202      	lsls	r2, r0, #8
 8008ab6:	6979      	ldr	r1, [r7, #20]
 8008ab8:	6849      	ldr	r1, [r1, #4]
 8008aba:	0849      	lsrs	r1, r1, #1
 8008abc:	2000      	movs	r0, #0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	eb12 0804 	adds.w	r8, r2, r4
 8008ac6:	eb43 0905 	adc.w	r9, r3, r5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	4693      	mov	fp, r2
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	465b      	mov	r3, fp
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7f7 fc80 	bl	80003e0 <__aeabi_uldivmod>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aee:	d308      	bcc.n	8008b02 <UART_SetConfig+0x9a2>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008af6:	d204      	bcs.n	8008b02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008afe:	60da      	str	r2, [r3, #12]
 8008b00:	e17f      	b.n	8008e02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b08:	e17b      	b.n	8008e02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b12:	f040 80bd 	bne.w	8008c90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008b16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	dc48      	bgt.n	8008bb0 <UART_SetConfig+0xa50>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db7b      	blt.n	8008c1a <UART_SetConfig+0xaba>
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d879      	bhi.n	8008c1a <UART_SetConfig+0xaba>
 8008b26:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <UART_SetConfig+0x9cc>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008bb7 	.word	0x08008bb7
 8008b30:	08008bbf 	.word	0x08008bbf
 8008b34:	08008c1b 	.word	0x08008c1b
 8008b38:	08008c1b 	.word	0x08008c1b
 8008b3c:	08008bc7 	.word	0x08008bc7
 8008b40:	08008c1b 	.word	0x08008c1b
 8008b44:	08008c1b 	.word	0x08008c1b
 8008b48:	08008c1b 	.word	0x08008c1b
 8008b4c:	08008bd7 	.word	0x08008bd7
 8008b50:	08008c1b 	.word	0x08008c1b
 8008b54:	08008c1b 	.word	0x08008c1b
 8008b58:	08008c1b 	.word	0x08008c1b
 8008b5c:	08008c1b 	.word	0x08008c1b
 8008b60:	08008c1b 	.word	0x08008c1b
 8008b64:	08008c1b 	.word	0x08008c1b
 8008b68:	08008c1b 	.word	0x08008c1b
 8008b6c:	08008be7 	.word	0x08008be7
 8008b70:	08008c1b 	.word	0x08008c1b
 8008b74:	08008c1b 	.word	0x08008c1b
 8008b78:	08008c1b 	.word	0x08008c1b
 8008b7c:	08008c1b 	.word	0x08008c1b
 8008b80:	08008c1b 	.word	0x08008c1b
 8008b84:	08008c1b 	.word	0x08008c1b
 8008b88:	08008c1b 	.word	0x08008c1b
 8008b8c:	08008c1b 	.word	0x08008c1b
 8008b90:	08008c1b 	.word	0x08008c1b
 8008b94:	08008c1b 	.word	0x08008c1b
 8008b98:	08008c1b 	.word	0x08008c1b
 8008b9c:	08008c1b 	.word	0x08008c1b
 8008ba0:	08008c1b 	.word	0x08008c1b
 8008ba4:	08008c1b 	.word	0x08008c1b
 8008ba8:	08008c1b 	.word	0x08008c1b
 8008bac:	08008c0d 	.word	0x08008c0d
 8008bb0:	2b40      	cmp	r3, #64	@ 0x40
 8008bb2:	d02e      	beq.n	8008c12 <UART_SetConfig+0xab2>
 8008bb4:	e031      	b.n	8008c1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bb6:	f7fc ff3b 	bl	8005a30 <HAL_RCC_GetPCLK1Freq>
 8008bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bbc:	e033      	b.n	8008c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bbe:	f7fc ff4d 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8008bc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bc4:	e02f      	b.n	8008c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe f912 	bl	8006df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd4:	e027      	b.n	8008c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bd6:	f107 0318 	add.w	r3, r7, #24
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe fa5e 	bl	800709c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be4:	e01f      	b.n	8008c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008be6:	4b69      	ldr	r3, [pc, #420]	@ (8008d8c <UART_SetConfig+0xc2c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bf2:	4b66      	ldr	r3, [pc, #408]	@ (8008d8c <UART_SetConfig+0xc2c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	08db      	lsrs	r3, r3, #3
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	4a64      	ldr	r2, [pc, #400]	@ (8008d90 <UART_SetConfig+0xc30>)
 8008bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c04:	e00f      	b.n	8008c26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008c06:	4b62      	ldr	r3, [pc, #392]	@ (8008d90 <UART_SetConfig+0xc30>)
 8008c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0a:	e00c      	b.n	8008c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c0c:	4b61      	ldr	r3, [pc, #388]	@ (8008d94 <UART_SetConfig+0xc34>)
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c10:	e009      	b.n	8008c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c18:	e005      	b.n	8008c26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80ea 	beq.w	8008e02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	4a55      	ldr	r2, [pc, #340]	@ (8008d88 <UART_SetConfig+0xc28>)
 8008c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c40:	005a      	lsls	r2, r3, #1
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	085b      	lsrs	r3, r3, #1
 8008c48:	441a      	add	r2, r3
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d916      	bls.n	8008c88 <UART_SetConfig+0xb28>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c60:	d212      	bcs.n	8008c88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f023 030f 	bic.w	r3, r3, #15
 8008c6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	085b      	lsrs	r3, r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c84:	60da      	str	r2, [r3, #12]
 8008c86:	e0bc      	b.n	8008e02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c8e:	e0b8      	b.n	8008e02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	dc4b      	bgt.n	8008d30 <UART_SetConfig+0xbd0>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f2c0 8087 	blt.w	8008dac <UART_SetConfig+0xc4c>
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	f200 8084 	bhi.w	8008dac <UART_SetConfig+0xc4c>
 8008ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <UART_SetConfig+0xb4c>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008d37 	.word	0x08008d37
 8008cb0:	08008d3f 	.word	0x08008d3f
 8008cb4:	08008dad 	.word	0x08008dad
 8008cb8:	08008dad 	.word	0x08008dad
 8008cbc:	08008d47 	.word	0x08008d47
 8008cc0:	08008dad 	.word	0x08008dad
 8008cc4:	08008dad 	.word	0x08008dad
 8008cc8:	08008dad 	.word	0x08008dad
 8008ccc:	08008d57 	.word	0x08008d57
 8008cd0:	08008dad 	.word	0x08008dad
 8008cd4:	08008dad 	.word	0x08008dad
 8008cd8:	08008dad 	.word	0x08008dad
 8008cdc:	08008dad 	.word	0x08008dad
 8008ce0:	08008dad 	.word	0x08008dad
 8008ce4:	08008dad 	.word	0x08008dad
 8008ce8:	08008dad 	.word	0x08008dad
 8008cec:	08008d67 	.word	0x08008d67
 8008cf0:	08008dad 	.word	0x08008dad
 8008cf4:	08008dad 	.word	0x08008dad
 8008cf8:	08008dad 	.word	0x08008dad
 8008cfc:	08008dad 	.word	0x08008dad
 8008d00:	08008dad 	.word	0x08008dad
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008dad 	.word	0x08008dad
 8008d0c:	08008dad 	.word	0x08008dad
 8008d10:	08008dad 	.word	0x08008dad
 8008d14:	08008dad 	.word	0x08008dad
 8008d18:	08008dad 	.word	0x08008dad
 8008d1c:	08008dad 	.word	0x08008dad
 8008d20:	08008dad 	.word	0x08008dad
 8008d24:	08008dad 	.word	0x08008dad
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008d9f 	.word	0x08008d9f
 8008d30:	2b40      	cmp	r3, #64	@ 0x40
 8008d32:	d037      	beq.n	8008da4 <UART_SetConfig+0xc44>
 8008d34:	e03a      	b.n	8008dac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d36:	f7fc fe7b 	bl	8005a30 <HAL_RCC_GetPCLK1Freq>
 8008d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e03c      	b.n	8008db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d3e:	f7fc fe8d 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8008d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d44:	e038      	b.n	8008db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe f852 	bl	8006df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d54:	e030      	b.n	8008db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d56:	f107 0318 	add.w	r3, r7, #24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe f99e 	bl	800709c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d64:	e028      	b.n	8008db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d66:	4b09      	ldr	r3, [pc, #36]	@ (8008d8c <UART_SetConfig+0xc2c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d012      	beq.n	8008d98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d72:	4b06      	ldr	r3, [pc, #24]	@ (8008d8c <UART_SetConfig+0xc2c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	08db      	lsrs	r3, r3, #3
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	4a04      	ldr	r2, [pc, #16]	@ (8008d90 <UART_SetConfig+0xc30>)
 8008d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d84:	e018      	b.n	8008db8 <UART_SetConfig+0xc58>
 8008d86:	bf00      	nop
 8008d88:	0800c3a4 	.word	0x0800c3a4
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	03d09000 	.word	0x03d09000
 8008d94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008d98:	4b24      	ldr	r3, [pc, #144]	@ (8008e2c <UART_SetConfig+0xccc>)
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	e00c      	b.n	8008db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d9e:	4b24      	ldr	r3, [pc, #144]	@ (8008e30 <UART_SetConfig+0xcd0>)
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da2:	e009      	b.n	8008db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008daa:	e005      	b.n	8008db8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008db6:	bf00      	nop
    }

    if (pclk != 0U)
 8008db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d021      	beq.n	8008e02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e34 <UART_SetConfig+0xcd4>)
 8008dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	441a      	add	r2, r3
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	2b0f      	cmp	r3, #15
 8008de6:	d909      	bls.n	8008dfc <UART_SetConfig+0xc9c>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dee:	d205      	bcs.n	8008dfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60da      	str	r2, [r3, #12]
 8008dfa:	e002      	b.n	8008e02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3748      	adds	r7, #72	@ 0x48
 8008e26:	46bd      	mov	sp, r7
 8008e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e2c:	03d09000 	.word	0x03d09000
 8008e30:	003d0900 	.word	0x003d0900
 8008e34:	0800c3a4 	.word	0x0800c3a4

08008e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	f003 0304 	and.w	r3, r3, #4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01a      	beq.n	8008f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f36:	d10a      	bne.n	8008f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	605a      	str	r2, [r3, #4]
  }
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b098      	sub	sp, #96	@ 0x60
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f8c:	f7f8 fbe6 	bl	800175c <HAL_GetTick>
 8008f90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d12f      	bne.n	8009000 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f88e 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d022      	beq.n	8009000 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc2:	e853 3f00 	ldrex	r3, [r3]
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e6      	bne.n	8008fba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e063      	b.n	80090c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b04      	cmp	r3, #4
 800900c:	d149      	bne.n	80090a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800900e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009016:	2200      	movs	r2, #0
 8009018:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f857 	bl	80090d0 <UART_WaitOnFlagUntilTimeout>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d03c      	beq.n	80090a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	623b      	str	r3, [r7, #32]
   return(result);
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800903c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009046:	633b      	str	r3, [r7, #48]	@ 0x30
 8009048:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800904c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e6      	bne.n	8009028 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	60fb      	str	r3, [r7, #12]
   return(result);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800907a:	61fa      	str	r2, [r7, #28]
 800907c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	69b9      	ldr	r1, [r7, #24]
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	617b      	str	r3, [r7, #20]
   return(result);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e012      	b.n	80090c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3758      	adds	r7, #88	@ 0x58
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	4613      	mov	r3, r2
 80090de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090e0:	e04f      	b.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e8:	d04b      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ea:	f7f8 fb37 	bl	800175c <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d302      	bcc.n	8009100 <UART_WaitOnFlagUntilTimeout+0x30>
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e04e      	b.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	d037      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b80      	cmp	r3, #128	@ 0x80
 8009116:	d034      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b40      	cmp	r3, #64	@ 0x40
 800911c:	d031      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f003 0308 	and.w	r3, r3, #8
 8009128:	2b08      	cmp	r3, #8
 800912a:	d110      	bne.n	800914e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2208      	movs	r2, #8
 8009132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f921 	bl	800937c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2208      	movs	r2, #8
 800913e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e029      	b.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800915c:	d111      	bne.n	8009182 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f907 	bl	800937c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e00f      	b.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69da      	ldr	r2, [r3, #28]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4013      	ands	r3, r2
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	429a      	cmp	r2, r3
 8009190:	bf0c      	ite	eq
 8009192:	2301      	moveq	r3, #1
 8009194:	2300      	movne	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	429a      	cmp	r2, r3
 800919e:	d0a0      	beq.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b096      	sub	sp, #88	@ 0x58
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4613      	mov	r3, r2
 80091b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	88fa      	ldrh	r2, [r7, #6]
 80091c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2222      	movs	r2, #34	@ 0x22
 80091d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d02d      	beq.n	800923e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e8:	4a40      	ldr	r2, [pc, #256]	@ (80092ec <UART_Start_Receive_DMA+0x140>)
 80091ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f2:	4a3f      	ldr	r2, [pc, #252]	@ (80092f0 <UART_Start_Receive_DMA+0x144>)
 80091f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fc:	4a3d      	ldr	r2, [pc, #244]	@ (80092f4 <UART_Start_Receive_DMA+0x148>)
 80091fe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009206:	2200      	movs	r2, #0
 8009208:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3324      	adds	r3, #36	@ 0x24
 8009216:	4619      	mov	r1, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921c:	461a      	mov	r2, r3
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	f7f8 ffac 	bl	800217c <HAL_DMA_Start_IT>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d009      	beq.n	800923e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2210      	movs	r2, #16
 800922e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2220      	movs	r2, #32
 8009236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e051      	b.n	80092e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d018      	beq.n	8009278 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800925a:	657b      	str	r3, [r7, #84]	@ 0x54
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009266:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800926a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e6      	bne.n	8009246 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	e853 3f00 	ldrex	r3, [r3]
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3308      	adds	r3, #8
 8009296:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009298:	637a      	str	r2, [r7, #52]	@ 0x34
 800929a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800929e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e5      	bne.n	8009278 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3308      	adds	r3, #8
 80092b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	613b      	str	r3, [r7, #16]
   return(result);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3308      	adds	r3, #8
 80092ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092cc:	623a      	str	r2, [r7, #32]
 80092ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	69f9      	ldr	r1, [r7, #28]
 80092d2:	6a3a      	ldr	r2, [r7, #32]
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e5      	bne.n	80092ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3758      	adds	r7, #88	@ 0x58
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	080094fb 	.word	0x080094fb
 80092f0:	08009623 	.word	0x08009623
 80092f4:	08009661 	.word	0x08009661

080092f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b08f      	sub	sp, #60	@ 0x3c
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	61fb      	str	r3, [r7, #28]
   return(result);
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009320:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e6      	bne.n	8009300 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	60bb      	str	r3, [r7, #8]
   return(result);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009348:	633b      	str	r3, [r7, #48]	@ 0x30
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009352:	61ba      	str	r2, [r7, #24]
 8009354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6979      	ldr	r1, [r7, #20]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	613b      	str	r3, [r7, #16]
   return(result);
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800936e:	bf00      	nop
 8009370:	373c      	adds	r7, #60	@ 0x3c
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b095      	sub	sp, #84	@ 0x54
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80093a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e6      	bne.n	8009384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009444 <UART_EndRxTransfer+0xc8>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e5      	bne.n	80093b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d118      	bne.n	8009424 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f023 0310 	bic.w	r3, r3, #16
 8009406:	647b      	str	r3, [r7, #68]	@ 0x44
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009410:	61bb      	str	r3, [r7, #24]
 8009412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	613b      	str	r3, [r7, #16]
   return(result);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e6      	bne.n	80093f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009438:	bf00      	nop
 800943a:	3754      	adds	r7, #84	@ 0x54
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	effffffe 	.word	0xeffffffe

08009448 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b090      	sub	sp, #64	@ 0x40
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800945e:	d037      	beq.n	80094d0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009462:	2200      	movs	r2, #0
 8009464:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	623b      	str	r3, [r7, #32]
   return(result);
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800947e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009488:	633a      	str	r2, [r7, #48]	@ 0x30
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800948e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e5      	bne.n	8009468 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800949c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	69b9      	ldr	r1, [r7, #24]
 80094c0:	69fa      	ldr	r2, [r7, #28]
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	617b      	str	r3, [r7, #20]
   return(result);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e6      	bne.n	800949c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094ce:	e002      	b.n	80094d6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80094d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80094d2:	f7f7 fc17 	bl	8000d04 <HAL_UART_TxCpltCallback>
}
 80094d6:	bf00      	nop
 80094d8:	3740      	adds	r7, #64	@ 0x40
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f7fe fe0d 	bl	800810c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b09c      	sub	sp, #112	@ 0x70
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009506:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009510:	d071      	beq.n	80095f6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009514:	2200      	movs	r2, #0
 8009516:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800951a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800952a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800952e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800953a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800953e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	667b      	str	r3, [r7, #100]	@ 0x64
 8009564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800956c:	647a      	str	r2, [r7, #68]	@ 0x44
 800956e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800957a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e5      	bne.n	800954c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3308      	adds	r3, #8
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	623b      	str	r3, [r7, #32]
   return(result);
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009596:	663b      	str	r3, [r7, #96]	@ 0x60
 8009598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3308      	adds	r3, #8
 800959e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e5      	bne.n	8009580 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095b6:	2220      	movs	r2, #32
 80095b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d118      	bne.n	80095f6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f023 0310 	bic.w	r3, r3, #16
 80095d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	69b9      	ldr	r1, [r7, #24]
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	617b      	str	r3, [r7, #20]
   return(result);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e6      	bne.n	80095c4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f8:	2200      	movs	r2, #0
 80095fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009600:	2b01      	cmp	r3, #1
 8009602:	d107      	bne.n	8009614 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009606:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800960a:	4619      	mov	r1, r3
 800960c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800960e:	f7fe fd9b 	bl	8008148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009612:	e002      	b.n	800961a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009614:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009616:	f7f7 f879 	bl	800070c <HAL_UART_RxCpltCallback>
}
 800961a:	bf00      	nop
 800961c:	3770      	adds	r7, #112	@ 0x70
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2201      	movs	r2, #1
 8009634:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d109      	bne.n	8009652 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009644:	085b      	lsrs	r3, r3, #1
 8009646:	b29b      	uxth	r3, r3
 8009648:	4619      	mov	r1, r3
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f7fe fd7c 	bl	8008148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009650:	e002      	b.n	8009658 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f7fe fd64 	bl	8008120 <HAL_UART_RxHalfCpltCallback>
}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009674:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800967c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009688:	2b80      	cmp	r3, #128	@ 0x80
 800968a:	d109      	bne.n	80096a0 <UART_DMAError+0x40>
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2b21      	cmp	r3, #33	@ 0x21
 8009690:	d106      	bne.n	80096a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800969a:	6978      	ldr	r0, [r7, #20]
 800969c:	f7ff fe2c 	bl	80092f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096aa:	2b40      	cmp	r3, #64	@ 0x40
 80096ac:	d109      	bne.n	80096c2 <UART_DMAError+0x62>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b22      	cmp	r3, #34	@ 0x22
 80096b2:	d106      	bne.n	80096c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80096bc:	6978      	ldr	r0, [r7, #20]
 80096be:	f7ff fe5d 	bl	800937c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c8:	f043 0210 	orr.w	r2, r3, #16
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	f7fe fd2e 	bl	8008134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096d8:	bf00      	nop
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7fe fd1c 	bl	8008134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	e853 3f00 	ldrex	r3, [r3]
 8009718:	60bb      	str	r3, [r7, #8]
   return(result);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6979      	ldr	r1, [r7, #20]
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	613b      	str	r3, [r7, #16]
   return(result);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e6      	bne.n	800970c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7f7 fad9 	bl	8000d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009752:	bf00      	nop
 8009754:	3720      	adds	r7, #32
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800978a:	bf00      	nop
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d101      	bne.n	80097ac <HAL_UARTEx_DisableFifoMode+0x16>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e027      	b.n	80097fc <HAL_UARTEx_DisableFifoMode+0x66>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2224      	movs	r2, #36	@ 0x24
 80097b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0201 	bic.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800981c:	2302      	movs	r3, #2
 800981e:	e02d      	b.n	800987c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2224      	movs	r2, #36	@ 0x24
 800982c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0201 	bic.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f84f 	bl	8009900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009894:	2b01      	cmp	r3, #1
 8009896:	d101      	bne.n	800989c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009898:	2302      	movs	r3, #2
 800989a:	e02d      	b.n	80098f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2224      	movs	r2, #36	@ 0x24
 80098a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0201 	bic.w	r2, r2, #1
 80098c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f811 	bl	8009900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800990c:	2b00      	cmp	r3, #0
 800990e:	d108      	bne.n	8009922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009920:	e031      	b.n	8009986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009922:	2310      	movs	r3, #16
 8009924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009926:	2310      	movs	r3, #16
 8009928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	0e5b      	lsrs	r3, r3, #25
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	0f5b      	lsrs	r3, r3, #29
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	7b3a      	ldrb	r2, [r7, #12]
 800994e:	4911      	ldr	r1, [pc, #68]	@ (8009994 <UARTEx_SetNbDataToProcess+0x94>)
 8009950:	5c8a      	ldrb	r2, [r1, r2]
 8009952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009956:	7b3a      	ldrb	r2, [r7, #12]
 8009958:	490f      	ldr	r1, [pc, #60]	@ (8009998 <UARTEx_SetNbDataToProcess+0x98>)
 800995a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800995c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	7b7a      	ldrb	r2, [r7, #13]
 800996c:	4909      	ldr	r1, [pc, #36]	@ (8009994 <UARTEx_SetNbDataToProcess+0x94>)
 800996e:	5c8a      	ldrb	r2, [r1, r2]
 8009970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009974:	7b7a      	ldrb	r2, [r7, #13]
 8009976:	4908      	ldr	r1, [pc, #32]	@ (8009998 <UARTEx_SetNbDataToProcess+0x98>)
 8009978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800997a:	fb93 f3f2 	sdiv	r3, r3, r2
 800997e:	b29a      	uxth	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	0800c3bc 	.word	0x0800c3bc
 8009998:	0800c3c4 	.word	0x0800c3c4

0800999c <__cvt>:
 800999c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800999e:	ed2d 8b02 	vpush	{d8}
 80099a2:	eeb0 8b40 	vmov.f64	d8, d0
 80099a6:	b085      	sub	sp, #20
 80099a8:	4617      	mov	r7, r2
 80099aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80099ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099ae:	ee18 2a90 	vmov	r2, s17
 80099b2:	f025 0520 	bic.w	r5, r5, #32
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	bfb6      	itet	lt
 80099ba:	222d      	movlt	r2, #45	@ 0x2d
 80099bc:	2200      	movge	r2, #0
 80099be:	eeb1 8b40 	vneglt.f64	d8, d0
 80099c2:	2d46      	cmp	r5, #70	@ 0x46
 80099c4:	460c      	mov	r4, r1
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	d004      	beq.n	80099d4 <__cvt+0x38>
 80099ca:	2d45      	cmp	r5, #69	@ 0x45
 80099cc:	d100      	bne.n	80099d0 <__cvt+0x34>
 80099ce:	3401      	adds	r4, #1
 80099d0:	2102      	movs	r1, #2
 80099d2:	e000      	b.n	80099d6 <__cvt+0x3a>
 80099d4:	2103      	movs	r1, #3
 80099d6:	ab03      	add	r3, sp, #12
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	ab02      	add	r3, sp, #8
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4622      	mov	r2, r4
 80099e0:	4633      	mov	r3, r6
 80099e2:	eeb0 0b48 	vmov.f64	d0, d8
 80099e6:	f000 ff1f 	bl	800a828 <_dtoa_r>
 80099ea:	2d47      	cmp	r5, #71	@ 0x47
 80099ec:	d114      	bne.n	8009a18 <__cvt+0x7c>
 80099ee:	07fb      	lsls	r3, r7, #31
 80099f0:	d50a      	bpl.n	8009a08 <__cvt+0x6c>
 80099f2:	1902      	adds	r2, r0, r4
 80099f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fc:	bf08      	it	eq
 80099fe:	9203      	streq	r2, [sp, #12]
 8009a00:	2130      	movs	r1, #48	@ 0x30
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d319      	bcc.n	8009a3c <__cvt+0xa0>
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a0c:	1a1b      	subs	r3, r3, r0
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	b005      	add	sp, #20
 8009a12:	ecbd 8b02 	vpop	{d8}
 8009a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a18:	2d46      	cmp	r5, #70	@ 0x46
 8009a1a:	eb00 0204 	add.w	r2, r0, r4
 8009a1e:	d1e9      	bne.n	80099f4 <__cvt+0x58>
 8009a20:	7803      	ldrb	r3, [r0, #0]
 8009a22:	2b30      	cmp	r3, #48	@ 0x30
 8009a24:	d107      	bne.n	8009a36 <__cvt+0x9a>
 8009a26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	bf1c      	itt	ne
 8009a30:	f1c4 0401 	rsbne	r4, r4, #1
 8009a34:	6034      	strne	r4, [r6, #0]
 8009a36:	6833      	ldr	r3, [r6, #0]
 8009a38:	441a      	add	r2, r3
 8009a3a:	e7db      	b.n	80099f4 <__cvt+0x58>
 8009a3c:	1c5c      	adds	r4, r3, #1
 8009a3e:	9403      	str	r4, [sp, #12]
 8009a40:	7019      	strb	r1, [r3, #0]
 8009a42:	e7de      	b.n	8009a02 <__cvt+0x66>

08009a44 <__exponent>:
 8009a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a46:	2900      	cmp	r1, #0
 8009a48:	bfba      	itte	lt
 8009a4a:	4249      	neglt	r1, r1
 8009a4c:	232d      	movlt	r3, #45	@ 0x2d
 8009a4e:	232b      	movge	r3, #43	@ 0x2b
 8009a50:	2909      	cmp	r1, #9
 8009a52:	7002      	strb	r2, [r0, #0]
 8009a54:	7043      	strb	r3, [r0, #1]
 8009a56:	dd29      	ble.n	8009aac <__exponent+0x68>
 8009a58:	f10d 0307 	add.w	r3, sp, #7
 8009a5c:	461d      	mov	r5, r3
 8009a5e:	270a      	movs	r7, #10
 8009a60:	461a      	mov	r2, r3
 8009a62:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a66:	fb07 1416 	mls	r4, r7, r6, r1
 8009a6a:	3430      	adds	r4, #48	@ 0x30
 8009a6c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a70:	460c      	mov	r4, r1
 8009a72:	2c63      	cmp	r4, #99	@ 0x63
 8009a74:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a78:	4631      	mov	r1, r6
 8009a7a:	dcf1      	bgt.n	8009a60 <__exponent+0x1c>
 8009a7c:	3130      	adds	r1, #48	@ 0x30
 8009a7e:	1e94      	subs	r4, r2, #2
 8009a80:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a84:	1c41      	adds	r1, r0, #1
 8009a86:	4623      	mov	r3, r4
 8009a88:	42ab      	cmp	r3, r5
 8009a8a:	d30a      	bcc.n	8009aa2 <__exponent+0x5e>
 8009a8c:	f10d 0309 	add.w	r3, sp, #9
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	42ac      	cmp	r4, r5
 8009a94:	bf88      	it	hi
 8009a96:	2300      	movhi	r3, #0
 8009a98:	3302      	adds	r3, #2
 8009a9a:	4403      	add	r3, r0
 8009a9c:	1a18      	subs	r0, r3, r0
 8009a9e:	b003      	add	sp, #12
 8009aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009aa6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009aaa:	e7ed      	b.n	8009a88 <__exponent+0x44>
 8009aac:	2330      	movs	r3, #48	@ 0x30
 8009aae:	3130      	adds	r1, #48	@ 0x30
 8009ab0:	7083      	strb	r3, [r0, #2]
 8009ab2:	70c1      	strb	r1, [r0, #3]
 8009ab4:	1d03      	adds	r3, r0, #4
 8009ab6:	e7f1      	b.n	8009a9c <__exponent+0x58>

08009ab8 <_printf_float>:
 8009ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	b08d      	sub	sp, #52	@ 0x34
 8009abe:	460c      	mov	r4, r1
 8009ac0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	4605      	mov	r5, r0
 8009aca:	f000 fdad 	bl	800a628 <_localeconv_r>
 8009ace:	f8d0 b000 	ldr.w	fp, [r0]
 8009ad2:	4658      	mov	r0, fp
 8009ad4:	f7f6 fc7c 	bl	80003d0 <strlen>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8009adc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009ae4:	6822      	ldr	r2, [r4, #0]
 8009ae6:	9005      	str	r0, [sp, #20]
 8009ae8:	3307      	adds	r3, #7
 8009aea:	f023 0307 	bic.w	r3, r3, #7
 8009aee:	f103 0108 	add.w	r1, r3, #8
 8009af2:	f8c8 1000 	str.w	r1, [r8]
 8009af6:	ed93 0b00 	vldr	d0, [r3]
 8009afa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009d58 <_printf_float+0x2a0>
 8009afe:	eeb0 7bc0 	vabs.f64	d7, d0
 8009b02:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009b0e:	dd24      	ble.n	8009b5a <_printf_float+0xa2>
 8009b10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b18:	d502      	bpl.n	8009b20 <_printf_float+0x68>
 8009b1a:	232d      	movs	r3, #45	@ 0x2d
 8009b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b20:	498f      	ldr	r1, [pc, #572]	@ (8009d60 <_printf_float+0x2a8>)
 8009b22:	4b90      	ldr	r3, [pc, #576]	@ (8009d64 <_printf_float+0x2ac>)
 8009b24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009b28:	bf8c      	ite	hi
 8009b2a:	4688      	movhi	r8, r1
 8009b2c:	4698      	movls	r8, r3
 8009b2e:	f022 0204 	bic.w	r2, r2, #4
 8009b32:	2303      	movs	r3, #3
 8009b34:	6123      	str	r3, [r4, #16]
 8009b36:	6022      	str	r2, [r4, #0]
 8009b38:	f04f 0a00 	mov.w	sl, #0
 8009b3c:	9700      	str	r7, [sp, #0]
 8009b3e:	4633      	mov	r3, r6
 8009b40:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f9d1 	bl	8009eec <_printf_common>
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f040 8089 	bne.w	8009c62 <_printf_float+0x1aa>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	b00d      	add	sp, #52	@ 0x34
 8009b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8009b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b62:	d709      	bvc.n	8009b78 <_printf_float+0xc0>
 8009b64:	ee10 3a90 	vmov	r3, s1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfbc      	itt	lt
 8009b6c:	232d      	movlt	r3, #45	@ 0x2d
 8009b6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b72:	497d      	ldr	r1, [pc, #500]	@ (8009d68 <_printf_float+0x2b0>)
 8009b74:	4b7d      	ldr	r3, [pc, #500]	@ (8009d6c <_printf_float+0x2b4>)
 8009b76:	e7d5      	b.n	8009b24 <_printf_float+0x6c>
 8009b78:	6863      	ldr	r3, [r4, #4]
 8009b7a:	1c59      	adds	r1, r3, #1
 8009b7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009b80:	d139      	bne.n	8009bf6 <_printf_float+0x13e>
 8009b82:	2306      	movs	r3, #6
 8009b84:	6063      	str	r3, [r4, #4]
 8009b86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6022      	str	r2, [r4, #0]
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009b96:	ab09      	add	r3, sp, #36	@ 0x24
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	6861      	ldr	r1, [r4, #4]
 8009b9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f7ff fefb 	bl	800999c <__cvt>
 8009ba6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009baa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bac:	4680      	mov	r8, r0
 8009bae:	d129      	bne.n	8009c04 <_printf_float+0x14c>
 8009bb0:	1cc8      	adds	r0, r1, #3
 8009bb2:	db02      	blt.n	8009bba <_printf_float+0x102>
 8009bb4:	6863      	ldr	r3, [r4, #4]
 8009bb6:	4299      	cmp	r1, r3
 8009bb8:	dd41      	ble.n	8009c3e <_printf_float+0x186>
 8009bba:	f1a9 0902 	sub.w	r9, r9, #2
 8009bbe:	fa5f f989 	uxtb.w	r9, r9
 8009bc2:	3901      	subs	r1, #1
 8009bc4:	464a      	mov	r2, r9
 8009bc6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009bca:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bcc:	f7ff ff3a 	bl	8009a44 <__exponent>
 8009bd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bd2:	1813      	adds	r3, r2, r0
 8009bd4:	2a01      	cmp	r2, #1
 8009bd6:	4682      	mov	sl, r0
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	dc02      	bgt.n	8009be2 <_printf_float+0x12a>
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	07d2      	lsls	r2, r2, #31
 8009be0:	d501      	bpl.n	8009be6 <_printf_float+0x12e>
 8009be2:	3301      	adds	r3, #1
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0a6      	beq.n	8009b3c <_printf_float+0x84>
 8009bee:	232d      	movs	r3, #45	@ 0x2d
 8009bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bf4:	e7a2      	b.n	8009b3c <_printf_float+0x84>
 8009bf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bfa:	d1c4      	bne.n	8009b86 <_printf_float+0xce>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1c2      	bne.n	8009b86 <_printf_float+0xce>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7bf      	b.n	8009b84 <_printf_float+0xcc>
 8009c04:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009c08:	d9db      	bls.n	8009bc2 <_printf_float+0x10a>
 8009c0a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009c0e:	d118      	bne.n	8009c42 <_printf_float+0x18a>
 8009c10:	2900      	cmp	r1, #0
 8009c12:	6863      	ldr	r3, [r4, #4]
 8009c14:	dd0b      	ble.n	8009c2e <_printf_float+0x176>
 8009c16:	6121      	str	r1, [r4, #16]
 8009c18:	b913      	cbnz	r3, 8009c20 <_printf_float+0x168>
 8009c1a:	6822      	ldr	r2, [r4, #0]
 8009c1c:	07d0      	lsls	r0, r2, #31
 8009c1e:	d502      	bpl.n	8009c26 <_printf_float+0x16e>
 8009c20:	3301      	adds	r3, #1
 8009c22:	440b      	add	r3, r1
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	e7db      	b.n	8009be6 <_printf_float+0x12e>
 8009c2e:	b913      	cbnz	r3, 8009c36 <_printf_float+0x17e>
 8009c30:	6822      	ldr	r2, [r4, #0]
 8009c32:	07d2      	lsls	r2, r2, #31
 8009c34:	d501      	bpl.n	8009c3a <_printf_float+0x182>
 8009c36:	3302      	adds	r3, #2
 8009c38:	e7f4      	b.n	8009c24 <_printf_float+0x16c>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e7f2      	b.n	8009c24 <_printf_float+0x16c>
 8009c3e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c44:	4299      	cmp	r1, r3
 8009c46:	db05      	blt.n	8009c54 <_printf_float+0x19c>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	6121      	str	r1, [r4, #16]
 8009c4c:	07d8      	lsls	r0, r3, #31
 8009c4e:	d5ea      	bpl.n	8009c26 <_printf_float+0x16e>
 8009c50:	1c4b      	adds	r3, r1, #1
 8009c52:	e7e7      	b.n	8009c24 <_printf_float+0x16c>
 8009c54:	2900      	cmp	r1, #0
 8009c56:	bfd4      	ite	le
 8009c58:	f1c1 0202 	rsble	r2, r1, #2
 8009c5c:	2201      	movgt	r2, #1
 8009c5e:	4413      	add	r3, r2
 8009c60:	e7e0      	b.n	8009c24 <_printf_float+0x16c>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	055a      	lsls	r2, r3, #21
 8009c66:	d407      	bmi.n	8009c78 <_printf_float+0x1c0>
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	4642      	mov	r2, r8
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b8      	blx	r7
 8009c72:	3001      	adds	r0, #1
 8009c74:	d12a      	bne.n	8009ccc <_printf_float+0x214>
 8009c76:	e76b      	b.n	8009b50 <_printf_float+0x98>
 8009c78:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009c7c:	f240 80e0 	bls.w	8009e40 <_printf_float+0x388>
 8009c80:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009c84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8c:	d133      	bne.n	8009cf6 <_printf_float+0x23e>
 8009c8e:	4a38      	ldr	r2, [pc, #224]	@ (8009d70 <_printf_float+0x2b8>)
 8009c90:	2301      	movs	r3, #1
 8009c92:	4631      	mov	r1, r6
 8009c94:	4628      	mov	r0, r5
 8009c96:	47b8      	blx	r7
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f43f af59 	beq.w	8009b50 <_printf_float+0x98>
 8009c9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009ca2:	4543      	cmp	r3, r8
 8009ca4:	db02      	blt.n	8009cac <_printf_float+0x1f4>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	07d8      	lsls	r0, r3, #31
 8009caa:	d50f      	bpl.n	8009ccc <_printf_float+0x214>
 8009cac:	9b05      	ldr	r3, [sp, #20]
 8009cae:	465a      	mov	r2, fp
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f43f af4a 	beq.w	8009b50 <_printf_float+0x98>
 8009cbc:	f04f 0900 	mov.w	r9, #0
 8009cc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cc4:	f104 0a1a 	add.w	sl, r4, #26
 8009cc8:	45c8      	cmp	r8, r9
 8009cca:	dc09      	bgt.n	8009ce0 <_printf_float+0x228>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	079b      	lsls	r3, r3, #30
 8009cd0:	f100 8107 	bmi.w	8009ee2 <_printf_float+0x42a>
 8009cd4:	68e0      	ldr	r0, [r4, #12]
 8009cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cd8:	4298      	cmp	r0, r3
 8009cda:	bfb8      	it	lt
 8009cdc:	4618      	movlt	r0, r3
 8009cde:	e739      	b.n	8009b54 <_printf_float+0x9c>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af30 	beq.w	8009b50 <_printf_float+0x98>
 8009cf0:	f109 0901 	add.w	r9, r9, #1
 8009cf4:	e7e8      	b.n	8009cc8 <_printf_float+0x210>
 8009cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dc3b      	bgt.n	8009d74 <_printf_float+0x2bc>
 8009cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d70 <_printf_float+0x2b8>)
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f af22 	beq.w	8009b50 <_printf_float+0x98>
 8009d0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d10:	ea59 0303 	orrs.w	r3, r9, r3
 8009d14:	d102      	bne.n	8009d1c <_printf_float+0x264>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	07d9      	lsls	r1, r3, #31
 8009d1a:	d5d7      	bpl.n	8009ccc <_printf_float+0x214>
 8009d1c:	9b05      	ldr	r3, [sp, #20]
 8009d1e:	465a      	mov	r2, fp
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f af12 	beq.w	8009b50 <_printf_float+0x98>
 8009d2c:	f04f 0a00 	mov.w	sl, #0
 8009d30:	f104 0b1a 	add.w	fp, r4, #26
 8009d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d36:	425b      	negs	r3, r3
 8009d38:	4553      	cmp	r3, sl
 8009d3a:	dc01      	bgt.n	8009d40 <_printf_float+0x288>
 8009d3c:	464b      	mov	r3, r9
 8009d3e:	e794      	b.n	8009c6a <_printf_float+0x1b2>
 8009d40:	2301      	movs	r3, #1
 8009d42:	465a      	mov	r2, fp
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f af00 	beq.w	8009b50 <_printf_float+0x98>
 8009d50:	f10a 0a01 	add.w	sl, sl, #1
 8009d54:	e7ee      	b.n	8009d34 <_printf_float+0x27c>
 8009d56:	bf00      	nop
 8009d58:	ffffffff 	.word	0xffffffff
 8009d5c:	7fefffff 	.word	0x7fefffff
 8009d60:	0800c3d0 	.word	0x0800c3d0
 8009d64:	0800c3cc 	.word	0x0800c3cc
 8009d68:	0800c3d8 	.word	0x0800c3d8
 8009d6c:	0800c3d4 	.word	0x0800c3d4
 8009d70:	0800c3dc 	.word	0x0800c3dc
 8009d74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d7a:	4553      	cmp	r3, sl
 8009d7c:	bfa8      	it	ge
 8009d7e:	4653      	movge	r3, sl
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	4699      	mov	r9, r3
 8009d84:	dc37      	bgt.n	8009df6 <_printf_float+0x33e>
 8009d86:	2300      	movs	r3, #0
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d8e:	f104 021a 	add.w	r2, r4, #26
 8009d92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d94:	9907      	ldr	r1, [sp, #28]
 8009d96:	9306      	str	r3, [sp, #24]
 8009d98:	eba3 0309 	sub.w	r3, r3, r9
 8009d9c:	428b      	cmp	r3, r1
 8009d9e:	dc31      	bgt.n	8009e04 <_printf_float+0x34c>
 8009da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da2:	459a      	cmp	sl, r3
 8009da4:	dc3b      	bgt.n	8009e1e <_printf_float+0x366>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	07da      	lsls	r2, r3, #31
 8009daa:	d438      	bmi.n	8009e1e <_printf_float+0x366>
 8009dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dae:	ebaa 0903 	sub.w	r9, sl, r3
 8009db2:	9b06      	ldr	r3, [sp, #24]
 8009db4:	ebaa 0303 	sub.w	r3, sl, r3
 8009db8:	4599      	cmp	r9, r3
 8009dba:	bfa8      	it	ge
 8009dbc:	4699      	movge	r9, r3
 8009dbe:	f1b9 0f00 	cmp.w	r9, #0
 8009dc2:	dc34      	bgt.n	8009e2e <_printf_float+0x376>
 8009dc4:	f04f 0800 	mov.w	r8, #0
 8009dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dcc:	f104 0b1a 	add.w	fp, r4, #26
 8009dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8009dd6:	eba3 0309 	sub.w	r3, r3, r9
 8009dda:	4543      	cmp	r3, r8
 8009ddc:	f77f af76 	ble.w	8009ccc <_printf_float+0x214>
 8009de0:	2301      	movs	r3, #1
 8009de2:	465a      	mov	r2, fp
 8009de4:	4631      	mov	r1, r6
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	f43f aeb0 	beq.w	8009b50 <_printf_float+0x98>
 8009df0:	f108 0801 	add.w	r8, r8, #1
 8009df4:	e7ec      	b.n	8009dd0 <_printf_float+0x318>
 8009df6:	4642      	mov	r2, r8
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d1c1      	bne.n	8009d86 <_printf_float+0x2ce>
 8009e02:	e6a5      	b.n	8009b50 <_printf_float+0x98>
 8009e04:	2301      	movs	r3, #1
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	9206      	str	r2, [sp, #24]
 8009e0c:	47b8      	blx	r7
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f ae9e 	beq.w	8009b50 <_printf_float+0x98>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	9a06      	ldr	r2, [sp, #24]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9307      	str	r3, [sp, #28]
 8009e1c:	e7b9      	b.n	8009d92 <_printf_float+0x2da>
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	465a      	mov	r2, fp
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d1bf      	bne.n	8009dac <_printf_float+0x2f4>
 8009e2c:	e690      	b.n	8009b50 <_printf_float+0x98>
 8009e2e:	9a06      	ldr	r2, [sp, #24]
 8009e30:	464b      	mov	r3, r9
 8009e32:	4442      	add	r2, r8
 8009e34:	4631      	mov	r1, r6
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b8      	blx	r7
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d1c2      	bne.n	8009dc4 <_printf_float+0x30c>
 8009e3e:	e687      	b.n	8009b50 <_printf_float+0x98>
 8009e40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009e44:	f1b9 0f01 	cmp.w	r9, #1
 8009e48:	dc01      	bgt.n	8009e4e <_printf_float+0x396>
 8009e4a:	07db      	lsls	r3, r3, #31
 8009e4c:	d536      	bpl.n	8009ebc <_printf_float+0x404>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4642      	mov	r2, r8
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f43f ae79 	beq.w	8009b50 <_printf_float+0x98>
 8009e5e:	9b05      	ldr	r3, [sp, #20]
 8009e60:	465a      	mov	r2, fp
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f43f ae71 	beq.w	8009b50 <_printf_float+0x98>
 8009e6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009e72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e7e:	d018      	beq.n	8009eb2 <_printf_float+0x3fa>
 8009e80:	464b      	mov	r3, r9
 8009e82:	f108 0201 	add.w	r2, r8, #1
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d10c      	bne.n	8009eaa <_printf_float+0x3f2>
 8009e90:	e65e      	b.n	8009b50 <_printf_float+0x98>
 8009e92:	2301      	movs	r3, #1
 8009e94:	465a      	mov	r2, fp
 8009e96:	4631      	mov	r1, r6
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f43f ae57 	beq.w	8009b50 <_printf_float+0x98>
 8009ea2:	f108 0801 	add.w	r8, r8, #1
 8009ea6:	45c8      	cmp	r8, r9
 8009ea8:	dbf3      	blt.n	8009e92 <_printf_float+0x3da>
 8009eaa:	4653      	mov	r3, sl
 8009eac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009eb0:	e6dc      	b.n	8009c6c <_printf_float+0x1b4>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	f104 0b1a 	add.w	fp, r4, #26
 8009eba:	e7f4      	b.n	8009ea6 <_printf_float+0x3ee>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4642      	mov	r2, r8
 8009ec0:	e7e1      	b.n	8009e86 <_printf_float+0x3ce>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f43f ae3f 	beq.w	8009b50 <_printf_float+0x98>
 8009ed2:	f108 0801 	add.w	r8, r8, #1
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009eda:	1a5b      	subs	r3, r3, r1
 8009edc:	4543      	cmp	r3, r8
 8009ede:	dcf0      	bgt.n	8009ec2 <_printf_float+0x40a>
 8009ee0:	e6f8      	b.n	8009cd4 <_printf_float+0x21c>
 8009ee2:	f04f 0800 	mov.w	r8, #0
 8009ee6:	f104 0919 	add.w	r9, r4, #25
 8009eea:	e7f4      	b.n	8009ed6 <_printf_float+0x41e>

08009eec <_printf_common>:
 8009eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	4616      	mov	r6, r2
 8009ef2:	4698      	mov	r8, r3
 8009ef4:	688a      	ldr	r2, [r1, #8]
 8009ef6:	690b      	ldr	r3, [r1, #16]
 8009ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009efc:	4293      	cmp	r3, r2
 8009efe:	bfb8      	it	lt
 8009f00:	4613      	movlt	r3, r2
 8009f02:	6033      	str	r3, [r6, #0]
 8009f04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f08:	4607      	mov	r7, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	b10a      	cbz	r2, 8009f12 <_printf_common+0x26>
 8009f0e:	3301      	adds	r3, #1
 8009f10:	6033      	str	r3, [r6, #0]
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	0699      	lsls	r1, r3, #26
 8009f16:	bf42      	ittt	mi
 8009f18:	6833      	ldrmi	r3, [r6, #0]
 8009f1a:	3302      	addmi	r3, #2
 8009f1c:	6033      	strmi	r3, [r6, #0]
 8009f1e:	6825      	ldr	r5, [r4, #0]
 8009f20:	f015 0506 	ands.w	r5, r5, #6
 8009f24:	d106      	bne.n	8009f34 <_printf_common+0x48>
 8009f26:	f104 0a19 	add.w	sl, r4, #25
 8009f2a:	68e3      	ldr	r3, [r4, #12]
 8009f2c:	6832      	ldr	r2, [r6, #0]
 8009f2e:	1a9b      	subs	r3, r3, r2
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	dc26      	bgt.n	8009f82 <_printf_common+0x96>
 8009f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	3b00      	subs	r3, #0
 8009f3c:	bf18      	it	ne
 8009f3e:	2301      	movne	r3, #1
 8009f40:	0692      	lsls	r2, r2, #26
 8009f42:	d42b      	bmi.n	8009f9c <_printf_common+0xb0>
 8009f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f48:	4641      	mov	r1, r8
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	47c8      	blx	r9
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d01e      	beq.n	8009f90 <_printf_common+0xa4>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	6922      	ldr	r2, [r4, #16]
 8009f56:	f003 0306 	and.w	r3, r3, #6
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	bf02      	ittt	eq
 8009f5e:	68e5      	ldreq	r5, [r4, #12]
 8009f60:	6833      	ldreq	r3, [r6, #0]
 8009f62:	1aed      	subeq	r5, r5, r3
 8009f64:	68a3      	ldr	r3, [r4, #8]
 8009f66:	bf0c      	ite	eq
 8009f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f6c:	2500      	movne	r5, #0
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	bfc4      	itt	gt
 8009f72:	1a9b      	subgt	r3, r3, r2
 8009f74:	18ed      	addgt	r5, r5, r3
 8009f76:	2600      	movs	r6, #0
 8009f78:	341a      	adds	r4, #26
 8009f7a:	42b5      	cmp	r5, r6
 8009f7c:	d11a      	bne.n	8009fb4 <_printf_common+0xc8>
 8009f7e:	2000      	movs	r0, #0
 8009f80:	e008      	b.n	8009f94 <_printf_common+0xa8>
 8009f82:	2301      	movs	r3, #1
 8009f84:	4652      	mov	r2, sl
 8009f86:	4641      	mov	r1, r8
 8009f88:	4638      	mov	r0, r7
 8009f8a:	47c8      	blx	r9
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d103      	bne.n	8009f98 <_printf_common+0xac>
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f98:	3501      	adds	r5, #1
 8009f9a:	e7c6      	b.n	8009f2a <_printf_common+0x3e>
 8009f9c:	18e1      	adds	r1, r4, r3
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	2030      	movs	r0, #48	@ 0x30
 8009fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fa6:	4422      	add	r2, r4
 8009fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fb0:	3302      	adds	r3, #2
 8009fb2:	e7c7      	b.n	8009f44 <_printf_common+0x58>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4641      	mov	r1, r8
 8009fba:	4638      	mov	r0, r7
 8009fbc:	47c8      	blx	r9
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	d0e6      	beq.n	8009f90 <_printf_common+0xa4>
 8009fc2:	3601      	adds	r6, #1
 8009fc4:	e7d9      	b.n	8009f7a <_printf_common+0x8e>
	...

08009fc8 <_printf_i>:
 8009fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fcc:	7e0f      	ldrb	r7, [r1, #24]
 8009fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fd0:	2f78      	cmp	r7, #120	@ 0x78
 8009fd2:	4691      	mov	r9, r2
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	469a      	mov	sl, r3
 8009fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fde:	d807      	bhi.n	8009ff0 <_printf_i+0x28>
 8009fe0:	2f62      	cmp	r7, #98	@ 0x62
 8009fe2:	d80a      	bhi.n	8009ffa <_printf_i+0x32>
 8009fe4:	2f00      	cmp	r7, #0
 8009fe6:	f000 80d1 	beq.w	800a18c <_printf_i+0x1c4>
 8009fea:	2f58      	cmp	r7, #88	@ 0x58
 8009fec:	f000 80b8 	beq.w	800a160 <_printf_i+0x198>
 8009ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ff8:	e03a      	b.n	800a070 <_printf_i+0xa8>
 8009ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ffe:	2b15      	cmp	r3, #21
 800a000:	d8f6      	bhi.n	8009ff0 <_printf_i+0x28>
 800a002:	a101      	add	r1, pc, #4	@ (adr r1, 800a008 <_printf_i+0x40>)
 800a004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a008:	0800a061 	.word	0x0800a061
 800a00c:	0800a075 	.word	0x0800a075
 800a010:	08009ff1 	.word	0x08009ff1
 800a014:	08009ff1 	.word	0x08009ff1
 800a018:	08009ff1 	.word	0x08009ff1
 800a01c:	08009ff1 	.word	0x08009ff1
 800a020:	0800a075 	.word	0x0800a075
 800a024:	08009ff1 	.word	0x08009ff1
 800a028:	08009ff1 	.word	0x08009ff1
 800a02c:	08009ff1 	.word	0x08009ff1
 800a030:	08009ff1 	.word	0x08009ff1
 800a034:	0800a173 	.word	0x0800a173
 800a038:	0800a09f 	.word	0x0800a09f
 800a03c:	0800a12d 	.word	0x0800a12d
 800a040:	08009ff1 	.word	0x08009ff1
 800a044:	08009ff1 	.word	0x08009ff1
 800a048:	0800a195 	.word	0x0800a195
 800a04c:	08009ff1 	.word	0x08009ff1
 800a050:	0800a09f 	.word	0x0800a09f
 800a054:	08009ff1 	.word	0x08009ff1
 800a058:	08009ff1 	.word	0x08009ff1
 800a05c:	0800a135 	.word	0x0800a135
 800a060:	6833      	ldr	r3, [r6, #0]
 800a062:	1d1a      	adds	r2, r3, #4
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6032      	str	r2, [r6, #0]
 800a068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a06c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a070:	2301      	movs	r3, #1
 800a072:	e09c      	b.n	800a1ae <_printf_i+0x1e6>
 800a074:	6833      	ldr	r3, [r6, #0]
 800a076:	6820      	ldr	r0, [r4, #0]
 800a078:	1d19      	adds	r1, r3, #4
 800a07a:	6031      	str	r1, [r6, #0]
 800a07c:	0606      	lsls	r6, r0, #24
 800a07e:	d501      	bpl.n	800a084 <_printf_i+0xbc>
 800a080:	681d      	ldr	r5, [r3, #0]
 800a082:	e003      	b.n	800a08c <_printf_i+0xc4>
 800a084:	0645      	lsls	r5, r0, #25
 800a086:	d5fb      	bpl.n	800a080 <_printf_i+0xb8>
 800a088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	da03      	bge.n	800a098 <_printf_i+0xd0>
 800a090:	232d      	movs	r3, #45	@ 0x2d
 800a092:	426d      	negs	r5, r5
 800a094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a098:	4858      	ldr	r0, [pc, #352]	@ (800a1fc <_printf_i+0x234>)
 800a09a:	230a      	movs	r3, #10
 800a09c:	e011      	b.n	800a0c2 <_printf_i+0xfa>
 800a09e:	6821      	ldr	r1, [r4, #0]
 800a0a0:	6833      	ldr	r3, [r6, #0]
 800a0a2:	0608      	lsls	r0, r1, #24
 800a0a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0a8:	d402      	bmi.n	800a0b0 <_printf_i+0xe8>
 800a0aa:	0649      	lsls	r1, r1, #25
 800a0ac:	bf48      	it	mi
 800a0ae:	b2ad      	uxthmi	r5, r5
 800a0b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0b2:	4852      	ldr	r0, [pc, #328]	@ (800a1fc <_printf_i+0x234>)
 800a0b4:	6033      	str	r3, [r6, #0]
 800a0b6:	bf14      	ite	ne
 800a0b8:	230a      	movne	r3, #10
 800a0ba:	2308      	moveq	r3, #8
 800a0bc:	2100      	movs	r1, #0
 800a0be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0c2:	6866      	ldr	r6, [r4, #4]
 800a0c4:	60a6      	str	r6, [r4, #8]
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	db05      	blt.n	800a0d6 <_printf_i+0x10e>
 800a0ca:	6821      	ldr	r1, [r4, #0]
 800a0cc:	432e      	orrs	r6, r5
 800a0ce:	f021 0104 	bic.w	r1, r1, #4
 800a0d2:	6021      	str	r1, [r4, #0]
 800a0d4:	d04b      	beq.n	800a16e <_printf_i+0x1a6>
 800a0d6:	4616      	mov	r6, r2
 800a0d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0dc:	fb03 5711 	mls	r7, r3, r1, r5
 800a0e0:	5dc7      	ldrb	r7, [r0, r7]
 800a0e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0e6:	462f      	mov	r7, r5
 800a0e8:	42bb      	cmp	r3, r7
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	d9f4      	bls.n	800a0d8 <_printf_i+0x110>
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	d10b      	bne.n	800a10a <_printf_i+0x142>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	07df      	lsls	r7, r3, #31
 800a0f6:	d508      	bpl.n	800a10a <_printf_i+0x142>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	6861      	ldr	r1, [r4, #4]
 800a0fc:	4299      	cmp	r1, r3
 800a0fe:	bfde      	ittt	le
 800a100:	2330      	movle	r3, #48	@ 0x30
 800a102:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a106:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a10a:	1b92      	subs	r2, r2, r6
 800a10c:	6122      	str	r2, [r4, #16]
 800a10e:	f8cd a000 	str.w	sl, [sp]
 800a112:	464b      	mov	r3, r9
 800a114:	aa03      	add	r2, sp, #12
 800a116:	4621      	mov	r1, r4
 800a118:	4640      	mov	r0, r8
 800a11a:	f7ff fee7 	bl	8009eec <_printf_common>
 800a11e:	3001      	adds	r0, #1
 800a120:	d14a      	bne.n	800a1b8 <_printf_i+0x1f0>
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	b004      	add	sp, #16
 800a128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	f043 0320 	orr.w	r3, r3, #32
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	4832      	ldr	r0, [pc, #200]	@ (800a200 <_printf_i+0x238>)
 800a136:	2778      	movs	r7, #120	@ 0x78
 800a138:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	6831      	ldr	r1, [r6, #0]
 800a140:	061f      	lsls	r7, r3, #24
 800a142:	f851 5b04 	ldr.w	r5, [r1], #4
 800a146:	d402      	bmi.n	800a14e <_printf_i+0x186>
 800a148:	065f      	lsls	r7, r3, #25
 800a14a:	bf48      	it	mi
 800a14c:	b2ad      	uxthmi	r5, r5
 800a14e:	6031      	str	r1, [r6, #0]
 800a150:	07d9      	lsls	r1, r3, #31
 800a152:	bf44      	itt	mi
 800a154:	f043 0320 	orrmi.w	r3, r3, #32
 800a158:	6023      	strmi	r3, [r4, #0]
 800a15a:	b11d      	cbz	r5, 800a164 <_printf_i+0x19c>
 800a15c:	2310      	movs	r3, #16
 800a15e:	e7ad      	b.n	800a0bc <_printf_i+0xf4>
 800a160:	4826      	ldr	r0, [pc, #152]	@ (800a1fc <_printf_i+0x234>)
 800a162:	e7e9      	b.n	800a138 <_printf_i+0x170>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	f023 0320 	bic.w	r3, r3, #32
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	e7f6      	b.n	800a15c <_printf_i+0x194>
 800a16e:	4616      	mov	r6, r2
 800a170:	e7bd      	b.n	800a0ee <_printf_i+0x126>
 800a172:	6833      	ldr	r3, [r6, #0]
 800a174:	6825      	ldr	r5, [r4, #0]
 800a176:	6961      	ldr	r1, [r4, #20]
 800a178:	1d18      	adds	r0, r3, #4
 800a17a:	6030      	str	r0, [r6, #0]
 800a17c:	062e      	lsls	r6, r5, #24
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	d501      	bpl.n	800a186 <_printf_i+0x1be>
 800a182:	6019      	str	r1, [r3, #0]
 800a184:	e002      	b.n	800a18c <_printf_i+0x1c4>
 800a186:	0668      	lsls	r0, r5, #25
 800a188:	d5fb      	bpl.n	800a182 <_printf_i+0x1ba>
 800a18a:	8019      	strh	r1, [r3, #0]
 800a18c:	2300      	movs	r3, #0
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	4616      	mov	r6, r2
 800a192:	e7bc      	b.n	800a10e <_printf_i+0x146>
 800a194:	6833      	ldr	r3, [r6, #0]
 800a196:	1d1a      	adds	r2, r3, #4
 800a198:	6032      	str	r2, [r6, #0]
 800a19a:	681e      	ldr	r6, [r3, #0]
 800a19c:	6862      	ldr	r2, [r4, #4]
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7f6 f8c5 	bl	8000330 <memchr>
 800a1a6:	b108      	cbz	r0, 800a1ac <_printf_i+0x1e4>
 800a1a8:	1b80      	subs	r0, r0, r6
 800a1aa:	6060      	str	r0, [r4, #4]
 800a1ac:	6863      	ldr	r3, [r4, #4]
 800a1ae:	6123      	str	r3, [r4, #16]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1b6:	e7aa      	b.n	800a10e <_printf_i+0x146>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	4632      	mov	r2, r6
 800a1bc:	4649      	mov	r1, r9
 800a1be:	4640      	mov	r0, r8
 800a1c0:	47d0      	blx	sl
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d0ad      	beq.n	800a122 <_printf_i+0x15a>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	079b      	lsls	r3, r3, #30
 800a1ca:	d413      	bmi.n	800a1f4 <_printf_i+0x22c>
 800a1cc:	68e0      	ldr	r0, [r4, #12]
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	4298      	cmp	r0, r3
 800a1d2:	bfb8      	it	lt
 800a1d4:	4618      	movlt	r0, r3
 800a1d6:	e7a6      	b.n	800a126 <_printf_i+0x15e>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4632      	mov	r2, r6
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4640      	mov	r0, r8
 800a1e0:	47d0      	blx	sl
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d09d      	beq.n	800a122 <_printf_i+0x15a>
 800a1e6:	3501      	adds	r5, #1
 800a1e8:	68e3      	ldr	r3, [r4, #12]
 800a1ea:	9903      	ldr	r1, [sp, #12]
 800a1ec:	1a5b      	subs	r3, r3, r1
 800a1ee:	42ab      	cmp	r3, r5
 800a1f0:	dcf2      	bgt.n	800a1d8 <_printf_i+0x210>
 800a1f2:	e7eb      	b.n	800a1cc <_printf_i+0x204>
 800a1f4:	2500      	movs	r5, #0
 800a1f6:	f104 0619 	add.w	r6, r4, #25
 800a1fa:	e7f5      	b.n	800a1e8 <_printf_i+0x220>
 800a1fc:	0800c3de 	.word	0x0800c3de
 800a200:	0800c3ef 	.word	0x0800c3ef

0800a204 <std>:
 800a204:	2300      	movs	r3, #0
 800a206:	b510      	push	{r4, lr}
 800a208:	4604      	mov	r4, r0
 800a20a:	e9c0 3300 	strd	r3, r3, [r0]
 800a20e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a212:	6083      	str	r3, [r0, #8]
 800a214:	8181      	strh	r1, [r0, #12]
 800a216:	6643      	str	r3, [r0, #100]	@ 0x64
 800a218:	81c2      	strh	r2, [r0, #14]
 800a21a:	6183      	str	r3, [r0, #24]
 800a21c:	4619      	mov	r1, r3
 800a21e:	2208      	movs	r2, #8
 800a220:	305c      	adds	r0, #92	@ 0x5c
 800a222:	f000 f9f9 	bl	800a618 <memset>
 800a226:	4b0d      	ldr	r3, [pc, #52]	@ (800a25c <std+0x58>)
 800a228:	6263      	str	r3, [r4, #36]	@ 0x24
 800a22a:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <std+0x5c>)
 800a22c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a22e:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <std+0x60>)
 800a230:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a232:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <std+0x64>)
 800a234:	6323      	str	r3, [r4, #48]	@ 0x30
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <std+0x68>)
 800a238:	6224      	str	r4, [r4, #32]
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d006      	beq.n	800a24c <std+0x48>
 800a23e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a242:	4294      	cmp	r4, r2
 800a244:	d002      	beq.n	800a24c <std+0x48>
 800a246:	33d0      	adds	r3, #208	@ 0xd0
 800a248:	429c      	cmp	r4, r3
 800a24a:	d105      	bne.n	800a258 <std+0x54>
 800a24c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a254:	f000 ba5c 	b.w	800a710 <__retarget_lock_init_recursive>
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	bf00      	nop
 800a25c:	0800a469 	.word	0x0800a469
 800a260:	0800a48b 	.word	0x0800a48b
 800a264:	0800a4c3 	.word	0x0800a4c3
 800a268:	0800a4e7 	.word	0x0800a4e7
 800a26c:	24000628 	.word	0x24000628

0800a270 <stdio_exit_handler>:
 800a270:	4a02      	ldr	r2, [pc, #8]	@ (800a27c <stdio_exit_handler+0xc>)
 800a272:	4903      	ldr	r1, [pc, #12]	@ (800a280 <stdio_exit_handler+0x10>)
 800a274:	4803      	ldr	r0, [pc, #12]	@ (800a284 <stdio_exit_handler+0x14>)
 800a276:	f000 b869 	b.w	800a34c <_fwalk_sglue>
 800a27a:	bf00      	nop
 800a27c:	24000010 	.word	0x24000010
 800a280:	0800bf65 	.word	0x0800bf65
 800a284:	24000020 	.word	0x24000020

0800a288 <cleanup_stdio>:
 800a288:	6841      	ldr	r1, [r0, #4]
 800a28a:	4b0c      	ldr	r3, [pc, #48]	@ (800a2bc <cleanup_stdio+0x34>)
 800a28c:	4299      	cmp	r1, r3
 800a28e:	b510      	push	{r4, lr}
 800a290:	4604      	mov	r4, r0
 800a292:	d001      	beq.n	800a298 <cleanup_stdio+0x10>
 800a294:	f001 fe66 	bl	800bf64 <_fflush_r>
 800a298:	68a1      	ldr	r1, [r4, #8]
 800a29a:	4b09      	ldr	r3, [pc, #36]	@ (800a2c0 <cleanup_stdio+0x38>)
 800a29c:	4299      	cmp	r1, r3
 800a29e:	d002      	beq.n	800a2a6 <cleanup_stdio+0x1e>
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f001 fe5f 	bl	800bf64 <_fflush_r>
 800a2a6:	68e1      	ldr	r1, [r4, #12]
 800a2a8:	4b06      	ldr	r3, [pc, #24]	@ (800a2c4 <cleanup_stdio+0x3c>)
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	d004      	beq.n	800a2b8 <cleanup_stdio+0x30>
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b4:	f001 be56 	b.w	800bf64 <_fflush_r>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	24000628 	.word	0x24000628
 800a2c0:	24000690 	.word	0x24000690
 800a2c4:	240006f8 	.word	0x240006f8

0800a2c8 <global_stdio_init.part.0>:
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <global_stdio_init.part.0+0x30>)
 800a2cc:	4c0b      	ldr	r4, [pc, #44]	@ (800a2fc <global_stdio_init.part.0+0x34>)
 800a2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a300 <global_stdio_init.part.0+0x38>)
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2104      	movs	r1, #4
 800a2d8:	f7ff ff94 	bl	800a204 <std>
 800a2dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	2109      	movs	r1, #9
 800a2e4:	f7ff ff8e 	bl	800a204 <std>
 800a2e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f2:	2112      	movs	r1, #18
 800a2f4:	f7ff bf86 	b.w	800a204 <std>
 800a2f8:	24000760 	.word	0x24000760
 800a2fc:	24000628 	.word	0x24000628
 800a300:	0800a271 	.word	0x0800a271

0800a304 <__sfp_lock_acquire>:
 800a304:	4801      	ldr	r0, [pc, #4]	@ (800a30c <__sfp_lock_acquire+0x8>)
 800a306:	f000 ba04 	b.w	800a712 <__retarget_lock_acquire_recursive>
 800a30a:	bf00      	nop
 800a30c:	24000769 	.word	0x24000769

0800a310 <__sfp_lock_release>:
 800a310:	4801      	ldr	r0, [pc, #4]	@ (800a318 <__sfp_lock_release+0x8>)
 800a312:	f000 b9ff 	b.w	800a714 <__retarget_lock_release_recursive>
 800a316:	bf00      	nop
 800a318:	24000769 	.word	0x24000769

0800a31c <__sinit>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	4604      	mov	r4, r0
 800a320:	f7ff fff0 	bl	800a304 <__sfp_lock_acquire>
 800a324:	6a23      	ldr	r3, [r4, #32]
 800a326:	b11b      	cbz	r3, 800a330 <__sinit+0x14>
 800a328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a32c:	f7ff bff0 	b.w	800a310 <__sfp_lock_release>
 800a330:	4b04      	ldr	r3, [pc, #16]	@ (800a344 <__sinit+0x28>)
 800a332:	6223      	str	r3, [r4, #32]
 800a334:	4b04      	ldr	r3, [pc, #16]	@ (800a348 <__sinit+0x2c>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1f5      	bne.n	800a328 <__sinit+0xc>
 800a33c:	f7ff ffc4 	bl	800a2c8 <global_stdio_init.part.0>
 800a340:	e7f2      	b.n	800a328 <__sinit+0xc>
 800a342:	bf00      	nop
 800a344:	0800a289 	.word	0x0800a289
 800a348:	24000760 	.word	0x24000760

0800a34c <_fwalk_sglue>:
 800a34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a350:	4607      	mov	r7, r0
 800a352:	4688      	mov	r8, r1
 800a354:	4614      	mov	r4, r2
 800a356:	2600      	movs	r6, #0
 800a358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a35c:	f1b9 0901 	subs.w	r9, r9, #1
 800a360:	d505      	bpl.n	800a36e <_fwalk_sglue+0x22>
 800a362:	6824      	ldr	r4, [r4, #0]
 800a364:	2c00      	cmp	r4, #0
 800a366:	d1f7      	bne.n	800a358 <_fwalk_sglue+0xc>
 800a368:	4630      	mov	r0, r6
 800a36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d907      	bls.n	800a384 <_fwalk_sglue+0x38>
 800a374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a378:	3301      	adds	r3, #1
 800a37a:	d003      	beq.n	800a384 <_fwalk_sglue+0x38>
 800a37c:	4629      	mov	r1, r5
 800a37e:	4638      	mov	r0, r7
 800a380:	47c0      	blx	r8
 800a382:	4306      	orrs	r6, r0
 800a384:	3568      	adds	r5, #104	@ 0x68
 800a386:	e7e9      	b.n	800a35c <_fwalk_sglue+0x10>

0800a388 <iprintf>:
 800a388:	b40f      	push	{r0, r1, r2, r3}
 800a38a:	b507      	push	{r0, r1, r2, lr}
 800a38c:	4906      	ldr	r1, [pc, #24]	@ (800a3a8 <iprintf+0x20>)
 800a38e:	ab04      	add	r3, sp, #16
 800a390:	6808      	ldr	r0, [r1, #0]
 800a392:	f853 2b04 	ldr.w	r2, [r3], #4
 800a396:	6881      	ldr	r1, [r0, #8]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	f001 fc47 	bl	800bc2c <_vfiprintf_r>
 800a39e:	b003      	add	sp, #12
 800a3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a4:	b004      	add	sp, #16
 800a3a6:	4770      	bx	lr
 800a3a8:	2400001c 	.word	0x2400001c

0800a3ac <_puts_r>:
 800a3ac:	6a03      	ldr	r3, [r0, #32]
 800a3ae:	b570      	push	{r4, r5, r6, lr}
 800a3b0:	6884      	ldr	r4, [r0, #8]
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	460e      	mov	r6, r1
 800a3b6:	b90b      	cbnz	r3, 800a3bc <_puts_r+0x10>
 800a3b8:	f7ff ffb0 	bl	800a31c <__sinit>
 800a3bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3be:	07db      	lsls	r3, r3, #31
 800a3c0:	d405      	bmi.n	800a3ce <_puts_r+0x22>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	0598      	lsls	r0, r3, #22
 800a3c6:	d402      	bmi.n	800a3ce <_puts_r+0x22>
 800a3c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ca:	f000 f9a2 	bl	800a712 <__retarget_lock_acquire_recursive>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	0719      	lsls	r1, r3, #28
 800a3d2:	d502      	bpl.n	800a3da <_puts_r+0x2e>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d135      	bne.n	800a446 <_puts_r+0x9a>
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 f8c5 	bl	800a56c <__swsetup_r>
 800a3e2:	b380      	cbz	r0, 800a446 <_puts_r+0x9a>
 800a3e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a3e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3ea:	07da      	lsls	r2, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_puts_r+0x4e>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_puts_r+0x4e>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f6:	f000 f98d 	bl	800a714 <__retarget_lock_release_recursive>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da04      	bge.n	800a40c <_puts_r+0x60>
 800a402:	69a2      	ldr	r2, [r4, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	dc17      	bgt.n	800a438 <_puts_r+0x8c>
 800a408:	290a      	cmp	r1, #10
 800a40a:	d015      	beq.n	800a438 <_puts_r+0x8c>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	6022      	str	r2, [r4, #0]
 800a412:	7019      	strb	r1, [r3, #0]
 800a414:	68a3      	ldr	r3, [r4, #8]
 800a416:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a41a:	3b01      	subs	r3, #1
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	2900      	cmp	r1, #0
 800a420:	d1ed      	bne.n	800a3fe <_puts_r+0x52>
 800a422:	2b00      	cmp	r3, #0
 800a424:	da11      	bge.n	800a44a <_puts_r+0x9e>
 800a426:	4622      	mov	r2, r4
 800a428:	210a      	movs	r1, #10
 800a42a:	4628      	mov	r0, r5
 800a42c:	f000 f85f 	bl	800a4ee <__swbuf_r>
 800a430:	3001      	adds	r0, #1
 800a432:	d0d7      	beq.n	800a3e4 <_puts_r+0x38>
 800a434:	250a      	movs	r5, #10
 800a436:	e7d7      	b.n	800a3e8 <_puts_r+0x3c>
 800a438:	4622      	mov	r2, r4
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 f857 	bl	800a4ee <__swbuf_r>
 800a440:	3001      	adds	r0, #1
 800a442:	d1e7      	bne.n	800a414 <_puts_r+0x68>
 800a444:	e7ce      	b.n	800a3e4 <_puts_r+0x38>
 800a446:	3e01      	subs	r6, #1
 800a448:	e7e4      	b.n	800a414 <_puts_r+0x68>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	6022      	str	r2, [r4, #0]
 800a450:	220a      	movs	r2, #10
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e7ee      	b.n	800a434 <_puts_r+0x88>
	...

0800a458 <puts>:
 800a458:	4b02      	ldr	r3, [pc, #8]	@ (800a464 <puts+0xc>)
 800a45a:	4601      	mov	r1, r0
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	f7ff bfa5 	b.w	800a3ac <_puts_r>
 800a462:	bf00      	nop
 800a464:	2400001c 	.word	0x2400001c

0800a468 <__sread>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a470:	f000 f900 	bl	800a674 <_read_r>
 800a474:	2800      	cmp	r0, #0
 800a476:	bfab      	itete	ge
 800a478:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a47a:	89a3      	ldrhlt	r3, [r4, #12]
 800a47c:	181b      	addge	r3, r3, r0
 800a47e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a482:	bfac      	ite	ge
 800a484:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a486:	81a3      	strhlt	r3, [r4, #12]
 800a488:	bd10      	pop	{r4, pc}

0800a48a <__swrite>:
 800a48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a48e:	461f      	mov	r7, r3
 800a490:	898b      	ldrh	r3, [r1, #12]
 800a492:	05db      	lsls	r3, r3, #23
 800a494:	4605      	mov	r5, r0
 800a496:	460c      	mov	r4, r1
 800a498:	4616      	mov	r6, r2
 800a49a:	d505      	bpl.n	800a4a8 <__swrite+0x1e>
 800a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f000 f8d4 	bl	800a650 <_lseek_r>
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4be:	f000 b8eb 	b.w	800a698 <_write_r>

0800a4c2 <__sseek>:
 800a4c2:	b510      	push	{r4, lr}
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ca:	f000 f8c1 	bl	800a650 <_lseek_r>
 800a4ce:	1c43      	adds	r3, r0, #1
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	bf15      	itete	ne
 800a4d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4de:	81a3      	strheq	r3, [r4, #12]
 800a4e0:	bf18      	it	ne
 800a4e2:	81a3      	strhne	r3, [r4, #12]
 800a4e4:	bd10      	pop	{r4, pc}

0800a4e6 <__sclose>:
 800a4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ea:	f000 b8a1 	b.w	800a630 <_close_r>

0800a4ee <__swbuf_r>:
 800a4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f0:	460e      	mov	r6, r1
 800a4f2:	4614      	mov	r4, r2
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	b118      	cbz	r0, 800a500 <__swbuf_r+0x12>
 800a4f8:	6a03      	ldr	r3, [r0, #32]
 800a4fa:	b90b      	cbnz	r3, 800a500 <__swbuf_r+0x12>
 800a4fc:	f7ff ff0e 	bl	800a31c <__sinit>
 800a500:	69a3      	ldr	r3, [r4, #24]
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	071a      	lsls	r2, r3, #28
 800a508:	d501      	bpl.n	800a50e <__swbuf_r+0x20>
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	b943      	cbnz	r3, 800a520 <__swbuf_r+0x32>
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f000 f82b 	bl	800a56c <__swsetup_r>
 800a516:	b118      	cbz	r0, 800a520 <__swbuf_r+0x32>
 800a518:	f04f 37ff 	mov.w	r7, #4294967295
 800a51c:	4638      	mov	r0, r7
 800a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	6922      	ldr	r2, [r4, #16]
 800a524:	1a98      	subs	r0, r3, r2
 800a526:	6963      	ldr	r3, [r4, #20]
 800a528:	b2f6      	uxtb	r6, r6
 800a52a:	4283      	cmp	r3, r0
 800a52c:	4637      	mov	r7, r6
 800a52e:	dc05      	bgt.n	800a53c <__swbuf_r+0x4e>
 800a530:	4621      	mov	r1, r4
 800a532:	4628      	mov	r0, r5
 800a534:	f001 fd16 	bl	800bf64 <_fflush_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1ed      	bne.n	800a518 <__swbuf_r+0x2a>
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	3b01      	subs	r3, #1
 800a540:	60a3      	str	r3, [r4, #8]
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	6022      	str	r2, [r4, #0]
 800a548:	701e      	strb	r6, [r3, #0]
 800a54a:	6962      	ldr	r2, [r4, #20]
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	429a      	cmp	r2, r3
 800a550:	d004      	beq.n	800a55c <__swbuf_r+0x6e>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	07db      	lsls	r3, r3, #31
 800a556:	d5e1      	bpl.n	800a51c <__swbuf_r+0x2e>
 800a558:	2e0a      	cmp	r6, #10
 800a55a:	d1df      	bne.n	800a51c <__swbuf_r+0x2e>
 800a55c:	4621      	mov	r1, r4
 800a55e:	4628      	mov	r0, r5
 800a560:	f001 fd00 	bl	800bf64 <_fflush_r>
 800a564:	2800      	cmp	r0, #0
 800a566:	d0d9      	beq.n	800a51c <__swbuf_r+0x2e>
 800a568:	e7d6      	b.n	800a518 <__swbuf_r+0x2a>
	...

0800a56c <__swsetup_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4b29      	ldr	r3, [pc, #164]	@ (800a614 <__swsetup_r+0xa8>)
 800a570:	4605      	mov	r5, r0
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	460c      	mov	r4, r1
 800a576:	b118      	cbz	r0, 800a580 <__swsetup_r+0x14>
 800a578:	6a03      	ldr	r3, [r0, #32]
 800a57a:	b90b      	cbnz	r3, 800a580 <__swsetup_r+0x14>
 800a57c:	f7ff fece 	bl	800a31c <__sinit>
 800a580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a584:	0719      	lsls	r1, r3, #28
 800a586:	d422      	bmi.n	800a5ce <__swsetup_r+0x62>
 800a588:	06da      	lsls	r2, r3, #27
 800a58a:	d407      	bmi.n	800a59c <__swsetup_r+0x30>
 800a58c:	2209      	movs	r2, #9
 800a58e:	602a      	str	r2, [r5, #0]
 800a590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	f04f 30ff 	mov.w	r0, #4294967295
 800a59a:	e033      	b.n	800a604 <__swsetup_r+0x98>
 800a59c:	0758      	lsls	r0, r3, #29
 800a59e:	d512      	bpl.n	800a5c6 <__swsetup_r+0x5a>
 800a5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5a2:	b141      	cbz	r1, 800a5b6 <__swsetup_r+0x4a>
 800a5a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5a8:	4299      	cmp	r1, r3
 800a5aa:	d002      	beq.n	800a5b2 <__swsetup_r+0x46>
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 fe99 	bl	800b2e4 <_free_r>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	6923      	ldr	r3, [r4, #16]
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f043 0308 	orr.w	r3, r3, #8
 800a5cc:	81a3      	strh	r3, [r4, #12]
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	b94b      	cbnz	r3, 800a5e6 <__swsetup_r+0x7a>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5dc:	d003      	beq.n	800a5e6 <__swsetup_r+0x7a>
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f001 fd0d 	bl	800c000 <__smakebuf_r>
 800a5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ea:	f013 0201 	ands.w	r2, r3, #1
 800a5ee:	d00a      	beq.n	800a606 <__swsetup_r+0x9a>
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	60a2      	str	r2, [r4, #8]
 800a5f4:	6962      	ldr	r2, [r4, #20]
 800a5f6:	4252      	negs	r2, r2
 800a5f8:	61a2      	str	r2, [r4, #24]
 800a5fa:	6922      	ldr	r2, [r4, #16]
 800a5fc:	b942      	cbnz	r2, 800a610 <__swsetup_r+0xa4>
 800a5fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a602:	d1c5      	bne.n	800a590 <__swsetup_r+0x24>
 800a604:	bd38      	pop	{r3, r4, r5, pc}
 800a606:	0799      	lsls	r1, r3, #30
 800a608:	bf58      	it	pl
 800a60a:	6962      	ldrpl	r2, [r4, #20]
 800a60c:	60a2      	str	r2, [r4, #8]
 800a60e:	e7f4      	b.n	800a5fa <__swsetup_r+0x8e>
 800a610:	2000      	movs	r0, #0
 800a612:	e7f7      	b.n	800a604 <__swsetup_r+0x98>
 800a614:	2400001c 	.word	0x2400001c

0800a618 <memset>:
 800a618:	4402      	add	r2, r0
 800a61a:	4603      	mov	r3, r0
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d100      	bne.n	800a622 <memset+0xa>
 800a620:	4770      	bx	lr
 800a622:	f803 1b01 	strb.w	r1, [r3], #1
 800a626:	e7f9      	b.n	800a61c <memset+0x4>

0800a628 <_localeconv_r>:
 800a628:	4800      	ldr	r0, [pc, #0]	@ (800a62c <_localeconv_r+0x4>)
 800a62a:	4770      	bx	lr
 800a62c:	2400015c 	.word	0x2400015c

0800a630 <_close_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	@ (800a64c <_close_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f6 feca 	bl	80013d4 <_close>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_close_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_close_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	24000764 	.word	0x24000764

0800a650 <_lseek_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d07      	ldr	r5, [pc, #28]	@ (800a670 <_lseek_r+0x20>)
 800a654:	4604      	mov	r4, r0
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	602a      	str	r2, [r5, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f7f6 fedf 	bl	8001422 <_lseek>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_lseek_r+0x1e>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_lseek_r+0x1e>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	24000764 	.word	0x24000764

0800a674 <_read_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	@ (800a694 <_read_r+0x20>)
 800a678:	4604      	mov	r4, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	602a      	str	r2, [r5, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7f6 fe89 	bl	800139a <_read>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_read_r+0x1e>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_read_r+0x1e>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	24000764 	.word	0x24000764

0800a698 <_write_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d07      	ldr	r5, [pc, #28]	@ (800a6b8 <_write_r+0x20>)
 800a69c:	4604      	mov	r4, r0
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f7f6 fb98 	bl	8000ddc <_write>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_write_r+0x1e>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_write_r+0x1e>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	24000764 	.word	0x24000764

0800a6bc <__errno>:
 800a6bc:	4b01      	ldr	r3, [pc, #4]	@ (800a6c4 <__errno+0x8>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	2400001c 	.word	0x2400001c

0800a6c8 <__libc_init_array>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a700 <__libc_init_array+0x38>)
 800a6cc:	4c0d      	ldr	r4, [pc, #52]	@ (800a704 <__libc_init_array+0x3c>)
 800a6ce:	1b64      	subs	r4, r4, r5
 800a6d0:	10a4      	asrs	r4, r4, #2
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	42a6      	cmp	r6, r4
 800a6d6:	d109      	bne.n	800a6ec <__libc_init_array+0x24>
 800a6d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a708 <__libc_init_array+0x40>)
 800a6da:	4c0c      	ldr	r4, [pc, #48]	@ (800a70c <__libc_init_array+0x44>)
 800a6dc:	f001 fdbc 	bl	800c258 <_init>
 800a6e0:	1b64      	subs	r4, r4, r5
 800a6e2:	10a4      	asrs	r4, r4, #2
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	42a6      	cmp	r6, r4
 800a6e8:	d105      	bne.n	800a6f6 <__libc_init_array+0x2e>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f0:	4798      	blx	r3
 800a6f2:	3601      	adds	r6, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__libc_init_array+0xc>
 800a6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6fa:	4798      	blx	r3
 800a6fc:	3601      	adds	r6, #1
 800a6fe:	e7f2      	b.n	800a6e6 <__libc_init_array+0x1e>
 800a700:	0800c74c 	.word	0x0800c74c
 800a704:	0800c74c 	.word	0x0800c74c
 800a708:	0800c74c 	.word	0x0800c74c
 800a70c:	0800c750 	.word	0x0800c750

0800a710 <__retarget_lock_init_recursive>:
 800a710:	4770      	bx	lr

0800a712 <__retarget_lock_acquire_recursive>:
 800a712:	4770      	bx	lr

0800a714 <__retarget_lock_release_recursive>:
 800a714:	4770      	bx	lr

0800a716 <quorem>:
 800a716:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	6903      	ldr	r3, [r0, #16]
 800a71c:	690c      	ldr	r4, [r1, #16]
 800a71e:	42a3      	cmp	r3, r4
 800a720:	4607      	mov	r7, r0
 800a722:	db7e      	blt.n	800a822 <quorem+0x10c>
 800a724:	3c01      	subs	r4, #1
 800a726:	f101 0814 	add.w	r8, r1, #20
 800a72a:	00a3      	lsls	r3, r4, #2
 800a72c:	f100 0514 	add.w	r5, r0, #20
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a73c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a740:	3301      	adds	r3, #1
 800a742:	429a      	cmp	r2, r3
 800a744:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a748:	fbb2 f6f3 	udiv	r6, r2, r3
 800a74c:	d32e      	bcc.n	800a7ac <quorem+0x96>
 800a74e:	f04f 0a00 	mov.w	sl, #0
 800a752:	46c4      	mov	ip, r8
 800a754:	46ae      	mov	lr, r5
 800a756:	46d3      	mov	fp, sl
 800a758:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a75c:	b298      	uxth	r0, r3
 800a75e:	fb06 a000 	mla	r0, r6, r0, sl
 800a762:	0c02      	lsrs	r2, r0, #16
 800a764:	0c1b      	lsrs	r3, r3, #16
 800a766:	fb06 2303 	mla	r3, r6, r3, r2
 800a76a:	f8de 2000 	ldr.w	r2, [lr]
 800a76e:	b280      	uxth	r0, r0
 800a770:	b292      	uxth	r2, r2
 800a772:	1a12      	subs	r2, r2, r0
 800a774:	445a      	add	r2, fp
 800a776:	f8de 0000 	ldr.w	r0, [lr]
 800a77a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a77e:	b29b      	uxth	r3, r3
 800a780:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a784:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a788:	b292      	uxth	r2, r2
 800a78a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a78e:	45e1      	cmp	r9, ip
 800a790:	f84e 2b04 	str.w	r2, [lr], #4
 800a794:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a798:	d2de      	bcs.n	800a758 <quorem+0x42>
 800a79a:	9b00      	ldr	r3, [sp, #0]
 800a79c:	58eb      	ldr	r3, [r5, r3]
 800a79e:	b92b      	cbnz	r3, 800a7ac <quorem+0x96>
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	3b04      	subs	r3, #4
 800a7a4:	429d      	cmp	r5, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	d32f      	bcc.n	800a80a <quorem+0xf4>
 800a7aa:	613c      	str	r4, [r7, #16]
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f001 f90b 	bl	800b9c8 <__mcmp>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	db25      	blt.n	800a802 <quorem+0xec>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7be:	f8d1 c000 	ldr.w	ip, [r1]
 800a7c2:	fa1f fe82 	uxth.w	lr, r2
 800a7c6:	fa1f f38c 	uxth.w	r3, ip
 800a7ca:	eba3 030e 	sub.w	r3, r3, lr
 800a7ce:	4403      	add	r3, r0
 800a7d0:	0c12      	lsrs	r2, r2, #16
 800a7d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e0:	45c1      	cmp	r9, r8
 800a7e2:	f841 3b04 	str.w	r3, [r1], #4
 800a7e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7ea:	d2e6      	bcs.n	800a7ba <quorem+0xa4>
 800a7ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7f4:	b922      	cbnz	r2, 800a800 <quorem+0xea>
 800a7f6:	3b04      	subs	r3, #4
 800a7f8:	429d      	cmp	r5, r3
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	d30b      	bcc.n	800a816 <quorem+0x100>
 800a7fe:	613c      	str	r4, [r7, #16]
 800a800:	3601      	adds	r6, #1
 800a802:	4630      	mov	r0, r6
 800a804:	b003      	add	sp, #12
 800a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80a:	6812      	ldr	r2, [r2, #0]
 800a80c:	3b04      	subs	r3, #4
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d1cb      	bne.n	800a7aa <quorem+0x94>
 800a812:	3c01      	subs	r4, #1
 800a814:	e7c6      	b.n	800a7a4 <quorem+0x8e>
 800a816:	6812      	ldr	r2, [r2, #0]
 800a818:	3b04      	subs	r3, #4
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	d1ef      	bne.n	800a7fe <quorem+0xe8>
 800a81e:	3c01      	subs	r4, #1
 800a820:	e7ea      	b.n	800a7f8 <quorem+0xe2>
 800a822:	2000      	movs	r0, #0
 800a824:	e7ee      	b.n	800a804 <quorem+0xee>
	...

0800a828 <_dtoa_r>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	ed2d 8b02 	vpush	{d8}
 800a830:	69c7      	ldr	r7, [r0, #28]
 800a832:	b091      	sub	sp, #68	@ 0x44
 800a834:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a838:	ec55 4b10 	vmov	r4, r5, d0
 800a83c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a83e:	9107      	str	r1, [sp, #28]
 800a840:	4681      	mov	r9, r0
 800a842:	9209      	str	r2, [sp, #36]	@ 0x24
 800a844:	930d      	str	r3, [sp, #52]	@ 0x34
 800a846:	b97f      	cbnz	r7, 800a868 <_dtoa_r+0x40>
 800a848:	2010      	movs	r0, #16
 800a84a:	f000 fd95 	bl	800b378 <malloc>
 800a84e:	4602      	mov	r2, r0
 800a850:	f8c9 001c 	str.w	r0, [r9, #28]
 800a854:	b920      	cbnz	r0, 800a860 <_dtoa_r+0x38>
 800a856:	4ba0      	ldr	r3, [pc, #640]	@ (800aad8 <_dtoa_r+0x2b0>)
 800a858:	21ef      	movs	r1, #239	@ 0xef
 800a85a:	48a0      	ldr	r0, [pc, #640]	@ (800aadc <_dtoa_r+0x2b4>)
 800a85c:	f001 fc4c 	bl	800c0f8 <__assert_func>
 800a860:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a864:	6007      	str	r7, [r0, #0]
 800a866:	60c7      	str	r7, [r0, #12]
 800a868:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a86c:	6819      	ldr	r1, [r3, #0]
 800a86e:	b159      	cbz	r1, 800a888 <_dtoa_r+0x60>
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	604a      	str	r2, [r1, #4]
 800a874:	2301      	movs	r3, #1
 800a876:	4093      	lsls	r3, r2
 800a878:	608b      	str	r3, [r1, #8]
 800a87a:	4648      	mov	r0, r9
 800a87c:	f000 fe72 	bl	800b564 <_Bfree>
 800a880:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a884:	2200      	movs	r2, #0
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	1e2b      	subs	r3, r5, #0
 800a88a:	bfbb      	ittet	lt
 800a88c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a890:	9303      	strlt	r3, [sp, #12]
 800a892:	2300      	movge	r3, #0
 800a894:	2201      	movlt	r2, #1
 800a896:	bfac      	ite	ge
 800a898:	6033      	strge	r3, [r6, #0]
 800a89a:	6032      	strlt	r2, [r6, #0]
 800a89c:	4b90      	ldr	r3, [pc, #576]	@ (800aae0 <_dtoa_r+0x2b8>)
 800a89e:	9e03      	ldr	r6, [sp, #12]
 800a8a0:	43b3      	bics	r3, r6
 800a8a2:	d110      	bne.n	800a8c6 <_dtoa_r+0x9e>
 800a8a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a8b0:	4323      	orrs	r3, r4
 800a8b2:	f000 84e6 	beq.w	800b282 <_dtoa_r+0xa5a>
 800a8b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a8b8:	4f8a      	ldr	r7, [pc, #552]	@ (800aae4 <_dtoa_r+0x2bc>)
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 84e8 	beq.w	800b290 <_dtoa_r+0xa68>
 800a8c0:	1cfb      	adds	r3, r7, #3
 800a8c2:	f000 bce3 	b.w	800b28c <_dtoa_r+0xa64>
 800a8c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a8ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d2:	d10a      	bne.n	800a8ea <_dtoa_r+0xc2>
 800a8d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a8dc:	b113      	cbz	r3, 800a8e4 <_dtoa_r+0xbc>
 800a8de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a8e0:	4b81      	ldr	r3, [pc, #516]	@ (800aae8 <_dtoa_r+0x2c0>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	4f81      	ldr	r7, [pc, #516]	@ (800aaec <_dtoa_r+0x2c4>)
 800a8e6:	f000 bcd3 	b.w	800b290 <_dtoa_r+0xa68>
 800a8ea:	aa0e      	add	r2, sp, #56	@ 0x38
 800a8ec:	a90f      	add	r1, sp, #60	@ 0x3c
 800a8ee:	4648      	mov	r0, r9
 800a8f0:	eeb0 0b48 	vmov.f64	d0, d8
 800a8f4:	f001 f918 	bl	800bb28 <__d2b>
 800a8f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a8fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8fe:	9001      	str	r0, [sp, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d045      	beq.n	800a990 <_dtoa_r+0x168>
 800a904:	eeb0 7b48 	vmov.f64	d7, d8
 800a908:	ee18 1a90 	vmov	r1, s17
 800a90c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a910:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a914:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a918:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a91c:	2500      	movs	r5, #0
 800a91e:	ee07 1a90 	vmov	s15, r1
 800a922:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a926:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800aac0 <_dtoa_r+0x298>
 800a92a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a92e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800aac8 <_dtoa_r+0x2a0>
 800a932:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a936:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800aad0 <_dtoa_r+0x2a8>
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a942:	eeb0 7b46 	vmov.f64	d7, d6
 800a946:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a94a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a94e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	ee16 8a90 	vmov	r8, s13
 800a95a:	d508      	bpl.n	800a96e <_dtoa_r+0x146>
 800a95c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a960:	eeb4 6b47 	vcmp.f64	d6, d7
 800a964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a968:	bf18      	it	ne
 800a96a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a96e:	f1b8 0f16 	cmp.w	r8, #22
 800a972:	d82b      	bhi.n	800a9cc <_dtoa_r+0x1a4>
 800a974:	495e      	ldr	r1, [pc, #376]	@ (800aaf0 <_dtoa_r+0x2c8>)
 800a976:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a97a:	ed91 7b00 	vldr	d7, [r1]
 800a97e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a986:	d501      	bpl.n	800a98c <_dtoa_r+0x164>
 800a988:	f108 38ff 	add.w	r8, r8, #4294967295
 800a98c:	2100      	movs	r1, #0
 800a98e:	e01e      	b.n	800a9ce <_dtoa_r+0x1a6>
 800a990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a992:	4413      	add	r3, r2
 800a994:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a998:	2920      	cmp	r1, #32
 800a99a:	bfc1      	itttt	gt
 800a99c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a9a0:	408e      	lslgt	r6, r1
 800a9a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a9a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a9aa:	bfd6      	itet	le
 800a9ac:	f1c1 0120 	rsble	r1, r1, #32
 800a9b0:	4331      	orrgt	r1, r6
 800a9b2:	fa04 f101 	lslle.w	r1, r4, r1
 800a9b6:	ee07 1a90 	vmov	s15, r1
 800a9ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	ee17 1a90 	vmov	r1, s15
 800a9c4:	2501      	movs	r5, #1
 800a9c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a9ca:	e7a8      	b.n	800a91e <_dtoa_r+0xf6>
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	1e53      	subs	r3, r2, #1
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	bf45      	ittet	mi
 800a9d6:	f1c2 0301 	rsbmi	r3, r2, #1
 800a9da:	9304      	strmi	r3, [sp, #16]
 800a9dc:	2300      	movpl	r3, #0
 800a9de:	2300      	movmi	r3, #0
 800a9e0:	bf4c      	ite	mi
 800a9e2:	9306      	strmi	r3, [sp, #24]
 800a9e4:	9304      	strpl	r3, [sp, #16]
 800a9e6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ea:	910c      	str	r1, [sp, #48]	@ 0x30
 800a9ec:	db18      	blt.n	800aa20 <_dtoa_r+0x1f8>
 800a9ee:	9b06      	ldr	r3, [sp, #24]
 800a9f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a9f4:	4443      	add	r3, r8
 800a9f6:	9306      	str	r3, [sp, #24]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9a07      	ldr	r2, [sp, #28]
 800a9fc:	2a09      	cmp	r2, #9
 800a9fe:	d845      	bhi.n	800aa8c <_dtoa_r+0x264>
 800aa00:	2a05      	cmp	r2, #5
 800aa02:	bfc4      	itt	gt
 800aa04:	3a04      	subgt	r2, #4
 800aa06:	9207      	strgt	r2, [sp, #28]
 800aa08:	9a07      	ldr	r2, [sp, #28]
 800aa0a:	f1a2 0202 	sub.w	r2, r2, #2
 800aa0e:	bfcc      	ite	gt
 800aa10:	2400      	movgt	r4, #0
 800aa12:	2401      	movle	r4, #1
 800aa14:	2a03      	cmp	r2, #3
 800aa16:	d844      	bhi.n	800aaa2 <_dtoa_r+0x27a>
 800aa18:	e8df f002 	tbb	[pc, r2]
 800aa1c:	0b173634 	.word	0x0b173634
 800aa20:	9b04      	ldr	r3, [sp, #16]
 800aa22:	2200      	movs	r2, #0
 800aa24:	eba3 0308 	sub.w	r3, r3, r8
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	920a      	str	r2, [sp, #40]	@ 0x28
 800aa2c:	f1c8 0300 	rsb	r3, r8, #0
 800aa30:	e7e3      	b.n	800a9fa <_dtoa_r+0x1d2>
 800aa32:	2201      	movs	r2, #1
 800aa34:	9208      	str	r2, [sp, #32]
 800aa36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa38:	eb08 0b02 	add.w	fp, r8, r2
 800aa3c:	f10b 0a01 	add.w	sl, fp, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	2a01      	cmp	r2, #1
 800aa44:	bfb8      	it	lt
 800aa46:	2201      	movlt	r2, #1
 800aa48:	e006      	b.n	800aa58 <_dtoa_r+0x230>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	9208      	str	r2, [sp, #32]
 800aa4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	dd29      	ble.n	800aaa8 <_dtoa_r+0x280>
 800aa54:	4693      	mov	fp, r2
 800aa56:	4692      	mov	sl, r2
 800aa58:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	2004      	movs	r0, #4
 800aa60:	f100 0614 	add.w	r6, r0, #20
 800aa64:	4296      	cmp	r6, r2
 800aa66:	d926      	bls.n	800aab6 <_dtoa_r+0x28e>
 800aa68:	6079      	str	r1, [r7, #4]
 800aa6a:	4648      	mov	r0, r9
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	f000 fd39 	bl	800b4e4 <_Balloc>
 800aa72:	9b05      	ldr	r3, [sp, #20]
 800aa74:	4607      	mov	r7, r0
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d13e      	bne.n	800aaf8 <_dtoa_r+0x2d0>
 800aa7a:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf4 <_dtoa_r+0x2cc>)
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa82:	e6ea      	b.n	800a85a <_dtoa_r+0x32>
 800aa84:	2200      	movs	r2, #0
 800aa86:	e7e1      	b.n	800aa4c <_dtoa_r+0x224>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	e7d3      	b.n	800aa34 <_dtoa_r+0x20c>
 800aa8c:	2401      	movs	r4, #1
 800aa8e:	2200      	movs	r2, #0
 800aa90:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800aa94:	f04f 3bff 	mov.w	fp, #4294967295
 800aa98:	2100      	movs	r1, #0
 800aa9a:	46da      	mov	sl, fp
 800aa9c:	2212      	movs	r2, #18
 800aa9e:	9109      	str	r1, [sp, #36]	@ 0x24
 800aaa0:	e7da      	b.n	800aa58 <_dtoa_r+0x230>
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	9208      	str	r2, [sp, #32]
 800aaa6:	e7f5      	b.n	800aa94 <_dtoa_r+0x26c>
 800aaa8:	f04f 0b01 	mov.w	fp, #1
 800aaac:	46da      	mov	sl, fp
 800aaae:	465a      	mov	r2, fp
 800aab0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aab4:	e7d0      	b.n	800aa58 <_dtoa_r+0x230>
 800aab6:	3101      	adds	r1, #1
 800aab8:	0040      	lsls	r0, r0, #1
 800aaba:	e7d1      	b.n	800aa60 <_dtoa_r+0x238>
 800aabc:	f3af 8000 	nop.w
 800aac0:	636f4361 	.word	0x636f4361
 800aac4:	3fd287a7 	.word	0x3fd287a7
 800aac8:	8b60c8b3 	.word	0x8b60c8b3
 800aacc:	3fc68a28 	.word	0x3fc68a28
 800aad0:	509f79fb 	.word	0x509f79fb
 800aad4:	3fd34413 	.word	0x3fd34413
 800aad8:	0800c40d 	.word	0x0800c40d
 800aadc:	0800c424 	.word	0x0800c424
 800aae0:	7ff00000 	.word	0x7ff00000
 800aae4:	0800c409 	.word	0x0800c409
 800aae8:	0800c3dd 	.word	0x0800c3dd
 800aaec:	0800c3dc 	.word	0x0800c3dc
 800aaf0:	0800c578 	.word	0x0800c578
 800aaf4:	0800c47c 	.word	0x0800c47c
 800aaf8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800aafc:	f1ba 0f0e 	cmp.w	sl, #14
 800ab00:	6010      	str	r0, [r2, #0]
 800ab02:	d86e      	bhi.n	800abe2 <_dtoa_r+0x3ba>
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	d06c      	beq.n	800abe2 <_dtoa_r+0x3ba>
 800ab08:	f1b8 0f00 	cmp.w	r8, #0
 800ab0c:	f340 80b4 	ble.w	800ac78 <_dtoa_r+0x450>
 800ab10:	4ac8      	ldr	r2, [pc, #800]	@ (800ae34 <_dtoa_r+0x60c>)
 800ab12:	f008 010f 	and.w	r1, r8, #15
 800ab16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab1a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ab1e:	ed92 7b00 	vldr	d7, [r2]
 800ab22:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ab26:	f000 809b 	beq.w	800ac60 <_dtoa_r+0x438>
 800ab2a:	4ac3      	ldr	r2, [pc, #780]	@ (800ae38 <_dtoa_r+0x610>)
 800ab2c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ab30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ab34:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab38:	f001 010f 	and.w	r1, r1, #15
 800ab3c:	2203      	movs	r2, #3
 800ab3e:	48be      	ldr	r0, [pc, #760]	@ (800ae38 <_dtoa_r+0x610>)
 800ab40:	2900      	cmp	r1, #0
 800ab42:	f040 808f 	bne.w	800ac64 <_dtoa_r+0x43c>
 800ab46:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ab54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	f000 80b3 	beq.w	800acc4 <_dtoa_r+0x49c>
 800ab5e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ab62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6a:	f140 80ab 	bpl.w	800acc4 <_dtoa_r+0x49c>
 800ab6e:	f1ba 0f00 	cmp.w	sl, #0
 800ab72:	f000 80a7 	beq.w	800acc4 <_dtoa_r+0x49c>
 800ab76:	f1bb 0f00 	cmp.w	fp, #0
 800ab7a:	dd30      	ble.n	800abde <_dtoa_r+0x3b6>
 800ab7c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ab80:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab84:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab88:	f108 31ff 	add.w	r1, r8, #4294967295
 800ab8c:	9105      	str	r1, [sp, #20]
 800ab8e:	3201      	adds	r2, #1
 800ab90:	465c      	mov	r4, fp
 800ab92:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab96:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ab9a:	ee07 2a90 	vmov	s15, r2
 800ab9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aba2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aba6:	ee15 2a90 	vmov	r2, s11
 800abaa:	ec51 0b15 	vmov	r0, r1, d5
 800abae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800abb2:	2c00      	cmp	r4, #0
 800abb4:	f040 808a 	bne.w	800accc <_dtoa_r+0x4a4>
 800abb8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800abbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800abc0:	ec41 0b17 	vmov	d7, r0, r1
 800abc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	f300 826a 	bgt.w	800b0a4 <_dtoa_r+0x87c>
 800abd0:	eeb1 7b47 	vneg.f64	d7, d7
 800abd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abdc:	d423      	bmi.n	800ac26 <_dtoa_r+0x3fe>
 800abde:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abe2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800abe4:	2a00      	cmp	r2, #0
 800abe6:	f2c0 8129 	blt.w	800ae3c <_dtoa_r+0x614>
 800abea:	f1b8 0f0e 	cmp.w	r8, #14
 800abee:	f300 8125 	bgt.w	800ae3c <_dtoa_r+0x614>
 800abf2:	4b90      	ldr	r3, [pc, #576]	@ (800ae34 <_dtoa_r+0x60c>)
 800abf4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800abf8:	ed93 6b00 	vldr	d6, [r3]
 800abfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f280 80c8 	bge.w	800ad94 <_dtoa_r+0x56c>
 800ac04:	f1ba 0f00 	cmp.w	sl, #0
 800ac08:	f300 80c4 	bgt.w	800ad94 <_dtoa_r+0x56c>
 800ac0c:	d10b      	bne.n	800ac26 <_dtoa_r+0x3fe>
 800ac0e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ac12:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac22:	f2c0 823c 	blt.w	800b09e <_dtoa_r+0x876>
 800ac26:	2400      	movs	r4, #0
 800ac28:	4625      	mov	r5, r4
 800ac2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac2c:	43db      	mvns	r3, r3
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	463e      	mov	r6, r7
 800ac32:	f04f 0800 	mov.w	r8, #0
 800ac36:	4621      	mov	r1, r4
 800ac38:	4648      	mov	r0, r9
 800ac3a:	f000 fc93 	bl	800b564 <_Bfree>
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	f000 80a2 	beq.w	800ad88 <_dtoa_r+0x560>
 800ac44:	f1b8 0f00 	cmp.w	r8, #0
 800ac48:	d005      	beq.n	800ac56 <_dtoa_r+0x42e>
 800ac4a:	45a8      	cmp	r8, r5
 800ac4c:	d003      	beq.n	800ac56 <_dtoa_r+0x42e>
 800ac4e:	4641      	mov	r1, r8
 800ac50:	4648      	mov	r0, r9
 800ac52:	f000 fc87 	bl	800b564 <_Bfree>
 800ac56:	4629      	mov	r1, r5
 800ac58:	4648      	mov	r0, r9
 800ac5a:	f000 fc83 	bl	800b564 <_Bfree>
 800ac5e:	e093      	b.n	800ad88 <_dtoa_r+0x560>
 800ac60:	2202      	movs	r2, #2
 800ac62:	e76c      	b.n	800ab3e <_dtoa_r+0x316>
 800ac64:	07cc      	lsls	r4, r1, #31
 800ac66:	d504      	bpl.n	800ac72 <_dtoa_r+0x44a>
 800ac68:	ed90 6b00 	vldr	d6, [r0]
 800ac6c:	3201      	adds	r2, #1
 800ac6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac72:	1049      	asrs	r1, r1, #1
 800ac74:	3008      	adds	r0, #8
 800ac76:	e763      	b.n	800ab40 <_dtoa_r+0x318>
 800ac78:	d022      	beq.n	800acc0 <_dtoa_r+0x498>
 800ac7a:	f1c8 0100 	rsb	r1, r8, #0
 800ac7e:	4a6d      	ldr	r2, [pc, #436]	@ (800ae34 <_dtoa_r+0x60c>)
 800ac80:	f001 000f 	and.w	r0, r1, #15
 800ac84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ac88:	ed92 7b00 	vldr	d7, [r2]
 800ac8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac94:	4868      	ldr	r0, [pc, #416]	@ (800ae38 <_dtoa_r+0x610>)
 800ac96:	1109      	asrs	r1, r1, #4
 800ac98:	2400      	movs	r4, #0
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	b929      	cbnz	r1, 800acaa <_dtoa_r+0x482>
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	f43f af57 	beq.w	800ab52 <_dtoa_r+0x32a>
 800aca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aca8:	e753      	b.n	800ab52 <_dtoa_r+0x32a>
 800acaa:	07ce      	lsls	r6, r1, #31
 800acac:	d505      	bpl.n	800acba <_dtoa_r+0x492>
 800acae:	ed90 6b00 	vldr	d6, [r0]
 800acb2:	3201      	adds	r2, #1
 800acb4:	2401      	movs	r4, #1
 800acb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acba:	1049      	asrs	r1, r1, #1
 800acbc:	3008      	adds	r0, #8
 800acbe:	e7ed      	b.n	800ac9c <_dtoa_r+0x474>
 800acc0:	2202      	movs	r2, #2
 800acc2:	e746      	b.n	800ab52 <_dtoa_r+0x32a>
 800acc4:	f8cd 8014 	str.w	r8, [sp, #20]
 800acc8:	4654      	mov	r4, sl
 800acca:	e762      	b.n	800ab92 <_dtoa_r+0x36a>
 800accc:	4a59      	ldr	r2, [pc, #356]	@ (800ae34 <_dtoa_r+0x60c>)
 800acce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800acd2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800acd6:	9a08      	ldr	r2, [sp, #32]
 800acd8:	ec41 0b17 	vmov	d7, r0, r1
 800acdc:	443c      	add	r4, r7
 800acde:	b34a      	cbz	r2, 800ad34 <_dtoa_r+0x50c>
 800ace0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ace4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ace8:	463e      	mov	r6, r7
 800acea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800acee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800acf2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800acf6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800acfa:	ee14 2a90 	vmov	r2, s9
 800acfe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad02:	3230      	adds	r2, #48	@ 0x30
 800ad04:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad10:	f806 2b01 	strb.w	r2, [r6], #1
 800ad14:	d438      	bmi.n	800ad88 <_dtoa_r+0x560>
 800ad16:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ad1a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ad1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad22:	d46e      	bmi.n	800ae02 <_dtoa_r+0x5da>
 800ad24:	42a6      	cmp	r6, r4
 800ad26:	f43f af5a 	beq.w	800abde <_dtoa_r+0x3b6>
 800ad2a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ad2e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad32:	e7e0      	b.n	800acf6 <_dtoa_r+0x4ce>
 800ad34:	4621      	mov	r1, r4
 800ad36:	463e      	mov	r6, r7
 800ad38:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad3c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ad40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ad44:	ee14 2a90 	vmov	r2, s9
 800ad48:	3230      	adds	r2, #48	@ 0x30
 800ad4a:	f806 2b01 	strb.w	r2, [r6], #1
 800ad4e:	42a6      	cmp	r6, r4
 800ad50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad54:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad58:	d119      	bne.n	800ad8e <_dtoa_r+0x566>
 800ad5a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ad5e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ad62:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	dc4a      	bgt.n	800ae02 <_dtoa_r+0x5da>
 800ad6c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ad70:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ad74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad78:	f57f af31 	bpl.w	800abde <_dtoa_r+0x3b6>
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	3901      	subs	r1, #1
 800ad80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad84:	2b30      	cmp	r3, #48	@ 0x30
 800ad86:	d0f9      	beq.n	800ad7c <_dtoa_r+0x554>
 800ad88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ad8c:	e027      	b.n	800adde <_dtoa_r+0x5b6>
 800ad8e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad92:	e7d5      	b.n	800ad40 <_dtoa_r+0x518>
 800ad94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad98:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ad9c:	463e      	mov	r6, r7
 800ad9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ada2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ada6:	ee15 3a10 	vmov	r3, s10
 800adaa:	3330      	adds	r3, #48	@ 0x30
 800adac:	f806 3b01 	strb.w	r3, [r6], #1
 800adb0:	1bf3      	subs	r3, r6, r7
 800adb2:	459a      	cmp	sl, r3
 800adb4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800adb8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800adbc:	d132      	bne.n	800ae24 <_dtoa_r+0x5fc>
 800adbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800adc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adca:	dc18      	bgt.n	800adfe <_dtoa_r+0x5d6>
 800adcc:	eeb4 7b46 	vcmp.f64	d7, d6
 800add0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add4:	d103      	bne.n	800adde <_dtoa_r+0x5b6>
 800add6:	ee15 3a10 	vmov	r3, s10
 800adda:	07db      	lsls	r3, r3, #31
 800addc:	d40f      	bmi.n	800adfe <_dtoa_r+0x5d6>
 800adde:	9901      	ldr	r1, [sp, #4]
 800ade0:	4648      	mov	r0, r9
 800ade2:	f000 fbbf 	bl	800b564 <_Bfree>
 800ade6:	2300      	movs	r3, #0
 800ade8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adea:	7033      	strb	r3, [r6, #0]
 800adec:	f108 0301 	add.w	r3, r8, #1
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 824b 	beq.w	800b290 <_dtoa_r+0xa68>
 800adfa:	601e      	str	r6, [r3, #0]
 800adfc:	e248      	b.n	800b290 <_dtoa_r+0xa68>
 800adfe:	f8cd 8014 	str.w	r8, [sp, #20]
 800ae02:	4633      	mov	r3, r6
 800ae04:	461e      	mov	r6, r3
 800ae06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0a:	2a39      	cmp	r2, #57	@ 0x39
 800ae0c:	d106      	bne.n	800ae1c <_dtoa_r+0x5f4>
 800ae0e:	429f      	cmp	r7, r3
 800ae10:	d1f8      	bne.n	800ae04 <_dtoa_r+0x5dc>
 800ae12:	9a05      	ldr	r2, [sp, #20]
 800ae14:	3201      	adds	r2, #1
 800ae16:	9205      	str	r2, [sp, #20]
 800ae18:	2230      	movs	r2, #48	@ 0x30
 800ae1a:	703a      	strb	r2, [r7, #0]
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	3201      	adds	r2, #1
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e7b1      	b.n	800ad88 <_dtoa_r+0x560>
 800ae24:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae30:	d1b5      	bne.n	800ad9e <_dtoa_r+0x576>
 800ae32:	e7d4      	b.n	800adde <_dtoa_r+0x5b6>
 800ae34:	0800c578 	.word	0x0800c578
 800ae38:	0800c550 	.word	0x0800c550
 800ae3c:	9908      	ldr	r1, [sp, #32]
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	f000 80e9 	beq.w	800b016 <_dtoa_r+0x7ee>
 800ae44:	9907      	ldr	r1, [sp, #28]
 800ae46:	2901      	cmp	r1, #1
 800ae48:	f300 80cb 	bgt.w	800afe2 <_dtoa_r+0x7ba>
 800ae4c:	2d00      	cmp	r5, #0
 800ae4e:	f000 80c4 	beq.w	800afda <_dtoa_r+0x7b2>
 800ae52:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae56:	9e04      	ldr	r6, [sp, #16]
 800ae58:	461c      	mov	r4, r3
 800ae5a:	9305      	str	r3, [sp, #20]
 800ae5c:	9b04      	ldr	r3, [sp, #16]
 800ae5e:	4413      	add	r3, r2
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	9b06      	ldr	r3, [sp, #24]
 800ae64:	2101      	movs	r1, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	4648      	mov	r0, r9
 800ae6a:	9306      	str	r3, [sp, #24]
 800ae6c:	f000 fc2e 	bl	800b6cc <__i2b>
 800ae70:	9b05      	ldr	r3, [sp, #20]
 800ae72:	4605      	mov	r5, r0
 800ae74:	b166      	cbz	r6, 800ae90 <_dtoa_r+0x668>
 800ae76:	9a06      	ldr	r2, [sp, #24]
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	dd09      	ble.n	800ae90 <_dtoa_r+0x668>
 800ae7c:	42b2      	cmp	r2, r6
 800ae7e:	9904      	ldr	r1, [sp, #16]
 800ae80:	bfa8      	it	ge
 800ae82:	4632      	movge	r2, r6
 800ae84:	1a89      	subs	r1, r1, r2
 800ae86:	9104      	str	r1, [sp, #16]
 800ae88:	9906      	ldr	r1, [sp, #24]
 800ae8a:	1ab6      	subs	r6, r6, r2
 800ae8c:	1a8a      	subs	r2, r1, r2
 800ae8e:	9206      	str	r2, [sp, #24]
 800ae90:	b30b      	cbz	r3, 800aed6 <_dtoa_r+0x6ae>
 800ae92:	9a08      	ldr	r2, [sp, #32]
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	f000 80c5 	beq.w	800b024 <_dtoa_r+0x7fc>
 800ae9a:	2c00      	cmp	r4, #0
 800ae9c:	f000 80bf 	beq.w	800b01e <_dtoa_r+0x7f6>
 800aea0:	4629      	mov	r1, r5
 800aea2:	4622      	mov	r2, r4
 800aea4:	4648      	mov	r0, r9
 800aea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aea8:	f000 fcc8 	bl	800b83c <__pow5mult>
 800aeac:	9a01      	ldr	r2, [sp, #4]
 800aeae:	4601      	mov	r1, r0
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	f000 fc20 	bl	800b6f8 <__multiply>
 800aeb8:	9901      	ldr	r1, [sp, #4]
 800aeba:	9005      	str	r0, [sp, #20]
 800aebc:	4648      	mov	r0, r9
 800aebe:	f000 fb51 	bl	800b564 <_Bfree>
 800aec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aec4:	1b1b      	subs	r3, r3, r4
 800aec6:	f000 80b0 	beq.w	800b02a <_dtoa_r+0x802>
 800aeca:	9905      	ldr	r1, [sp, #20]
 800aecc:	461a      	mov	r2, r3
 800aece:	4648      	mov	r0, r9
 800aed0:	f000 fcb4 	bl	800b83c <__pow5mult>
 800aed4:	9001      	str	r0, [sp, #4]
 800aed6:	2101      	movs	r1, #1
 800aed8:	4648      	mov	r0, r9
 800aeda:	f000 fbf7 	bl	800b6cc <__i2b>
 800aede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aee0:	4604      	mov	r4, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 81da 	beq.w	800b29c <_dtoa_r+0xa74>
 800aee8:	461a      	mov	r2, r3
 800aeea:	4601      	mov	r1, r0
 800aeec:	4648      	mov	r0, r9
 800aeee:	f000 fca5 	bl	800b83c <__pow5mult>
 800aef2:	9b07      	ldr	r3, [sp, #28]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	4604      	mov	r4, r0
 800aef8:	f300 80a0 	bgt.w	800b03c <_dtoa_r+0x814>
 800aefc:	9b02      	ldr	r3, [sp, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 8096 	bne.w	800b030 <_dtoa_r+0x808>
 800af04:	9b03      	ldr	r3, [sp, #12]
 800af06:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	f040 8092 	bne.w	800b034 <_dtoa_r+0x80c>
 800af10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800af14:	0d12      	lsrs	r2, r2, #20
 800af16:	0512      	lsls	r2, r2, #20
 800af18:	2a00      	cmp	r2, #0
 800af1a:	f000 808d 	beq.w	800b038 <_dtoa_r+0x810>
 800af1e:	9b04      	ldr	r3, [sp, #16]
 800af20:	3301      	adds	r3, #1
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	9b06      	ldr	r3, [sp, #24]
 800af26:	3301      	adds	r3, #1
 800af28:	9306      	str	r3, [sp, #24]
 800af2a:	2301      	movs	r3, #1
 800af2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 81b9 	beq.w	800b2a8 <_dtoa_r+0xa80>
 800af36:	6922      	ldr	r2, [r4, #16]
 800af38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af3c:	6910      	ldr	r0, [r2, #16]
 800af3e:	f000 fb79 	bl	800b634 <__hi0bits>
 800af42:	f1c0 0020 	rsb	r0, r0, #32
 800af46:	9b06      	ldr	r3, [sp, #24]
 800af48:	4418      	add	r0, r3
 800af4a:	f010 001f 	ands.w	r0, r0, #31
 800af4e:	f000 8081 	beq.w	800b054 <_dtoa_r+0x82c>
 800af52:	f1c0 0220 	rsb	r2, r0, #32
 800af56:	2a04      	cmp	r2, #4
 800af58:	dd73      	ble.n	800b042 <_dtoa_r+0x81a>
 800af5a:	9b04      	ldr	r3, [sp, #16]
 800af5c:	f1c0 001c 	rsb	r0, r0, #28
 800af60:	4403      	add	r3, r0
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	9b06      	ldr	r3, [sp, #24]
 800af66:	4406      	add	r6, r0
 800af68:	4403      	add	r3, r0
 800af6a:	9306      	str	r3, [sp, #24]
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dd05      	ble.n	800af7e <_dtoa_r+0x756>
 800af72:	9901      	ldr	r1, [sp, #4]
 800af74:	461a      	mov	r2, r3
 800af76:	4648      	mov	r0, r9
 800af78:	f000 fcba 	bl	800b8f0 <__lshift>
 800af7c:	9001      	str	r0, [sp, #4]
 800af7e:	9b06      	ldr	r3, [sp, #24]
 800af80:	2b00      	cmp	r3, #0
 800af82:	dd05      	ble.n	800af90 <_dtoa_r+0x768>
 800af84:	4621      	mov	r1, r4
 800af86:	461a      	mov	r2, r3
 800af88:	4648      	mov	r0, r9
 800af8a:	f000 fcb1 	bl	800b8f0 <__lshift>
 800af8e:	4604      	mov	r4, r0
 800af90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af92:	2b00      	cmp	r3, #0
 800af94:	d060      	beq.n	800b058 <_dtoa_r+0x830>
 800af96:	9801      	ldr	r0, [sp, #4]
 800af98:	4621      	mov	r1, r4
 800af9a:	f000 fd15 	bl	800b9c8 <__mcmp>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	da5a      	bge.n	800b058 <_dtoa_r+0x830>
 800afa2:	f108 33ff 	add.w	r3, r8, #4294967295
 800afa6:	9305      	str	r3, [sp, #20]
 800afa8:	9901      	ldr	r1, [sp, #4]
 800afaa:	2300      	movs	r3, #0
 800afac:	220a      	movs	r2, #10
 800afae:	4648      	mov	r0, r9
 800afb0:	f000 fafa 	bl	800b5a8 <__multadd>
 800afb4:	9b08      	ldr	r3, [sp, #32]
 800afb6:	9001      	str	r0, [sp, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 8177 	beq.w	800b2ac <_dtoa_r+0xa84>
 800afbe:	4629      	mov	r1, r5
 800afc0:	2300      	movs	r3, #0
 800afc2:	220a      	movs	r2, #10
 800afc4:	4648      	mov	r0, r9
 800afc6:	f000 faef 	bl	800b5a8 <__multadd>
 800afca:	f1bb 0f00 	cmp.w	fp, #0
 800afce:	4605      	mov	r5, r0
 800afd0:	dc6e      	bgt.n	800b0b0 <_dtoa_r+0x888>
 800afd2:	9b07      	ldr	r3, [sp, #28]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	dc48      	bgt.n	800b06a <_dtoa_r+0x842>
 800afd8:	e06a      	b.n	800b0b0 <_dtoa_r+0x888>
 800afda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800afe0:	e739      	b.n	800ae56 <_dtoa_r+0x62e>
 800afe2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	db07      	blt.n	800affa <_dtoa_r+0x7d2>
 800afea:	f1ba 0f00 	cmp.w	sl, #0
 800afee:	eba3 0404 	sub.w	r4, r3, r4
 800aff2:	db0b      	blt.n	800b00c <_dtoa_r+0x7e4>
 800aff4:	9e04      	ldr	r6, [sp, #16]
 800aff6:	4652      	mov	r2, sl
 800aff8:	e72f      	b.n	800ae5a <_dtoa_r+0x632>
 800affa:	1ae2      	subs	r2, r4, r3
 800affc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800affe:	9e04      	ldr	r6, [sp, #16]
 800b000:	4413      	add	r3, r2
 800b002:	930a      	str	r3, [sp, #40]	@ 0x28
 800b004:	4652      	mov	r2, sl
 800b006:	4623      	mov	r3, r4
 800b008:	2400      	movs	r4, #0
 800b00a:	e726      	b.n	800ae5a <_dtoa_r+0x632>
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	eba2 060a 	sub.w	r6, r2, sl
 800b012:	2200      	movs	r2, #0
 800b014:	e721      	b.n	800ae5a <_dtoa_r+0x632>
 800b016:	9e04      	ldr	r6, [sp, #16]
 800b018:	9d08      	ldr	r5, [sp, #32]
 800b01a:	461c      	mov	r4, r3
 800b01c:	e72a      	b.n	800ae74 <_dtoa_r+0x64c>
 800b01e:	9a01      	ldr	r2, [sp, #4]
 800b020:	9205      	str	r2, [sp, #20]
 800b022:	e752      	b.n	800aeca <_dtoa_r+0x6a2>
 800b024:	9901      	ldr	r1, [sp, #4]
 800b026:	461a      	mov	r2, r3
 800b028:	e751      	b.n	800aece <_dtoa_r+0x6a6>
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	e752      	b.n	800aed6 <_dtoa_r+0x6ae>
 800b030:	2300      	movs	r3, #0
 800b032:	e77b      	b.n	800af2c <_dtoa_r+0x704>
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	e779      	b.n	800af2c <_dtoa_r+0x704>
 800b038:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b03a:	e778      	b.n	800af2e <_dtoa_r+0x706>
 800b03c:	2300      	movs	r3, #0
 800b03e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b040:	e779      	b.n	800af36 <_dtoa_r+0x70e>
 800b042:	d093      	beq.n	800af6c <_dtoa_r+0x744>
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	321c      	adds	r2, #28
 800b048:	4413      	add	r3, r2
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	9b06      	ldr	r3, [sp, #24]
 800b04e:	4416      	add	r6, r2
 800b050:	4413      	add	r3, r2
 800b052:	e78a      	b.n	800af6a <_dtoa_r+0x742>
 800b054:	4602      	mov	r2, r0
 800b056:	e7f5      	b.n	800b044 <_dtoa_r+0x81c>
 800b058:	f1ba 0f00 	cmp.w	sl, #0
 800b05c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b060:	46d3      	mov	fp, sl
 800b062:	dc21      	bgt.n	800b0a8 <_dtoa_r+0x880>
 800b064:	9b07      	ldr	r3, [sp, #28]
 800b066:	2b02      	cmp	r3, #2
 800b068:	dd1e      	ble.n	800b0a8 <_dtoa_r+0x880>
 800b06a:	f1bb 0f00 	cmp.w	fp, #0
 800b06e:	f47f addc 	bne.w	800ac2a <_dtoa_r+0x402>
 800b072:	4621      	mov	r1, r4
 800b074:	465b      	mov	r3, fp
 800b076:	2205      	movs	r2, #5
 800b078:	4648      	mov	r0, r9
 800b07a:	f000 fa95 	bl	800b5a8 <__multadd>
 800b07e:	4601      	mov	r1, r0
 800b080:	4604      	mov	r4, r0
 800b082:	9801      	ldr	r0, [sp, #4]
 800b084:	f000 fca0 	bl	800b9c8 <__mcmp>
 800b088:	2800      	cmp	r0, #0
 800b08a:	f77f adce 	ble.w	800ac2a <_dtoa_r+0x402>
 800b08e:	463e      	mov	r6, r7
 800b090:	2331      	movs	r3, #49	@ 0x31
 800b092:	f806 3b01 	strb.w	r3, [r6], #1
 800b096:	9b05      	ldr	r3, [sp, #20]
 800b098:	3301      	adds	r3, #1
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	e5c9      	b.n	800ac32 <_dtoa_r+0x40a>
 800b09e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b0a2:	4654      	mov	r4, sl
 800b0a4:	4625      	mov	r5, r4
 800b0a6:	e7f2      	b.n	800b08e <_dtoa_r+0x866>
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f000 8102 	beq.w	800b2b4 <_dtoa_r+0xa8c>
 800b0b0:	2e00      	cmp	r6, #0
 800b0b2:	dd05      	ble.n	800b0c0 <_dtoa_r+0x898>
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4632      	mov	r2, r6
 800b0b8:	4648      	mov	r0, r9
 800b0ba:	f000 fc19 	bl	800b8f0 <__lshift>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d058      	beq.n	800b178 <_dtoa_r+0x950>
 800b0c6:	6869      	ldr	r1, [r5, #4]
 800b0c8:	4648      	mov	r0, r9
 800b0ca:	f000 fa0b 	bl	800b4e4 <_Balloc>
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	b928      	cbnz	r0, 800b0de <_dtoa_r+0x8b6>
 800b0d2:	4b82      	ldr	r3, [pc, #520]	@ (800b2dc <_dtoa_r+0xab4>)
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0da:	f7ff bbbe 	b.w	800a85a <_dtoa_r+0x32>
 800b0de:	692a      	ldr	r2, [r5, #16]
 800b0e0:	3202      	adds	r2, #2
 800b0e2:	0092      	lsls	r2, r2, #2
 800b0e4:	f105 010c 	add.w	r1, r5, #12
 800b0e8:	300c      	adds	r0, #12
 800b0ea:	f000 fff7 	bl	800c0dc <memcpy>
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4648      	mov	r0, r9
 800b0f4:	f000 fbfc 	bl	800b8f0 <__lshift>
 800b0f8:	1c7b      	adds	r3, r7, #1
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	eb07 030b 	add.w	r3, r7, fp
 800b100:	9309      	str	r3, [sp, #36]	@ 0x24
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	46a8      	mov	r8, r5
 800b10a:	9308      	str	r3, [sp, #32]
 800b10c:	4605      	mov	r5, r0
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	9801      	ldr	r0, [sp, #4]
 800b112:	4621      	mov	r1, r4
 800b114:	f103 3bff 	add.w	fp, r3, #4294967295
 800b118:	f7ff fafd 	bl	800a716 <quorem>
 800b11c:	4641      	mov	r1, r8
 800b11e:	9002      	str	r0, [sp, #8]
 800b120:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b124:	9801      	ldr	r0, [sp, #4]
 800b126:	f000 fc4f 	bl	800b9c8 <__mcmp>
 800b12a:	462a      	mov	r2, r5
 800b12c:	9006      	str	r0, [sp, #24]
 800b12e:	4621      	mov	r1, r4
 800b130:	4648      	mov	r0, r9
 800b132:	f000 fc65 	bl	800ba00 <__mdiff>
 800b136:	68c2      	ldr	r2, [r0, #12]
 800b138:	4606      	mov	r6, r0
 800b13a:	b9fa      	cbnz	r2, 800b17c <_dtoa_r+0x954>
 800b13c:	4601      	mov	r1, r0
 800b13e:	9801      	ldr	r0, [sp, #4]
 800b140:	f000 fc42 	bl	800b9c8 <__mcmp>
 800b144:	4602      	mov	r2, r0
 800b146:	4631      	mov	r1, r6
 800b148:	4648      	mov	r0, r9
 800b14a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b14c:	f000 fa0a 	bl	800b564 <_Bfree>
 800b150:	9b07      	ldr	r3, [sp, #28]
 800b152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b154:	9e04      	ldr	r6, [sp, #16]
 800b156:	ea42 0103 	orr.w	r1, r2, r3
 800b15a:	9b08      	ldr	r3, [sp, #32]
 800b15c:	4319      	orrs	r1, r3
 800b15e:	d10f      	bne.n	800b180 <_dtoa_r+0x958>
 800b160:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b164:	d028      	beq.n	800b1b8 <_dtoa_r+0x990>
 800b166:	9b06      	ldr	r3, [sp, #24]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dd02      	ble.n	800b172 <_dtoa_r+0x94a>
 800b16c:	9b02      	ldr	r3, [sp, #8]
 800b16e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b172:	f88b a000 	strb.w	sl, [fp]
 800b176:	e55e      	b.n	800ac36 <_dtoa_r+0x40e>
 800b178:	4628      	mov	r0, r5
 800b17a:	e7bd      	b.n	800b0f8 <_dtoa_r+0x8d0>
 800b17c:	2201      	movs	r2, #1
 800b17e:	e7e2      	b.n	800b146 <_dtoa_r+0x91e>
 800b180:	9b06      	ldr	r3, [sp, #24]
 800b182:	2b00      	cmp	r3, #0
 800b184:	db04      	blt.n	800b190 <_dtoa_r+0x968>
 800b186:	9907      	ldr	r1, [sp, #28]
 800b188:	430b      	orrs	r3, r1
 800b18a:	9908      	ldr	r1, [sp, #32]
 800b18c:	430b      	orrs	r3, r1
 800b18e:	d120      	bne.n	800b1d2 <_dtoa_r+0x9aa>
 800b190:	2a00      	cmp	r2, #0
 800b192:	ddee      	ble.n	800b172 <_dtoa_r+0x94a>
 800b194:	9901      	ldr	r1, [sp, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	4648      	mov	r0, r9
 800b19a:	f000 fba9 	bl	800b8f0 <__lshift>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	9001      	str	r0, [sp, #4]
 800b1a2:	f000 fc11 	bl	800b9c8 <__mcmp>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	dc03      	bgt.n	800b1b2 <_dtoa_r+0x98a>
 800b1aa:	d1e2      	bne.n	800b172 <_dtoa_r+0x94a>
 800b1ac:	f01a 0f01 	tst.w	sl, #1
 800b1b0:	d0df      	beq.n	800b172 <_dtoa_r+0x94a>
 800b1b2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b1b6:	d1d9      	bne.n	800b16c <_dtoa_r+0x944>
 800b1b8:	2339      	movs	r3, #57	@ 0x39
 800b1ba:	f88b 3000 	strb.w	r3, [fp]
 800b1be:	4633      	mov	r3, r6
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1c8:	2a39      	cmp	r2, #57	@ 0x39
 800b1ca:	d052      	beq.n	800b272 <_dtoa_r+0xa4a>
 800b1cc:	3201      	adds	r2, #1
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	e531      	b.n	800ac36 <_dtoa_r+0x40e>
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	dd07      	ble.n	800b1e6 <_dtoa_r+0x9be>
 800b1d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b1da:	d0ed      	beq.n	800b1b8 <_dtoa_r+0x990>
 800b1dc:	f10a 0301 	add.w	r3, sl, #1
 800b1e0:	f88b 3000 	strb.w	r3, [fp]
 800b1e4:	e527      	b.n	800ac36 <_dtoa_r+0x40e>
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ea:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d029      	beq.n	800b246 <_dtoa_r+0xa1e>
 800b1f2:	9901      	ldr	r1, [sp, #4]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	220a      	movs	r2, #10
 800b1f8:	4648      	mov	r0, r9
 800b1fa:	f000 f9d5 	bl	800b5a8 <__multadd>
 800b1fe:	45a8      	cmp	r8, r5
 800b200:	9001      	str	r0, [sp, #4]
 800b202:	f04f 0300 	mov.w	r3, #0
 800b206:	f04f 020a 	mov.w	r2, #10
 800b20a:	4641      	mov	r1, r8
 800b20c:	4648      	mov	r0, r9
 800b20e:	d107      	bne.n	800b220 <_dtoa_r+0x9f8>
 800b210:	f000 f9ca 	bl	800b5a8 <__multadd>
 800b214:	4680      	mov	r8, r0
 800b216:	4605      	mov	r5, r0
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	3301      	adds	r3, #1
 800b21c:	9304      	str	r3, [sp, #16]
 800b21e:	e776      	b.n	800b10e <_dtoa_r+0x8e6>
 800b220:	f000 f9c2 	bl	800b5a8 <__multadd>
 800b224:	4629      	mov	r1, r5
 800b226:	4680      	mov	r8, r0
 800b228:	2300      	movs	r3, #0
 800b22a:	220a      	movs	r2, #10
 800b22c:	4648      	mov	r0, r9
 800b22e:	f000 f9bb 	bl	800b5a8 <__multadd>
 800b232:	4605      	mov	r5, r0
 800b234:	e7f0      	b.n	800b218 <_dtoa_r+0x9f0>
 800b236:	f1bb 0f00 	cmp.w	fp, #0
 800b23a:	bfcc      	ite	gt
 800b23c:	465e      	movgt	r6, fp
 800b23e:	2601      	movle	r6, #1
 800b240:	443e      	add	r6, r7
 800b242:	f04f 0800 	mov.w	r8, #0
 800b246:	9901      	ldr	r1, [sp, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	4648      	mov	r0, r9
 800b24c:	f000 fb50 	bl	800b8f0 <__lshift>
 800b250:	4621      	mov	r1, r4
 800b252:	9001      	str	r0, [sp, #4]
 800b254:	f000 fbb8 	bl	800b9c8 <__mcmp>
 800b258:	2800      	cmp	r0, #0
 800b25a:	dcb0      	bgt.n	800b1be <_dtoa_r+0x996>
 800b25c:	d102      	bne.n	800b264 <_dtoa_r+0xa3c>
 800b25e:	f01a 0f01 	tst.w	sl, #1
 800b262:	d1ac      	bne.n	800b1be <_dtoa_r+0x996>
 800b264:	4633      	mov	r3, r6
 800b266:	461e      	mov	r6, r3
 800b268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b26c:	2a30      	cmp	r2, #48	@ 0x30
 800b26e:	d0fa      	beq.n	800b266 <_dtoa_r+0xa3e>
 800b270:	e4e1      	b.n	800ac36 <_dtoa_r+0x40e>
 800b272:	429f      	cmp	r7, r3
 800b274:	d1a4      	bne.n	800b1c0 <_dtoa_r+0x998>
 800b276:	9b05      	ldr	r3, [sp, #20]
 800b278:	3301      	adds	r3, #1
 800b27a:	9305      	str	r3, [sp, #20]
 800b27c:	2331      	movs	r3, #49	@ 0x31
 800b27e:	703b      	strb	r3, [r7, #0]
 800b280:	e4d9      	b.n	800ac36 <_dtoa_r+0x40e>
 800b282:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b284:	4f16      	ldr	r7, [pc, #88]	@ (800b2e0 <_dtoa_r+0xab8>)
 800b286:	b11b      	cbz	r3, 800b290 <_dtoa_r+0xa68>
 800b288:	f107 0308 	add.w	r3, r7, #8
 800b28c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	4638      	mov	r0, r7
 800b292:	b011      	add	sp, #68	@ 0x44
 800b294:	ecbd 8b02 	vpop	{d8}
 800b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	f77f ae2c 	ble.w	800aefc <_dtoa_r+0x6d4>
 800b2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	e64c      	b.n	800af46 <_dtoa_r+0x71e>
 800b2ac:	f1bb 0f00 	cmp.w	fp, #0
 800b2b0:	f77f aed8 	ble.w	800b064 <_dtoa_r+0x83c>
 800b2b4:	463e      	mov	r6, r7
 800b2b6:	9801      	ldr	r0, [sp, #4]
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	f7ff fa2c 	bl	800a716 <quorem>
 800b2be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b2c2:	f806 ab01 	strb.w	sl, [r6], #1
 800b2c6:	1bf2      	subs	r2, r6, r7
 800b2c8:	4593      	cmp	fp, r2
 800b2ca:	ddb4      	ble.n	800b236 <_dtoa_r+0xa0e>
 800b2cc:	9901      	ldr	r1, [sp, #4]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	4648      	mov	r0, r9
 800b2d4:	f000 f968 	bl	800b5a8 <__multadd>
 800b2d8:	9001      	str	r0, [sp, #4]
 800b2da:	e7ec      	b.n	800b2b6 <_dtoa_r+0xa8e>
 800b2dc:	0800c47c 	.word	0x0800c47c
 800b2e0:	0800c400 	.word	0x0800c400

0800b2e4 <_free_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	d041      	beq.n	800b370 <_free_r+0x8c>
 800b2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f0:	1f0c      	subs	r4, r1, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bfb8      	it	lt
 800b2f6:	18e4      	addlt	r4, r4, r3
 800b2f8:	f000 f8e8 	bl	800b4cc <__malloc_lock>
 800b2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b374 <_free_r+0x90>)
 800b2fe:	6813      	ldr	r3, [r2, #0]
 800b300:	b933      	cbnz	r3, 800b310 <_free_r+0x2c>
 800b302:	6063      	str	r3, [r4, #4]
 800b304:	6014      	str	r4, [r2, #0]
 800b306:	4628      	mov	r0, r5
 800b308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b30c:	f000 b8e4 	b.w	800b4d8 <__malloc_unlock>
 800b310:	42a3      	cmp	r3, r4
 800b312:	d908      	bls.n	800b326 <_free_r+0x42>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	1821      	adds	r1, r4, r0
 800b318:	428b      	cmp	r3, r1
 800b31a:	bf01      	itttt	eq
 800b31c:	6819      	ldreq	r1, [r3, #0]
 800b31e:	685b      	ldreq	r3, [r3, #4]
 800b320:	1809      	addeq	r1, r1, r0
 800b322:	6021      	streq	r1, [r4, #0]
 800b324:	e7ed      	b.n	800b302 <_free_r+0x1e>
 800b326:	461a      	mov	r2, r3
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	b10b      	cbz	r3, 800b330 <_free_r+0x4c>
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	d9fa      	bls.n	800b326 <_free_r+0x42>
 800b330:	6811      	ldr	r1, [r2, #0]
 800b332:	1850      	adds	r0, r2, r1
 800b334:	42a0      	cmp	r0, r4
 800b336:	d10b      	bne.n	800b350 <_free_r+0x6c>
 800b338:	6820      	ldr	r0, [r4, #0]
 800b33a:	4401      	add	r1, r0
 800b33c:	1850      	adds	r0, r2, r1
 800b33e:	4283      	cmp	r3, r0
 800b340:	6011      	str	r1, [r2, #0]
 800b342:	d1e0      	bne.n	800b306 <_free_r+0x22>
 800b344:	6818      	ldr	r0, [r3, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	6053      	str	r3, [r2, #4]
 800b34a:	4408      	add	r0, r1
 800b34c:	6010      	str	r0, [r2, #0]
 800b34e:	e7da      	b.n	800b306 <_free_r+0x22>
 800b350:	d902      	bls.n	800b358 <_free_r+0x74>
 800b352:	230c      	movs	r3, #12
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	e7d6      	b.n	800b306 <_free_r+0x22>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	1821      	adds	r1, r4, r0
 800b35c:	428b      	cmp	r3, r1
 800b35e:	bf04      	itt	eq
 800b360:	6819      	ldreq	r1, [r3, #0]
 800b362:	685b      	ldreq	r3, [r3, #4]
 800b364:	6063      	str	r3, [r4, #4]
 800b366:	bf04      	itt	eq
 800b368:	1809      	addeq	r1, r1, r0
 800b36a:	6021      	streq	r1, [r4, #0]
 800b36c:	6054      	str	r4, [r2, #4]
 800b36e:	e7ca      	b.n	800b306 <_free_r+0x22>
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	bf00      	nop
 800b374:	24000770 	.word	0x24000770

0800b378 <malloc>:
 800b378:	4b02      	ldr	r3, [pc, #8]	@ (800b384 <malloc+0xc>)
 800b37a:	4601      	mov	r1, r0
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	f000 b825 	b.w	800b3cc <_malloc_r>
 800b382:	bf00      	nop
 800b384:	2400001c 	.word	0x2400001c

0800b388 <sbrk_aligned>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	4e0f      	ldr	r6, [pc, #60]	@ (800b3c8 <sbrk_aligned+0x40>)
 800b38c:	460c      	mov	r4, r1
 800b38e:	6831      	ldr	r1, [r6, #0]
 800b390:	4605      	mov	r5, r0
 800b392:	b911      	cbnz	r1, 800b39a <sbrk_aligned+0x12>
 800b394:	f000 fe92 	bl	800c0bc <_sbrk_r>
 800b398:	6030      	str	r0, [r6, #0]
 800b39a:	4621      	mov	r1, r4
 800b39c:	4628      	mov	r0, r5
 800b39e:	f000 fe8d 	bl	800c0bc <_sbrk_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d103      	bne.n	800b3ae <sbrk_aligned+0x26>
 800b3a6:	f04f 34ff 	mov.w	r4, #4294967295
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	1cc4      	adds	r4, r0, #3
 800b3b0:	f024 0403 	bic.w	r4, r4, #3
 800b3b4:	42a0      	cmp	r0, r4
 800b3b6:	d0f8      	beq.n	800b3aa <sbrk_aligned+0x22>
 800b3b8:	1a21      	subs	r1, r4, r0
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 fe7e 	bl	800c0bc <_sbrk_r>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d1f2      	bne.n	800b3aa <sbrk_aligned+0x22>
 800b3c4:	e7ef      	b.n	800b3a6 <sbrk_aligned+0x1e>
 800b3c6:	bf00      	nop
 800b3c8:	2400076c 	.word	0x2400076c

0800b3cc <_malloc_r>:
 800b3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3d0:	1ccd      	adds	r5, r1, #3
 800b3d2:	f025 0503 	bic.w	r5, r5, #3
 800b3d6:	3508      	adds	r5, #8
 800b3d8:	2d0c      	cmp	r5, #12
 800b3da:	bf38      	it	cc
 800b3dc:	250c      	movcc	r5, #12
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	db01      	blt.n	800b3e8 <_malloc_r+0x1c>
 800b3e4:	42a9      	cmp	r1, r5
 800b3e6:	d904      	bls.n	800b3f2 <_malloc_r+0x26>
 800b3e8:	230c      	movs	r3, #12
 800b3ea:	6033      	str	r3, [r6, #0]
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4c8 <_malloc_r+0xfc>
 800b3f6:	f000 f869 	bl	800b4cc <__malloc_lock>
 800b3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fe:	461c      	mov	r4, r3
 800b400:	bb44      	cbnz	r4, 800b454 <_malloc_r+0x88>
 800b402:	4629      	mov	r1, r5
 800b404:	4630      	mov	r0, r6
 800b406:	f7ff ffbf 	bl	800b388 <sbrk_aligned>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	4604      	mov	r4, r0
 800b40e:	d158      	bne.n	800b4c2 <_malloc_r+0xf6>
 800b410:	f8d8 4000 	ldr.w	r4, [r8]
 800b414:	4627      	mov	r7, r4
 800b416:	2f00      	cmp	r7, #0
 800b418:	d143      	bne.n	800b4a2 <_malloc_r+0xd6>
 800b41a:	2c00      	cmp	r4, #0
 800b41c:	d04b      	beq.n	800b4b6 <_malloc_r+0xea>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	4639      	mov	r1, r7
 800b422:	4630      	mov	r0, r6
 800b424:	eb04 0903 	add.w	r9, r4, r3
 800b428:	f000 fe48 	bl	800c0bc <_sbrk_r>
 800b42c:	4581      	cmp	r9, r0
 800b42e:	d142      	bne.n	800b4b6 <_malloc_r+0xea>
 800b430:	6821      	ldr	r1, [r4, #0]
 800b432:	1a6d      	subs	r5, r5, r1
 800b434:	4629      	mov	r1, r5
 800b436:	4630      	mov	r0, r6
 800b438:	f7ff ffa6 	bl	800b388 <sbrk_aligned>
 800b43c:	3001      	adds	r0, #1
 800b43e:	d03a      	beq.n	800b4b6 <_malloc_r+0xea>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	442b      	add	r3, r5
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	f8d8 3000 	ldr.w	r3, [r8]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	bb62      	cbnz	r2, 800b4a8 <_malloc_r+0xdc>
 800b44e:	f8c8 7000 	str.w	r7, [r8]
 800b452:	e00f      	b.n	800b474 <_malloc_r+0xa8>
 800b454:	6822      	ldr	r2, [r4, #0]
 800b456:	1b52      	subs	r2, r2, r5
 800b458:	d420      	bmi.n	800b49c <_malloc_r+0xd0>
 800b45a:	2a0b      	cmp	r2, #11
 800b45c:	d917      	bls.n	800b48e <_malloc_r+0xc2>
 800b45e:	1961      	adds	r1, r4, r5
 800b460:	42a3      	cmp	r3, r4
 800b462:	6025      	str	r5, [r4, #0]
 800b464:	bf18      	it	ne
 800b466:	6059      	strne	r1, [r3, #4]
 800b468:	6863      	ldr	r3, [r4, #4]
 800b46a:	bf08      	it	eq
 800b46c:	f8c8 1000 	streq.w	r1, [r8]
 800b470:	5162      	str	r2, [r4, r5]
 800b472:	604b      	str	r3, [r1, #4]
 800b474:	4630      	mov	r0, r6
 800b476:	f000 f82f 	bl	800b4d8 <__malloc_unlock>
 800b47a:	f104 000b 	add.w	r0, r4, #11
 800b47e:	1d23      	adds	r3, r4, #4
 800b480:	f020 0007 	bic.w	r0, r0, #7
 800b484:	1ac2      	subs	r2, r0, r3
 800b486:	bf1c      	itt	ne
 800b488:	1a1b      	subne	r3, r3, r0
 800b48a:	50a3      	strne	r3, [r4, r2]
 800b48c:	e7af      	b.n	800b3ee <_malloc_r+0x22>
 800b48e:	6862      	ldr	r2, [r4, #4]
 800b490:	42a3      	cmp	r3, r4
 800b492:	bf0c      	ite	eq
 800b494:	f8c8 2000 	streq.w	r2, [r8]
 800b498:	605a      	strne	r2, [r3, #4]
 800b49a:	e7eb      	b.n	800b474 <_malloc_r+0xa8>
 800b49c:	4623      	mov	r3, r4
 800b49e:	6864      	ldr	r4, [r4, #4]
 800b4a0:	e7ae      	b.n	800b400 <_malloc_r+0x34>
 800b4a2:	463c      	mov	r4, r7
 800b4a4:	687f      	ldr	r7, [r7, #4]
 800b4a6:	e7b6      	b.n	800b416 <_malloc_r+0x4a>
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d1fb      	bne.n	800b4a8 <_malloc_r+0xdc>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6053      	str	r3, [r2, #4]
 800b4b4:	e7de      	b.n	800b474 <_malloc_r+0xa8>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	6033      	str	r3, [r6, #0]
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f000 f80c 	bl	800b4d8 <__malloc_unlock>
 800b4c0:	e794      	b.n	800b3ec <_malloc_r+0x20>
 800b4c2:	6005      	str	r5, [r0, #0]
 800b4c4:	e7d6      	b.n	800b474 <_malloc_r+0xa8>
 800b4c6:	bf00      	nop
 800b4c8:	24000770 	.word	0x24000770

0800b4cc <__malloc_lock>:
 800b4cc:	4801      	ldr	r0, [pc, #4]	@ (800b4d4 <__malloc_lock+0x8>)
 800b4ce:	f7ff b920 	b.w	800a712 <__retarget_lock_acquire_recursive>
 800b4d2:	bf00      	nop
 800b4d4:	24000768 	.word	0x24000768

0800b4d8 <__malloc_unlock>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	@ (800b4e0 <__malloc_unlock+0x8>)
 800b4da:	f7ff b91b 	b.w	800a714 <__retarget_lock_release_recursive>
 800b4de:	bf00      	nop
 800b4e0:	24000768 	.word	0x24000768

0800b4e4 <_Balloc>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	69c6      	ldr	r6, [r0, #28]
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	b976      	cbnz	r6, 800b50c <_Balloc+0x28>
 800b4ee:	2010      	movs	r0, #16
 800b4f0:	f7ff ff42 	bl	800b378 <malloc>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	61e0      	str	r0, [r4, #28]
 800b4f8:	b920      	cbnz	r0, 800b504 <_Balloc+0x20>
 800b4fa:	4b18      	ldr	r3, [pc, #96]	@ (800b55c <_Balloc+0x78>)
 800b4fc:	4818      	ldr	r0, [pc, #96]	@ (800b560 <_Balloc+0x7c>)
 800b4fe:	216b      	movs	r1, #107	@ 0x6b
 800b500:	f000 fdfa 	bl	800c0f8 <__assert_func>
 800b504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b508:	6006      	str	r6, [r0, #0]
 800b50a:	60c6      	str	r6, [r0, #12]
 800b50c:	69e6      	ldr	r6, [r4, #28]
 800b50e:	68f3      	ldr	r3, [r6, #12]
 800b510:	b183      	cbz	r3, 800b534 <_Balloc+0x50>
 800b512:	69e3      	ldr	r3, [r4, #28]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b51a:	b9b8      	cbnz	r0, 800b54c <_Balloc+0x68>
 800b51c:	2101      	movs	r1, #1
 800b51e:	fa01 f605 	lsl.w	r6, r1, r5
 800b522:	1d72      	adds	r2, r6, #5
 800b524:	0092      	lsls	r2, r2, #2
 800b526:	4620      	mov	r0, r4
 800b528:	f000 fe04 	bl	800c134 <_calloc_r>
 800b52c:	b160      	cbz	r0, 800b548 <_Balloc+0x64>
 800b52e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b532:	e00e      	b.n	800b552 <_Balloc+0x6e>
 800b534:	2221      	movs	r2, #33	@ 0x21
 800b536:	2104      	movs	r1, #4
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 fdfb 	bl	800c134 <_calloc_r>
 800b53e:	69e3      	ldr	r3, [r4, #28]
 800b540:	60f0      	str	r0, [r6, #12]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e4      	bne.n	800b512 <_Balloc+0x2e>
 800b548:	2000      	movs	r0, #0
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	6802      	ldr	r2, [r0, #0]
 800b54e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b552:	2300      	movs	r3, #0
 800b554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b558:	e7f7      	b.n	800b54a <_Balloc+0x66>
 800b55a:	bf00      	nop
 800b55c:	0800c40d 	.word	0x0800c40d
 800b560:	0800c48d 	.word	0x0800c48d

0800b564 <_Bfree>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	69c6      	ldr	r6, [r0, #28]
 800b568:	4605      	mov	r5, r0
 800b56a:	460c      	mov	r4, r1
 800b56c:	b976      	cbnz	r6, 800b58c <_Bfree+0x28>
 800b56e:	2010      	movs	r0, #16
 800b570:	f7ff ff02 	bl	800b378 <malloc>
 800b574:	4602      	mov	r2, r0
 800b576:	61e8      	str	r0, [r5, #28]
 800b578:	b920      	cbnz	r0, 800b584 <_Bfree+0x20>
 800b57a:	4b09      	ldr	r3, [pc, #36]	@ (800b5a0 <_Bfree+0x3c>)
 800b57c:	4809      	ldr	r0, [pc, #36]	@ (800b5a4 <_Bfree+0x40>)
 800b57e:	218f      	movs	r1, #143	@ 0x8f
 800b580:	f000 fdba 	bl	800c0f8 <__assert_func>
 800b584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b588:	6006      	str	r6, [r0, #0]
 800b58a:	60c6      	str	r6, [r0, #12]
 800b58c:	b13c      	cbz	r4, 800b59e <_Bfree+0x3a>
 800b58e:	69eb      	ldr	r3, [r5, #28]
 800b590:	6862      	ldr	r2, [r4, #4]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b598:	6021      	str	r1, [r4, #0]
 800b59a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	0800c40d 	.word	0x0800c40d
 800b5a4:	0800c48d 	.word	0x0800c48d

0800b5a8 <__multadd>:
 800b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ac:	690d      	ldr	r5, [r1, #16]
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	461e      	mov	r6, r3
 800b5b4:	f101 0c14 	add.w	ip, r1, #20
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b5be:	b299      	uxth	r1, r3
 800b5c0:	fb02 6101 	mla	r1, r2, r1, r6
 800b5c4:	0c1e      	lsrs	r6, r3, #16
 800b5c6:	0c0b      	lsrs	r3, r1, #16
 800b5c8:	fb02 3306 	mla	r3, r2, r6, r3
 800b5cc:	b289      	uxth	r1, r1
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5d4:	4285      	cmp	r5, r0
 800b5d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b5da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5de:	dcec      	bgt.n	800b5ba <__multadd+0x12>
 800b5e0:	b30e      	cbz	r6, 800b626 <__multadd+0x7e>
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	42ab      	cmp	r3, r5
 800b5e6:	dc19      	bgt.n	800b61c <__multadd+0x74>
 800b5e8:	6861      	ldr	r1, [r4, #4]
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	3101      	adds	r1, #1
 800b5ee:	f7ff ff79 	bl	800b4e4 <_Balloc>
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	b928      	cbnz	r0, 800b602 <__multadd+0x5a>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b62c <__multadd+0x84>)
 800b5fa:	480d      	ldr	r0, [pc, #52]	@ (800b630 <__multadd+0x88>)
 800b5fc:	21ba      	movs	r1, #186	@ 0xba
 800b5fe:	f000 fd7b 	bl	800c0f8 <__assert_func>
 800b602:	6922      	ldr	r2, [r4, #16]
 800b604:	3202      	adds	r2, #2
 800b606:	f104 010c 	add.w	r1, r4, #12
 800b60a:	0092      	lsls	r2, r2, #2
 800b60c:	300c      	adds	r0, #12
 800b60e:	f000 fd65 	bl	800c0dc <memcpy>
 800b612:	4621      	mov	r1, r4
 800b614:	4638      	mov	r0, r7
 800b616:	f7ff ffa5 	bl	800b564 <_Bfree>
 800b61a:	4644      	mov	r4, r8
 800b61c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b620:	3501      	adds	r5, #1
 800b622:	615e      	str	r6, [r3, #20]
 800b624:	6125      	str	r5, [r4, #16]
 800b626:	4620      	mov	r0, r4
 800b628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b62c:	0800c47c 	.word	0x0800c47c
 800b630:	0800c48d 	.word	0x0800c48d

0800b634 <__hi0bits>:
 800b634:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b638:	4603      	mov	r3, r0
 800b63a:	bf36      	itet	cc
 800b63c:	0403      	lslcc	r3, r0, #16
 800b63e:	2000      	movcs	r0, #0
 800b640:	2010      	movcc	r0, #16
 800b642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b646:	bf3c      	itt	cc
 800b648:	021b      	lslcc	r3, r3, #8
 800b64a:	3008      	addcc	r0, #8
 800b64c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b650:	bf3c      	itt	cc
 800b652:	011b      	lslcc	r3, r3, #4
 800b654:	3004      	addcc	r0, #4
 800b656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b65a:	bf3c      	itt	cc
 800b65c:	009b      	lslcc	r3, r3, #2
 800b65e:	3002      	addcc	r0, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	db05      	blt.n	800b670 <__hi0bits+0x3c>
 800b664:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b668:	f100 0001 	add.w	r0, r0, #1
 800b66c:	bf08      	it	eq
 800b66e:	2020      	moveq	r0, #32
 800b670:	4770      	bx	lr

0800b672 <__lo0bits>:
 800b672:	6803      	ldr	r3, [r0, #0]
 800b674:	4602      	mov	r2, r0
 800b676:	f013 0007 	ands.w	r0, r3, #7
 800b67a:	d00b      	beq.n	800b694 <__lo0bits+0x22>
 800b67c:	07d9      	lsls	r1, r3, #31
 800b67e:	d421      	bmi.n	800b6c4 <__lo0bits+0x52>
 800b680:	0798      	lsls	r0, r3, #30
 800b682:	bf49      	itett	mi
 800b684:	085b      	lsrmi	r3, r3, #1
 800b686:	089b      	lsrpl	r3, r3, #2
 800b688:	2001      	movmi	r0, #1
 800b68a:	6013      	strmi	r3, [r2, #0]
 800b68c:	bf5c      	itt	pl
 800b68e:	6013      	strpl	r3, [r2, #0]
 800b690:	2002      	movpl	r0, #2
 800b692:	4770      	bx	lr
 800b694:	b299      	uxth	r1, r3
 800b696:	b909      	cbnz	r1, 800b69c <__lo0bits+0x2a>
 800b698:	0c1b      	lsrs	r3, r3, #16
 800b69a:	2010      	movs	r0, #16
 800b69c:	b2d9      	uxtb	r1, r3
 800b69e:	b909      	cbnz	r1, 800b6a4 <__lo0bits+0x32>
 800b6a0:	3008      	adds	r0, #8
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	0719      	lsls	r1, r3, #28
 800b6a6:	bf04      	itt	eq
 800b6a8:	091b      	lsreq	r3, r3, #4
 800b6aa:	3004      	addeq	r0, #4
 800b6ac:	0799      	lsls	r1, r3, #30
 800b6ae:	bf04      	itt	eq
 800b6b0:	089b      	lsreq	r3, r3, #2
 800b6b2:	3002      	addeq	r0, #2
 800b6b4:	07d9      	lsls	r1, r3, #31
 800b6b6:	d403      	bmi.n	800b6c0 <__lo0bits+0x4e>
 800b6b8:	085b      	lsrs	r3, r3, #1
 800b6ba:	f100 0001 	add.w	r0, r0, #1
 800b6be:	d003      	beq.n	800b6c8 <__lo0bits+0x56>
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	4770      	bx	lr
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	4770      	bx	lr
 800b6c8:	2020      	movs	r0, #32
 800b6ca:	4770      	bx	lr

0800b6cc <__i2b>:
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	f7ff ff07 	bl	800b4e4 <_Balloc>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	b928      	cbnz	r0, 800b6e6 <__i2b+0x1a>
 800b6da:	4b05      	ldr	r3, [pc, #20]	@ (800b6f0 <__i2b+0x24>)
 800b6dc:	4805      	ldr	r0, [pc, #20]	@ (800b6f4 <__i2b+0x28>)
 800b6de:	f240 1145 	movw	r1, #325	@ 0x145
 800b6e2:	f000 fd09 	bl	800c0f8 <__assert_func>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	6144      	str	r4, [r0, #20]
 800b6ea:	6103      	str	r3, [r0, #16]
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800c47c 	.word	0x0800c47c
 800b6f4:	0800c48d 	.word	0x0800c48d

0800b6f8 <__multiply>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	4617      	mov	r7, r2
 800b6fe:	690a      	ldr	r2, [r1, #16]
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	bfa8      	it	ge
 800b706:	463b      	movge	r3, r7
 800b708:	4689      	mov	r9, r1
 800b70a:	bfa4      	itt	ge
 800b70c:	460f      	movge	r7, r1
 800b70e:	4699      	movge	r9, r3
 800b710:	693d      	ldr	r5, [r7, #16]
 800b712:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	6879      	ldr	r1, [r7, #4]
 800b71a:	eb05 060a 	add.w	r6, r5, sl
 800b71e:	42b3      	cmp	r3, r6
 800b720:	b085      	sub	sp, #20
 800b722:	bfb8      	it	lt
 800b724:	3101      	addlt	r1, #1
 800b726:	f7ff fedd 	bl	800b4e4 <_Balloc>
 800b72a:	b930      	cbnz	r0, 800b73a <__multiply+0x42>
 800b72c:	4602      	mov	r2, r0
 800b72e:	4b41      	ldr	r3, [pc, #260]	@ (800b834 <__multiply+0x13c>)
 800b730:	4841      	ldr	r0, [pc, #260]	@ (800b838 <__multiply+0x140>)
 800b732:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b736:	f000 fcdf 	bl	800c0f8 <__assert_func>
 800b73a:	f100 0414 	add.w	r4, r0, #20
 800b73e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b742:	4623      	mov	r3, r4
 800b744:	2200      	movs	r2, #0
 800b746:	4573      	cmp	r3, lr
 800b748:	d320      	bcc.n	800b78c <__multiply+0x94>
 800b74a:	f107 0814 	add.w	r8, r7, #20
 800b74e:	f109 0114 	add.w	r1, r9, #20
 800b752:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b756:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	1beb      	subs	r3, r5, r7
 800b75e:	3b15      	subs	r3, #21
 800b760:	f023 0303 	bic.w	r3, r3, #3
 800b764:	3304      	adds	r3, #4
 800b766:	3715      	adds	r7, #21
 800b768:	42bd      	cmp	r5, r7
 800b76a:	bf38      	it	cc
 800b76c:	2304      	movcc	r3, #4
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	9b02      	ldr	r3, [sp, #8]
 800b772:	9103      	str	r1, [sp, #12]
 800b774:	428b      	cmp	r3, r1
 800b776:	d80c      	bhi.n	800b792 <__multiply+0x9a>
 800b778:	2e00      	cmp	r6, #0
 800b77a:	dd03      	ble.n	800b784 <__multiply+0x8c>
 800b77c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b780:	2b00      	cmp	r3, #0
 800b782:	d055      	beq.n	800b830 <__multiply+0x138>
 800b784:	6106      	str	r6, [r0, #16]
 800b786:	b005      	add	sp, #20
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	f843 2b04 	str.w	r2, [r3], #4
 800b790:	e7d9      	b.n	800b746 <__multiply+0x4e>
 800b792:	f8b1 a000 	ldrh.w	sl, [r1]
 800b796:	f1ba 0f00 	cmp.w	sl, #0
 800b79a:	d01f      	beq.n	800b7dc <__multiply+0xe4>
 800b79c:	46c4      	mov	ip, r8
 800b79e:	46a1      	mov	r9, r4
 800b7a0:	2700      	movs	r7, #0
 800b7a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b7a6:	f8d9 3000 	ldr.w	r3, [r9]
 800b7aa:	fa1f fb82 	uxth.w	fp, r2
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7b4:	443b      	add	r3, r7
 800b7b6:	f8d9 7000 	ldr.w	r7, [r9]
 800b7ba:	0c12      	lsrs	r2, r2, #16
 800b7bc:	0c3f      	lsrs	r7, r7, #16
 800b7be:	fb0a 7202 	mla	r2, sl, r2, r7
 800b7c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7cc:	4565      	cmp	r5, ip
 800b7ce:	f849 3b04 	str.w	r3, [r9], #4
 800b7d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b7d6:	d8e4      	bhi.n	800b7a2 <__multiply+0xaa>
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	50e7      	str	r7, [r4, r3]
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7e2:	3104      	adds	r1, #4
 800b7e4:	f1b9 0f00 	cmp.w	r9, #0
 800b7e8:	d020      	beq.n	800b82c <__multiply+0x134>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	4647      	mov	r7, r8
 800b7ee:	46a4      	mov	ip, r4
 800b7f0:	f04f 0a00 	mov.w	sl, #0
 800b7f4:	f8b7 b000 	ldrh.w	fp, [r7]
 800b7f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b7fc:	fb09 220b 	mla	r2, r9, fp, r2
 800b800:	4452      	add	r2, sl
 800b802:	b29b      	uxth	r3, r3
 800b804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b808:	f84c 3b04 	str.w	r3, [ip], #4
 800b80c:	f857 3b04 	ldr.w	r3, [r7], #4
 800b810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b814:	f8bc 3000 	ldrh.w	r3, [ip]
 800b818:	fb09 330a 	mla	r3, r9, sl, r3
 800b81c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b820:	42bd      	cmp	r5, r7
 800b822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b826:	d8e5      	bhi.n	800b7f4 <__multiply+0xfc>
 800b828:	9a01      	ldr	r2, [sp, #4]
 800b82a:	50a3      	str	r3, [r4, r2]
 800b82c:	3404      	adds	r4, #4
 800b82e:	e79f      	b.n	800b770 <__multiply+0x78>
 800b830:	3e01      	subs	r6, #1
 800b832:	e7a1      	b.n	800b778 <__multiply+0x80>
 800b834:	0800c47c 	.word	0x0800c47c
 800b838:	0800c48d 	.word	0x0800c48d

0800b83c <__pow5mult>:
 800b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b840:	4615      	mov	r5, r2
 800b842:	f012 0203 	ands.w	r2, r2, #3
 800b846:	4607      	mov	r7, r0
 800b848:	460e      	mov	r6, r1
 800b84a:	d007      	beq.n	800b85c <__pow5mult+0x20>
 800b84c:	4c25      	ldr	r4, [pc, #148]	@ (800b8e4 <__pow5mult+0xa8>)
 800b84e:	3a01      	subs	r2, #1
 800b850:	2300      	movs	r3, #0
 800b852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b856:	f7ff fea7 	bl	800b5a8 <__multadd>
 800b85a:	4606      	mov	r6, r0
 800b85c:	10ad      	asrs	r5, r5, #2
 800b85e:	d03d      	beq.n	800b8dc <__pow5mult+0xa0>
 800b860:	69fc      	ldr	r4, [r7, #28]
 800b862:	b97c      	cbnz	r4, 800b884 <__pow5mult+0x48>
 800b864:	2010      	movs	r0, #16
 800b866:	f7ff fd87 	bl	800b378 <malloc>
 800b86a:	4602      	mov	r2, r0
 800b86c:	61f8      	str	r0, [r7, #28]
 800b86e:	b928      	cbnz	r0, 800b87c <__pow5mult+0x40>
 800b870:	4b1d      	ldr	r3, [pc, #116]	@ (800b8e8 <__pow5mult+0xac>)
 800b872:	481e      	ldr	r0, [pc, #120]	@ (800b8ec <__pow5mult+0xb0>)
 800b874:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b878:	f000 fc3e 	bl	800c0f8 <__assert_func>
 800b87c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b880:	6004      	str	r4, [r0, #0]
 800b882:	60c4      	str	r4, [r0, #12]
 800b884:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b88c:	b94c      	cbnz	r4, 800b8a2 <__pow5mult+0x66>
 800b88e:	f240 2171 	movw	r1, #625	@ 0x271
 800b892:	4638      	mov	r0, r7
 800b894:	f7ff ff1a 	bl	800b6cc <__i2b>
 800b898:	2300      	movs	r3, #0
 800b89a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b89e:	4604      	mov	r4, r0
 800b8a0:	6003      	str	r3, [r0, #0]
 800b8a2:	f04f 0900 	mov.w	r9, #0
 800b8a6:	07eb      	lsls	r3, r5, #31
 800b8a8:	d50a      	bpl.n	800b8c0 <__pow5mult+0x84>
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f7ff ff22 	bl	800b6f8 <__multiply>
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4680      	mov	r8, r0
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff fe53 	bl	800b564 <_Bfree>
 800b8be:	4646      	mov	r6, r8
 800b8c0:	106d      	asrs	r5, r5, #1
 800b8c2:	d00b      	beq.n	800b8dc <__pow5mult+0xa0>
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	b938      	cbnz	r0, 800b8d8 <__pow5mult+0x9c>
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7ff ff13 	bl	800b6f8 <__multiply>
 800b8d2:	6020      	str	r0, [r4, #0]
 800b8d4:	f8c0 9000 	str.w	r9, [r0]
 800b8d8:	4604      	mov	r4, r0
 800b8da:	e7e4      	b.n	800b8a6 <__pow5mult+0x6a>
 800b8dc:	4630      	mov	r0, r6
 800b8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e2:	bf00      	nop
 800b8e4:	0800c540 	.word	0x0800c540
 800b8e8:	0800c40d 	.word	0x0800c40d
 800b8ec:	0800c48d 	.word	0x0800c48d

0800b8f0 <__lshift>:
 800b8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	6849      	ldr	r1, [r1, #4]
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	4607      	mov	r7, r0
 800b902:	4691      	mov	r9, r2
 800b904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b908:	f108 0601 	add.w	r6, r8, #1
 800b90c:	42b3      	cmp	r3, r6
 800b90e:	db0b      	blt.n	800b928 <__lshift+0x38>
 800b910:	4638      	mov	r0, r7
 800b912:	f7ff fde7 	bl	800b4e4 <_Balloc>
 800b916:	4605      	mov	r5, r0
 800b918:	b948      	cbnz	r0, 800b92e <__lshift+0x3e>
 800b91a:	4602      	mov	r2, r0
 800b91c:	4b28      	ldr	r3, [pc, #160]	@ (800b9c0 <__lshift+0xd0>)
 800b91e:	4829      	ldr	r0, [pc, #164]	@ (800b9c4 <__lshift+0xd4>)
 800b920:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b924:	f000 fbe8 	bl	800c0f8 <__assert_func>
 800b928:	3101      	adds	r1, #1
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	e7ee      	b.n	800b90c <__lshift+0x1c>
 800b92e:	2300      	movs	r3, #0
 800b930:	f100 0114 	add.w	r1, r0, #20
 800b934:	f100 0210 	add.w	r2, r0, #16
 800b938:	4618      	mov	r0, r3
 800b93a:	4553      	cmp	r3, sl
 800b93c:	db33      	blt.n	800b9a6 <__lshift+0xb6>
 800b93e:	6920      	ldr	r0, [r4, #16]
 800b940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b944:	f104 0314 	add.w	r3, r4, #20
 800b948:	f019 091f 	ands.w	r9, r9, #31
 800b94c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b954:	d02b      	beq.n	800b9ae <__lshift+0xbe>
 800b956:	f1c9 0e20 	rsb	lr, r9, #32
 800b95a:	468a      	mov	sl, r1
 800b95c:	2200      	movs	r2, #0
 800b95e:	6818      	ldr	r0, [r3, #0]
 800b960:	fa00 f009 	lsl.w	r0, r0, r9
 800b964:	4310      	orrs	r0, r2
 800b966:	f84a 0b04 	str.w	r0, [sl], #4
 800b96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b96e:	459c      	cmp	ip, r3
 800b970:	fa22 f20e 	lsr.w	r2, r2, lr
 800b974:	d8f3      	bhi.n	800b95e <__lshift+0x6e>
 800b976:	ebac 0304 	sub.w	r3, ip, r4
 800b97a:	3b15      	subs	r3, #21
 800b97c:	f023 0303 	bic.w	r3, r3, #3
 800b980:	3304      	adds	r3, #4
 800b982:	f104 0015 	add.w	r0, r4, #21
 800b986:	4560      	cmp	r0, ip
 800b988:	bf88      	it	hi
 800b98a:	2304      	movhi	r3, #4
 800b98c:	50ca      	str	r2, [r1, r3]
 800b98e:	b10a      	cbz	r2, 800b994 <__lshift+0xa4>
 800b990:	f108 0602 	add.w	r6, r8, #2
 800b994:	3e01      	subs	r6, #1
 800b996:	4638      	mov	r0, r7
 800b998:	612e      	str	r6, [r5, #16]
 800b99a:	4621      	mov	r1, r4
 800b99c:	f7ff fde2 	bl	800b564 <_Bfree>
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	e7c5      	b.n	800b93a <__lshift+0x4a>
 800b9ae:	3904      	subs	r1, #4
 800b9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9b8:	459c      	cmp	ip, r3
 800b9ba:	d8f9      	bhi.n	800b9b0 <__lshift+0xc0>
 800b9bc:	e7ea      	b.n	800b994 <__lshift+0xa4>
 800b9be:	bf00      	nop
 800b9c0:	0800c47c 	.word	0x0800c47c
 800b9c4:	0800c48d 	.word	0x0800c48d

0800b9c8 <__mcmp>:
 800b9c8:	690a      	ldr	r2, [r1, #16]
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	6900      	ldr	r0, [r0, #16]
 800b9ce:	1a80      	subs	r0, r0, r2
 800b9d0:	b530      	push	{r4, r5, lr}
 800b9d2:	d10e      	bne.n	800b9f2 <__mcmp+0x2a>
 800b9d4:	3314      	adds	r3, #20
 800b9d6:	3114      	adds	r1, #20
 800b9d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9e8:	4295      	cmp	r5, r2
 800b9ea:	d003      	beq.n	800b9f4 <__mcmp+0x2c>
 800b9ec:	d205      	bcs.n	800b9fa <__mcmp+0x32>
 800b9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f2:	bd30      	pop	{r4, r5, pc}
 800b9f4:	42a3      	cmp	r3, r4
 800b9f6:	d3f3      	bcc.n	800b9e0 <__mcmp+0x18>
 800b9f8:	e7fb      	b.n	800b9f2 <__mcmp+0x2a>
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	e7f9      	b.n	800b9f2 <__mcmp+0x2a>
	...

0800ba00 <__mdiff>:
 800ba00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4689      	mov	r9, r1
 800ba06:	4606      	mov	r6, r0
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4648      	mov	r0, r9
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	f7ff ffdb 	bl	800b9c8 <__mcmp>
 800ba12:	1e05      	subs	r5, r0, #0
 800ba14:	d112      	bne.n	800ba3c <__mdiff+0x3c>
 800ba16:	4629      	mov	r1, r5
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7ff fd63 	bl	800b4e4 <_Balloc>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <__mdiff+0x2e>
 800ba22:	4b3f      	ldr	r3, [pc, #252]	@ (800bb20 <__mdiff+0x120>)
 800ba24:	f240 2137 	movw	r1, #567	@ 0x237
 800ba28:	483e      	ldr	r0, [pc, #248]	@ (800bb24 <__mdiff+0x124>)
 800ba2a:	f000 fb65 	bl	800c0f8 <__assert_func>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba34:	4610      	mov	r0, r2
 800ba36:	b003      	add	sp, #12
 800ba38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3c:	bfbc      	itt	lt
 800ba3e:	464b      	movlt	r3, r9
 800ba40:	46a1      	movlt	r9, r4
 800ba42:	4630      	mov	r0, r6
 800ba44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba48:	bfba      	itte	lt
 800ba4a:	461c      	movlt	r4, r3
 800ba4c:	2501      	movlt	r5, #1
 800ba4e:	2500      	movge	r5, #0
 800ba50:	f7ff fd48 	bl	800b4e4 <_Balloc>
 800ba54:	4602      	mov	r2, r0
 800ba56:	b918      	cbnz	r0, 800ba60 <__mdiff+0x60>
 800ba58:	4b31      	ldr	r3, [pc, #196]	@ (800bb20 <__mdiff+0x120>)
 800ba5a:	f240 2145 	movw	r1, #581	@ 0x245
 800ba5e:	e7e3      	b.n	800ba28 <__mdiff+0x28>
 800ba60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba64:	6926      	ldr	r6, [r4, #16]
 800ba66:	60c5      	str	r5, [r0, #12]
 800ba68:	f109 0310 	add.w	r3, r9, #16
 800ba6c:	f109 0514 	add.w	r5, r9, #20
 800ba70:	f104 0e14 	add.w	lr, r4, #20
 800ba74:	f100 0b14 	add.w	fp, r0, #20
 800ba78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	46d9      	mov	r9, fp
 800ba84:	f04f 0c00 	mov.w	ip, #0
 800ba88:	9b01      	ldr	r3, [sp, #4]
 800ba8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	fa1f f38a 	uxth.w	r3, sl
 800ba98:	4619      	mov	r1, r3
 800ba9a:	b283      	uxth	r3, r0
 800ba9c:	1acb      	subs	r3, r1, r3
 800ba9e:	0c00      	lsrs	r0, r0, #16
 800baa0:	4463      	add	r3, ip
 800baa2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800baa6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800baaa:	b29b      	uxth	r3, r3
 800baac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bab0:	4576      	cmp	r6, lr
 800bab2:	f849 3b04 	str.w	r3, [r9], #4
 800bab6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baba:	d8e5      	bhi.n	800ba88 <__mdiff+0x88>
 800babc:	1b33      	subs	r3, r6, r4
 800babe:	3b15      	subs	r3, #21
 800bac0:	f023 0303 	bic.w	r3, r3, #3
 800bac4:	3415      	adds	r4, #21
 800bac6:	3304      	adds	r3, #4
 800bac8:	42a6      	cmp	r6, r4
 800baca:	bf38      	it	cc
 800bacc:	2304      	movcc	r3, #4
 800bace:	441d      	add	r5, r3
 800bad0:	445b      	add	r3, fp
 800bad2:	461e      	mov	r6, r3
 800bad4:	462c      	mov	r4, r5
 800bad6:	4544      	cmp	r4, r8
 800bad8:	d30e      	bcc.n	800baf8 <__mdiff+0xf8>
 800bada:	f108 0103 	add.w	r1, r8, #3
 800bade:	1b49      	subs	r1, r1, r5
 800bae0:	f021 0103 	bic.w	r1, r1, #3
 800bae4:	3d03      	subs	r5, #3
 800bae6:	45a8      	cmp	r8, r5
 800bae8:	bf38      	it	cc
 800baea:	2100      	movcc	r1, #0
 800baec:	440b      	add	r3, r1
 800baee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baf2:	b191      	cbz	r1, 800bb1a <__mdiff+0x11a>
 800baf4:	6117      	str	r7, [r2, #16]
 800baf6:	e79d      	b.n	800ba34 <__mdiff+0x34>
 800baf8:	f854 1b04 	ldr.w	r1, [r4], #4
 800bafc:	46e6      	mov	lr, ip
 800bafe:	0c08      	lsrs	r0, r1, #16
 800bb00:	fa1c fc81 	uxtah	ip, ip, r1
 800bb04:	4471      	add	r1, lr
 800bb06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb0a:	b289      	uxth	r1, r1
 800bb0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb10:	f846 1b04 	str.w	r1, [r6], #4
 800bb14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb18:	e7dd      	b.n	800bad6 <__mdiff+0xd6>
 800bb1a:	3f01      	subs	r7, #1
 800bb1c:	e7e7      	b.n	800baee <__mdiff+0xee>
 800bb1e:	bf00      	nop
 800bb20:	0800c47c 	.word	0x0800c47c
 800bb24:	0800c48d 	.word	0x0800c48d

0800bb28 <__d2b>:
 800bb28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	2101      	movs	r1, #1
 800bb30:	ec59 8b10 	vmov	r8, r9, d0
 800bb34:	4616      	mov	r6, r2
 800bb36:	f7ff fcd5 	bl	800b4e4 <_Balloc>
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	b930      	cbnz	r0, 800bb4c <__d2b+0x24>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	4b23      	ldr	r3, [pc, #140]	@ (800bbd0 <__d2b+0xa8>)
 800bb42:	4824      	ldr	r0, [pc, #144]	@ (800bbd4 <__d2b+0xac>)
 800bb44:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb48:	f000 fad6 	bl	800c0f8 <__assert_func>
 800bb4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb54:	b10d      	cbz	r5, 800bb5a <__d2b+0x32>
 800bb56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb5a:	9301      	str	r3, [sp, #4]
 800bb5c:	f1b8 0300 	subs.w	r3, r8, #0
 800bb60:	d023      	beq.n	800bbaa <__d2b+0x82>
 800bb62:	4668      	mov	r0, sp
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	f7ff fd84 	bl	800b672 <__lo0bits>
 800bb6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb6e:	b1d0      	cbz	r0, 800bba6 <__d2b+0x7e>
 800bb70:	f1c0 0320 	rsb	r3, r0, #32
 800bb74:	fa02 f303 	lsl.w	r3, r2, r3
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	40c2      	lsrs	r2, r0
 800bb7c:	6163      	str	r3, [r4, #20]
 800bb7e:	9201      	str	r2, [sp, #4]
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	61a3      	str	r3, [r4, #24]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bf0c      	ite	eq
 800bb88:	2201      	moveq	r2, #1
 800bb8a:	2202      	movne	r2, #2
 800bb8c:	6122      	str	r2, [r4, #16]
 800bb8e:	b1a5      	cbz	r5, 800bbba <__d2b+0x92>
 800bb90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb94:	4405      	add	r5, r0
 800bb96:	603d      	str	r5, [r7, #0]
 800bb98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb9c:	6030      	str	r0, [r6, #0]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	b003      	add	sp, #12
 800bba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bba6:	6161      	str	r1, [r4, #20]
 800bba8:	e7ea      	b.n	800bb80 <__d2b+0x58>
 800bbaa:	a801      	add	r0, sp, #4
 800bbac:	f7ff fd61 	bl	800b672 <__lo0bits>
 800bbb0:	9b01      	ldr	r3, [sp, #4]
 800bbb2:	6163      	str	r3, [r4, #20]
 800bbb4:	3020      	adds	r0, #32
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	e7e8      	b.n	800bb8c <__d2b+0x64>
 800bbba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbc2:	6038      	str	r0, [r7, #0]
 800bbc4:	6918      	ldr	r0, [r3, #16]
 800bbc6:	f7ff fd35 	bl	800b634 <__hi0bits>
 800bbca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbce:	e7e5      	b.n	800bb9c <__d2b+0x74>
 800bbd0:	0800c47c 	.word	0x0800c47c
 800bbd4:	0800c48d 	.word	0x0800c48d

0800bbd8 <__sfputc_r>:
 800bbd8:	6893      	ldr	r3, [r2, #8]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	b410      	push	{r4}
 800bbe0:	6093      	str	r3, [r2, #8]
 800bbe2:	da08      	bge.n	800bbf6 <__sfputc_r+0x1e>
 800bbe4:	6994      	ldr	r4, [r2, #24]
 800bbe6:	42a3      	cmp	r3, r4
 800bbe8:	db01      	blt.n	800bbee <__sfputc_r+0x16>
 800bbea:	290a      	cmp	r1, #10
 800bbec:	d103      	bne.n	800bbf6 <__sfputc_r+0x1e>
 800bbee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbf2:	f7fe bc7c 	b.w	800a4ee <__swbuf_r>
 800bbf6:	6813      	ldr	r3, [r2, #0]
 800bbf8:	1c58      	adds	r0, r3, #1
 800bbfa:	6010      	str	r0, [r2, #0]
 800bbfc:	7019      	strb	r1, [r3, #0]
 800bbfe:	4608      	mov	r0, r1
 800bc00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <__sfputs_r>:
 800bc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc08:	4606      	mov	r6, r0
 800bc0a:	460f      	mov	r7, r1
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	18d5      	adds	r5, r2, r3
 800bc10:	42ac      	cmp	r4, r5
 800bc12:	d101      	bne.n	800bc18 <__sfputs_r+0x12>
 800bc14:	2000      	movs	r0, #0
 800bc16:	e007      	b.n	800bc28 <__sfputs_r+0x22>
 800bc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1c:	463a      	mov	r2, r7
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f7ff ffda 	bl	800bbd8 <__sfputc_r>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d1f3      	bne.n	800bc10 <__sfputs_r+0xa>
 800bc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc2c <_vfiprintf_r>:
 800bc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc30:	460d      	mov	r5, r1
 800bc32:	b09d      	sub	sp, #116	@ 0x74
 800bc34:	4614      	mov	r4, r2
 800bc36:	4698      	mov	r8, r3
 800bc38:	4606      	mov	r6, r0
 800bc3a:	b118      	cbz	r0, 800bc44 <_vfiprintf_r+0x18>
 800bc3c:	6a03      	ldr	r3, [r0, #32]
 800bc3e:	b90b      	cbnz	r3, 800bc44 <_vfiprintf_r+0x18>
 800bc40:	f7fe fb6c 	bl	800a31c <__sinit>
 800bc44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc46:	07d9      	lsls	r1, r3, #31
 800bc48:	d405      	bmi.n	800bc56 <_vfiprintf_r+0x2a>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	059a      	lsls	r2, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_vfiprintf_r+0x2a>
 800bc50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc52:	f7fe fd5e 	bl	800a712 <__retarget_lock_acquire_recursive>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	071b      	lsls	r3, r3, #28
 800bc5a:	d501      	bpl.n	800bc60 <_vfiprintf_r+0x34>
 800bc5c:	692b      	ldr	r3, [r5, #16]
 800bc5e:	b99b      	cbnz	r3, 800bc88 <_vfiprintf_r+0x5c>
 800bc60:	4629      	mov	r1, r5
 800bc62:	4630      	mov	r0, r6
 800bc64:	f7fe fc82 	bl	800a56c <__swsetup_r>
 800bc68:	b170      	cbz	r0, 800bc88 <_vfiprintf_r+0x5c>
 800bc6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6c:	07dc      	lsls	r4, r3, #31
 800bc6e:	d504      	bpl.n	800bc7a <_vfiprintf_r+0x4e>
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	b01d      	add	sp, #116	@ 0x74
 800bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	0598      	lsls	r0, r3, #22
 800bc7e:	d4f7      	bmi.n	800bc70 <_vfiprintf_r+0x44>
 800bc80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc82:	f7fe fd47 	bl	800a714 <__retarget_lock_release_recursive>
 800bc86:	e7f3      	b.n	800bc70 <_vfiprintf_r+0x44>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8c:	2320      	movs	r3, #32
 800bc8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc92:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc96:	2330      	movs	r3, #48	@ 0x30
 800bc98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be48 <_vfiprintf_r+0x21c>
 800bc9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bca0:	f04f 0901 	mov.w	r9, #1
 800bca4:	4623      	mov	r3, r4
 800bca6:	469a      	mov	sl, r3
 800bca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcac:	b10a      	cbz	r2, 800bcb2 <_vfiprintf_r+0x86>
 800bcae:	2a25      	cmp	r2, #37	@ 0x25
 800bcb0:	d1f9      	bne.n	800bca6 <_vfiprintf_r+0x7a>
 800bcb2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb6:	d00b      	beq.n	800bcd0 <_vfiprintf_r+0xa4>
 800bcb8:	465b      	mov	r3, fp
 800bcba:	4622      	mov	r2, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7ff ffa1 	bl	800bc06 <__sfputs_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f000 80a7 	beq.w	800be18 <_vfiprintf_r+0x1ec>
 800bcca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bccc:	445a      	add	r2, fp
 800bcce:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 809f 	beq.w	800be18 <_vfiprintf_r+0x1ec>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce4:	f10a 0a01 	add.w	sl, sl, #1
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	9307      	str	r3, [sp, #28]
 800bcec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcf2:	4654      	mov	r4, sl
 800bcf4:	2205      	movs	r2, #5
 800bcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfa:	4853      	ldr	r0, [pc, #332]	@ (800be48 <_vfiprintf_r+0x21c>)
 800bcfc:	f7f4 fb18 	bl	8000330 <memchr>
 800bd00:	9a04      	ldr	r2, [sp, #16]
 800bd02:	b9d8      	cbnz	r0, 800bd3c <_vfiprintf_r+0x110>
 800bd04:	06d1      	lsls	r1, r2, #27
 800bd06:	bf44      	itt	mi
 800bd08:	2320      	movmi	r3, #32
 800bd0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd0e:	0713      	lsls	r3, r2, #28
 800bd10:	bf44      	itt	mi
 800bd12:	232b      	movmi	r3, #43	@ 0x2b
 800bd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd18:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd1e:	d015      	beq.n	800bd4c <_vfiprintf_r+0x120>
 800bd20:	9a07      	ldr	r2, [sp, #28]
 800bd22:	4654      	mov	r4, sl
 800bd24:	2000      	movs	r0, #0
 800bd26:	f04f 0c0a 	mov.w	ip, #10
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd30:	3b30      	subs	r3, #48	@ 0x30
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	d94b      	bls.n	800bdce <_vfiprintf_r+0x1a2>
 800bd36:	b1b0      	cbz	r0, 800bd66 <_vfiprintf_r+0x13a>
 800bd38:	9207      	str	r2, [sp, #28]
 800bd3a:	e014      	b.n	800bd66 <_vfiprintf_r+0x13a>
 800bd3c:	eba0 0308 	sub.w	r3, r0, r8
 800bd40:	fa09 f303 	lsl.w	r3, r9, r3
 800bd44:	4313      	orrs	r3, r2
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	46a2      	mov	sl, r4
 800bd4a:	e7d2      	b.n	800bcf2 <_vfiprintf_r+0xc6>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	1d19      	adds	r1, r3, #4
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	9103      	str	r1, [sp, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	bfbb      	ittet	lt
 800bd58:	425b      	neglt	r3, r3
 800bd5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5e:	9307      	strge	r3, [sp, #28]
 800bd60:	9307      	strlt	r3, [sp, #28]
 800bd62:	bfb8      	it	lt
 800bd64:	9204      	strlt	r2, [sp, #16]
 800bd66:	7823      	ldrb	r3, [r4, #0]
 800bd68:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd6a:	d10a      	bne.n	800bd82 <_vfiprintf_r+0x156>
 800bd6c:	7863      	ldrb	r3, [r4, #1]
 800bd6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd70:	d132      	bne.n	800bdd8 <_vfiprintf_r+0x1ac>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	1d1a      	adds	r2, r3, #4
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	9203      	str	r2, [sp, #12]
 800bd7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd7e:	3402      	adds	r4, #2
 800bd80:	9305      	str	r3, [sp, #20]
 800bd82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be58 <_vfiprintf_r+0x22c>
 800bd86:	7821      	ldrb	r1, [r4, #0]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	f7f4 fad0 	bl	8000330 <memchr>
 800bd90:	b138      	cbz	r0, 800bda2 <_vfiprintf_r+0x176>
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	eba0 000a 	sub.w	r0, r0, sl
 800bd98:	2240      	movs	r2, #64	@ 0x40
 800bd9a:	4082      	lsls	r2, r0
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	3401      	adds	r4, #1
 800bda0:	9304      	str	r3, [sp, #16]
 800bda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda6:	4829      	ldr	r0, [pc, #164]	@ (800be4c <_vfiprintf_r+0x220>)
 800bda8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdac:	2206      	movs	r2, #6
 800bdae:	f7f4 fabf 	bl	8000330 <memchr>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d03f      	beq.n	800be36 <_vfiprintf_r+0x20a>
 800bdb6:	4b26      	ldr	r3, [pc, #152]	@ (800be50 <_vfiprintf_r+0x224>)
 800bdb8:	bb1b      	cbnz	r3, 800be02 <_vfiprintf_r+0x1d6>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	3307      	adds	r3, #7
 800bdbe:	f023 0307 	bic.w	r3, r3, #7
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	9303      	str	r3, [sp, #12]
 800bdc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc8:	443b      	add	r3, r7
 800bdca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdcc:	e76a      	b.n	800bca4 <_vfiprintf_r+0x78>
 800bdce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	e7a8      	b.n	800bd2a <_vfiprintf_r+0xfe>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	3401      	adds	r4, #1
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	4619      	mov	r1, r3
 800bde0:	f04f 0c0a 	mov.w	ip, #10
 800bde4:	4620      	mov	r0, r4
 800bde6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdea:	3a30      	subs	r2, #48	@ 0x30
 800bdec:	2a09      	cmp	r2, #9
 800bdee:	d903      	bls.n	800bdf8 <_vfiprintf_r+0x1cc>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d0c6      	beq.n	800bd82 <_vfiprintf_r+0x156>
 800bdf4:	9105      	str	r1, [sp, #20]
 800bdf6:	e7c4      	b.n	800bd82 <_vfiprintf_r+0x156>
 800bdf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	2301      	movs	r3, #1
 800be00:	e7f0      	b.n	800bde4 <_vfiprintf_r+0x1b8>
 800be02:	ab03      	add	r3, sp, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	462a      	mov	r2, r5
 800be08:	4b12      	ldr	r3, [pc, #72]	@ (800be54 <_vfiprintf_r+0x228>)
 800be0a:	a904      	add	r1, sp, #16
 800be0c:	4630      	mov	r0, r6
 800be0e:	f7fd fe53 	bl	8009ab8 <_printf_float>
 800be12:	4607      	mov	r7, r0
 800be14:	1c78      	adds	r0, r7, #1
 800be16:	d1d6      	bne.n	800bdc6 <_vfiprintf_r+0x19a>
 800be18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be1a:	07d9      	lsls	r1, r3, #31
 800be1c:	d405      	bmi.n	800be2a <_vfiprintf_r+0x1fe>
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	059a      	lsls	r2, r3, #22
 800be22:	d402      	bmi.n	800be2a <_vfiprintf_r+0x1fe>
 800be24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be26:	f7fe fc75 	bl	800a714 <__retarget_lock_release_recursive>
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	065b      	lsls	r3, r3, #25
 800be2e:	f53f af1f 	bmi.w	800bc70 <_vfiprintf_r+0x44>
 800be32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be34:	e71e      	b.n	800bc74 <_vfiprintf_r+0x48>
 800be36:	ab03      	add	r3, sp, #12
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	462a      	mov	r2, r5
 800be3c:	4b05      	ldr	r3, [pc, #20]	@ (800be54 <_vfiprintf_r+0x228>)
 800be3e:	a904      	add	r1, sp, #16
 800be40:	4630      	mov	r0, r6
 800be42:	f7fe f8c1 	bl	8009fc8 <_printf_i>
 800be46:	e7e4      	b.n	800be12 <_vfiprintf_r+0x1e6>
 800be48:	0800c4e6 	.word	0x0800c4e6
 800be4c:	0800c4f0 	.word	0x0800c4f0
 800be50:	08009ab9 	.word	0x08009ab9
 800be54:	0800bc07 	.word	0x0800bc07
 800be58:	0800c4ec 	.word	0x0800c4ec

0800be5c <__sflush_r>:
 800be5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be64:	0716      	lsls	r6, r2, #28
 800be66:	4605      	mov	r5, r0
 800be68:	460c      	mov	r4, r1
 800be6a:	d454      	bmi.n	800bf16 <__sflush_r+0xba>
 800be6c:	684b      	ldr	r3, [r1, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dc02      	bgt.n	800be78 <__sflush_r+0x1c>
 800be72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be74:	2b00      	cmp	r3, #0
 800be76:	dd48      	ble.n	800bf0a <__sflush_r+0xae>
 800be78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d045      	beq.n	800bf0a <__sflush_r+0xae>
 800be7e:	2300      	movs	r3, #0
 800be80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be84:	682f      	ldr	r7, [r5, #0]
 800be86:	6a21      	ldr	r1, [r4, #32]
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	d030      	beq.n	800beee <__sflush_r+0x92>
 800be8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	0759      	lsls	r1, r3, #29
 800be92:	d505      	bpl.n	800bea0 <__sflush_r+0x44>
 800be94:	6863      	ldr	r3, [r4, #4]
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be9a:	b10b      	cbz	r3, 800bea0 <__sflush_r+0x44>
 800be9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be9e:	1ad2      	subs	r2, r2, r3
 800bea0:	2300      	movs	r3, #0
 800bea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bea4:	6a21      	ldr	r1, [r4, #32]
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b0      	blx	r6
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	d106      	bne.n	800bebe <__sflush_r+0x62>
 800beb0:	6829      	ldr	r1, [r5, #0]
 800beb2:	291d      	cmp	r1, #29
 800beb4:	d82b      	bhi.n	800bf0e <__sflush_r+0xb2>
 800beb6:	4a2a      	ldr	r2, [pc, #168]	@ (800bf60 <__sflush_r+0x104>)
 800beb8:	40ca      	lsrs	r2, r1
 800beba:	07d6      	lsls	r6, r2, #31
 800bebc:	d527      	bpl.n	800bf0e <__sflush_r+0xb2>
 800bebe:	2200      	movs	r2, #0
 800bec0:	6062      	str	r2, [r4, #4]
 800bec2:	04d9      	lsls	r1, r3, #19
 800bec4:	6922      	ldr	r2, [r4, #16]
 800bec6:	6022      	str	r2, [r4, #0]
 800bec8:	d504      	bpl.n	800bed4 <__sflush_r+0x78>
 800beca:	1c42      	adds	r2, r0, #1
 800becc:	d101      	bne.n	800bed2 <__sflush_r+0x76>
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	b903      	cbnz	r3, 800bed4 <__sflush_r+0x78>
 800bed2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bed6:	602f      	str	r7, [r5, #0]
 800bed8:	b1b9      	cbz	r1, 800bf0a <__sflush_r+0xae>
 800beda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bede:	4299      	cmp	r1, r3
 800bee0:	d002      	beq.n	800bee8 <__sflush_r+0x8c>
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7ff f9fe 	bl	800b2e4 <_free_r>
 800bee8:	2300      	movs	r3, #0
 800beea:	6363      	str	r3, [r4, #52]	@ 0x34
 800beec:	e00d      	b.n	800bf0a <__sflush_r+0xae>
 800beee:	2301      	movs	r3, #1
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b0      	blx	r6
 800bef4:	4602      	mov	r2, r0
 800bef6:	1c50      	adds	r0, r2, #1
 800bef8:	d1c9      	bne.n	800be8e <__sflush_r+0x32>
 800befa:	682b      	ldr	r3, [r5, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0c6      	beq.n	800be8e <__sflush_r+0x32>
 800bf00:	2b1d      	cmp	r3, #29
 800bf02:	d001      	beq.n	800bf08 <__sflush_r+0xac>
 800bf04:	2b16      	cmp	r3, #22
 800bf06:	d11e      	bne.n	800bf46 <__sflush_r+0xea>
 800bf08:	602f      	str	r7, [r5, #0]
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e022      	b.n	800bf54 <__sflush_r+0xf8>
 800bf0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf12:	b21b      	sxth	r3, r3
 800bf14:	e01b      	b.n	800bf4e <__sflush_r+0xf2>
 800bf16:	690f      	ldr	r7, [r1, #16]
 800bf18:	2f00      	cmp	r7, #0
 800bf1a:	d0f6      	beq.n	800bf0a <__sflush_r+0xae>
 800bf1c:	0793      	lsls	r3, r2, #30
 800bf1e:	680e      	ldr	r6, [r1, #0]
 800bf20:	bf08      	it	eq
 800bf22:	694b      	ldreq	r3, [r1, #20]
 800bf24:	600f      	str	r7, [r1, #0]
 800bf26:	bf18      	it	ne
 800bf28:	2300      	movne	r3, #0
 800bf2a:	eba6 0807 	sub.w	r8, r6, r7
 800bf2e:	608b      	str	r3, [r1, #8]
 800bf30:	f1b8 0f00 	cmp.w	r8, #0
 800bf34:	dde9      	ble.n	800bf0a <__sflush_r+0xae>
 800bf36:	6a21      	ldr	r1, [r4, #32]
 800bf38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf3a:	4643      	mov	r3, r8
 800bf3c:	463a      	mov	r2, r7
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b0      	blx	r6
 800bf42:	2800      	cmp	r0, #0
 800bf44:	dc08      	bgt.n	800bf58 <__sflush_r+0xfc>
 800bf46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4e:	81a3      	strh	r3, [r4, #12]
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf58:	4407      	add	r7, r0
 800bf5a:	eba8 0800 	sub.w	r8, r8, r0
 800bf5e:	e7e7      	b.n	800bf30 <__sflush_r+0xd4>
 800bf60:	20400001 	.word	0x20400001

0800bf64 <_fflush_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	690b      	ldr	r3, [r1, #16]
 800bf68:	4605      	mov	r5, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	b913      	cbnz	r3, 800bf74 <_fflush_r+0x10>
 800bf6e:	2500      	movs	r5, #0
 800bf70:	4628      	mov	r0, r5
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	b118      	cbz	r0, 800bf7e <_fflush_r+0x1a>
 800bf76:	6a03      	ldr	r3, [r0, #32]
 800bf78:	b90b      	cbnz	r3, 800bf7e <_fflush_r+0x1a>
 800bf7a:	f7fe f9cf 	bl	800a31c <__sinit>
 800bf7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0f3      	beq.n	800bf6e <_fflush_r+0xa>
 800bf86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf88:	07d0      	lsls	r0, r2, #31
 800bf8a:	d404      	bmi.n	800bf96 <_fflush_r+0x32>
 800bf8c:	0599      	lsls	r1, r3, #22
 800bf8e:	d402      	bmi.n	800bf96 <_fflush_r+0x32>
 800bf90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf92:	f7fe fbbe 	bl	800a712 <__retarget_lock_acquire_recursive>
 800bf96:	4628      	mov	r0, r5
 800bf98:	4621      	mov	r1, r4
 800bf9a:	f7ff ff5f 	bl	800be5c <__sflush_r>
 800bf9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfa0:	07da      	lsls	r2, r3, #31
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	d4e4      	bmi.n	800bf70 <_fflush_r+0xc>
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	059b      	lsls	r3, r3, #22
 800bfaa:	d4e1      	bmi.n	800bf70 <_fflush_r+0xc>
 800bfac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfae:	f7fe fbb1 	bl	800a714 <__retarget_lock_release_recursive>
 800bfb2:	e7dd      	b.n	800bf70 <_fflush_r+0xc>

0800bfb4 <__swhatbuf_r>:
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	b096      	sub	sp, #88	@ 0x58
 800bfc0:	4615      	mov	r5, r2
 800bfc2:	461e      	mov	r6, r3
 800bfc4:	da0d      	bge.n	800bfe2 <__swhatbuf_r+0x2e>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfcc:	f04f 0100 	mov.w	r1, #0
 800bfd0:	bf14      	ite	ne
 800bfd2:	2340      	movne	r3, #64	@ 0x40
 800bfd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfd8:	2000      	movs	r0, #0
 800bfda:	6031      	str	r1, [r6, #0]
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	b016      	add	sp, #88	@ 0x58
 800bfe0:	bd70      	pop	{r4, r5, r6, pc}
 800bfe2:	466a      	mov	r2, sp
 800bfe4:	f000 f848 	bl	800c078 <_fstat_r>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	dbec      	blt.n	800bfc6 <__swhatbuf_r+0x12>
 800bfec:	9901      	ldr	r1, [sp, #4]
 800bfee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bff2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bff6:	4259      	negs	r1, r3
 800bff8:	4159      	adcs	r1, r3
 800bffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bffe:	e7eb      	b.n	800bfd8 <__swhatbuf_r+0x24>

0800c000 <__smakebuf_r>:
 800c000:	898b      	ldrh	r3, [r1, #12]
 800c002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c004:	079d      	lsls	r5, r3, #30
 800c006:	4606      	mov	r6, r0
 800c008:	460c      	mov	r4, r1
 800c00a:	d507      	bpl.n	800c01c <__smakebuf_r+0x1c>
 800c00c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c010:	6023      	str	r3, [r4, #0]
 800c012:	6123      	str	r3, [r4, #16]
 800c014:	2301      	movs	r3, #1
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	b003      	add	sp, #12
 800c01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01c:	ab01      	add	r3, sp, #4
 800c01e:	466a      	mov	r2, sp
 800c020:	f7ff ffc8 	bl	800bfb4 <__swhatbuf_r>
 800c024:	9f00      	ldr	r7, [sp, #0]
 800c026:	4605      	mov	r5, r0
 800c028:	4639      	mov	r1, r7
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7ff f9ce 	bl	800b3cc <_malloc_r>
 800c030:	b948      	cbnz	r0, 800c046 <__smakebuf_r+0x46>
 800c032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c036:	059a      	lsls	r2, r3, #22
 800c038:	d4ee      	bmi.n	800c018 <__smakebuf_r+0x18>
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	f043 0302 	orr.w	r3, r3, #2
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	e7e2      	b.n	800c00c <__smakebuf_r+0xc>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	6020      	str	r0, [r4, #0]
 800c04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c04e:	81a3      	strh	r3, [r4, #12]
 800c050:	9b01      	ldr	r3, [sp, #4]
 800c052:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c056:	b15b      	cbz	r3, 800c070 <__smakebuf_r+0x70>
 800c058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05c:	4630      	mov	r0, r6
 800c05e:	f000 f81d 	bl	800c09c <_isatty_r>
 800c062:	b128      	cbz	r0, 800c070 <__smakebuf_r+0x70>
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	f023 0303 	bic.w	r3, r3, #3
 800c06a:	f043 0301 	orr.w	r3, r3, #1
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	431d      	orrs	r5, r3
 800c074:	81a5      	strh	r5, [r4, #12]
 800c076:	e7cf      	b.n	800c018 <__smakebuf_r+0x18>

0800c078 <_fstat_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d07      	ldr	r5, [pc, #28]	@ (800c098 <_fstat_r+0x20>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	4611      	mov	r1, r2
 800c084:	602b      	str	r3, [r5, #0]
 800c086:	f7f5 f9b1 	bl	80013ec <_fstat>
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	d102      	bne.n	800c094 <_fstat_r+0x1c>
 800c08e:	682b      	ldr	r3, [r5, #0]
 800c090:	b103      	cbz	r3, 800c094 <_fstat_r+0x1c>
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	bd38      	pop	{r3, r4, r5, pc}
 800c096:	bf00      	nop
 800c098:	24000764 	.word	0x24000764

0800c09c <_isatty_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d06      	ldr	r5, [pc, #24]	@ (800c0b8 <_isatty_r+0x1c>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	602b      	str	r3, [r5, #0]
 800c0a8:	f7f5 f9b0 	bl	800140c <_isatty>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_isatty_r+0x1a>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_isatty_r+0x1a>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	24000764 	.word	0x24000764

0800c0bc <_sbrk_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d06      	ldr	r5, [pc, #24]	@ (800c0d8 <_sbrk_r+0x1c>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	f7f5 f9b8 	bl	800143c <_sbrk>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d102      	bne.n	800c0d6 <_sbrk_r+0x1a>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	b103      	cbz	r3, 800c0d6 <_sbrk_r+0x1a>
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	24000764 	.word	0x24000764

0800c0dc <memcpy>:
 800c0dc:	440a      	add	r2, r1
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e4:	d100      	bne.n	800c0e8 <memcpy+0xc>
 800c0e6:	4770      	bx	lr
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f2:	4291      	cmp	r1, r2
 800c0f4:	d1f9      	bne.n	800c0ea <memcpy+0xe>
 800c0f6:	bd10      	pop	{r4, pc}

0800c0f8 <__assert_func>:
 800c0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0fa:	4614      	mov	r4, r2
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	4b09      	ldr	r3, [pc, #36]	@ (800c124 <__assert_func+0x2c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4605      	mov	r5, r0
 800c104:	68d8      	ldr	r0, [r3, #12]
 800c106:	b14c      	cbz	r4, 800c11c <__assert_func+0x24>
 800c108:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <__assert_func+0x30>)
 800c10a:	9100      	str	r1, [sp, #0]
 800c10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c110:	4906      	ldr	r1, [pc, #24]	@ (800c12c <__assert_func+0x34>)
 800c112:	462b      	mov	r3, r5
 800c114:	f000 f842 	bl	800c19c <fiprintf>
 800c118:	f000 f852 	bl	800c1c0 <abort>
 800c11c:	4b04      	ldr	r3, [pc, #16]	@ (800c130 <__assert_func+0x38>)
 800c11e:	461c      	mov	r4, r3
 800c120:	e7f3      	b.n	800c10a <__assert_func+0x12>
 800c122:	bf00      	nop
 800c124:	2400001c 	.word	0x2400001c
 800c128:	0800c501 	.word	0x0800c501
 800c12c:	0800c50e 	.word	0x0800c50e
 800c130:	0800c53c 	.word	0x0800c53c

0800c134 <_calloc_r>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	fba1 5402 	umull	r5, r4, r1, r2
 800c13a:	b934      	cbnz	r4, 800c14a <_calloc_r+0x16>
 800c13c:	4629      	mov	r1, r5
 800c13e:	f7ff f945 	bl	800b3cc <_malloc_r>
 800c142:	4606      	mov	r6, r0
 800c144:	b928      	cbnz	r0, 800c152 <_calloc_r+0x1e>
 800c146:	4630      	mov	r0, r6
 800c148:	bd70      	pop	{r4, r5, r6, pc}
 800c14a:	220c      	movs	r2, #12
 800c14c:	6002      	str	r2, [r0, #0]
 800c14e:	2600      	movs	r6, #0
 800c150:	e7f9      	b.n	800c146 <_calloc_r+0x12>
 800c152:	462a      	mov	r2, r5
 800c154:	4621      	mov	r1, r4
 800c156:	f7fe fa5f 	bl	800a618 <memset>
 800c15a:	e7f4      	b.n	800c146 <_calloc_r+0x12>

0800c15c <__ascii_mbtowc>:
 800c15c:	b082      	sub	sp, #8
 800c15e:	b901      	cbnz	r1, 800c162 <__ascii_mbtowc+0x6>
 800c160:	a901      	add	r1, sp, #4
 800c162:	b142      	cbz	r2, 800c176 <__ascii_mbtowc+0x1a>
 800c164:	b14b      	cbz	r3, 800c17a <__ascii_mbtowc+0x1e>
 800c166:	7813      	ldrb	r3, [r2, #0]
 800c168:	600b      	str	r3, [r1, #0]
 800c16a:	7812      	ldrb	r2, [r2, #0]
 800c16c:	1e10      	subs	r0, r2, #0
 800c16e:	bf18      	it	ne
 800c170:	2001      	movne	r0, #1
 800c172:	b002      	add	sp, #8
 800c174:	4770      	bx	lr
 800c176:	4610      	mov	r0, r2
 800c178:	e7fb      	b.n	800c172 <__ascii_mbtowc+0x16>
 800c17a:	f06f 0001 	mvn.w	r0, #1
 800c17e:	e7f8      	b.n	800c172 <__ascii_mbtowc+0x16>

0800c180 <__ascii_wctomb>:
 800c180:	4603      	mov	r3, r0
 800c182:	4608      	mov	r0, r1
 800c184:	b141      	cbz	r1, 800c198 <__ascii_wctomb+0x18>
 800c186:	2aff      	cmp	r2, #255	@ 0xff
 800c188:	d904      	bls.n	800c194 <__ascii_wctomb+0x14>
 800c18a:	228a      	movs	r2, #138	@ 0x8a
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	f04f 30ff 	mov.w	r0, #4294967295
 800c192:	4770      	bx	lr
 800c194:	700a      	strb	r2, [r1, #0]
 800c196:	2001      	movs	r0, #1
 800c198:	4770      	bx	lr
	...

0800c19c <fiprintf>:
 800c19c:	b40e      	push	{r1, r2, r3}
 800c19e:	b503      	push	{r0, r1, lr}
 800c1a0:	4601      	mov	r1, r0
 800c1a2:	ab03      	add	r3, sp, #12
 800c1a4:	4805      	ldr	r0, [pc, #20]	@ (800c1bc <fiprintf+0x20>)
 800c1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	f7ff fd3d 	bl	800bc2c <_vfiprintf_r>
 800c1b2:	b002      	add	sp, #8
 800c1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1b8:	b003      	add	sp, #12
 800c1ba:	4770      	bx	lr
 800c1bc:	2400001c 	.word	0x2400001c

0800c1c0 <abort>:
 800c1c0:	b508      	push	{r3, lr}
 800c1c2:	2006      	movs	r0, #6
 800c1c4:	f000 f82c 	bl	800c220 <raise>
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	f7f5 f8db 	bl	8001384 <_exit>

0800c1ce <_raise_r>:
 800c1ce:	291f      	cmp	r1, #31
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	d904      	bls.n	800c1e2 <_raise_r+0x14>
 800c1d8:	2316      	movs	r3, #22
 800c1da:	6003      	str	r3, [r0, #0]
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
 800c1e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1e4:	b112      	cbz	r2, 800c1ec <_raise_r+0x1e>
 800c1e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ea:	b94b      	cbnz	r3, 800c200 <_raise_r+0x32>
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f000 f831 	bl	800c254 <_getpid_r>
 800c1f2:	4622      	mov	r2, r4
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1fc:	f000 b818 	b.w	800c230 <_kill_r>
 800c200:	2b01      	cmp	r3, #1
 800c202:	d00a      	beq.n	800c21a <_raise_r+0x4c>
 800c204:	1c59      	adds	r1, r3, #1
 800c206:	d103      	bne.n	800c210 <_raise_r+0x42>
 800c208:	2316      	movs	r3, #22
 800c20a:	6003      	str	r3, [r0, #0]
 800c20c:	2001      	movs	r0, #1
 800c20e:	e7e7      	b.n	800c1e0 <_raise_r+0x12>
 800c210:	2100      	movs	r1, #0
 800c212:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c216:	4620      	mov	r0, r4
 800c218:	4798      	blx	r3
 800c21a:	2000      	movs	r0, #0
 800c21c:	e7e0      	b.n	800c1e0 <_raise_r+0x12>
	...

0800c220 <raise>:
 800c220:	4b02      	ldr	r3, [pc, #8]	@ (800c22c <raise+0xc>)
 800c222:	4601      	mov	r1, r0
 800c224:	6818      	ldr	r0, [r3, #0]
 800c226:	f7ff bfd2 	b.w	800c1ce <_raise_r>
 800c22a:	bf00      	nop
 800c22c:	2400001c 	.word	0x2400001c

0800c230 <_kill_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d07      	ldr	r5, [pc, #28]	@ (800c250 <_kill_r+0x20>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	602b      	str	r3, [r5, #0]
 800c23e:	f7f5 f891 	bl	8001364 <_kill>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d102      	bne.n	800c24c <_kill_r+0x1c>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	b103      	cbz	r3, 800c24c <_kill_r+0x1c>
 800c24a:	6023      	str	r3, [r4, #0]
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
 800c24e:	bf00      	nop
 800c250:	24000764 	.word	0x24000764

0800c254 <_getpid_r>:
 800c254:	f7f5 b87e 	b.w	8001354 <_getpid>

0800c258 <_init>:
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	bf00      	nop
 800c25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25e:	bc08      	pop	{r3}
 800c260:	469e      	mov	lr, r3
 800c262:	4770      	bx	lr

0800c264 <_fini>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	bf00      	nop
 800c268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26a:	bc08      	pop	{r3}
 800c26c:	469e      	mov	lr, r3
 800c26e:	4770      	bx	lr
