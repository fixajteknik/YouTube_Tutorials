
sadeh723loradma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800bf98  0800bf98  0000cf98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c46c  0800c46c  0000d46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c474  0800c474  0000d474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800c47c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000418  240001d8  0800c654  0000e1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005f0  0800c654  0000e5f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001129e  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022bc  00000000  00000000  0001f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bf8  00000000  00000000  00021760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000930  00000000  00000000  00022358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032a00  00000000  00000000  00022c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000114e2  00000000  00000000  00055688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00143257  00000000  00000000  00066b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a9dc1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f80  00000000  00000000  001a9e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  001add84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bf80 	.word	0x0800bf80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800bf80 	.word	0x0800bf80

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <HAL_UART_RxCpltCallback+0x40>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d111      	bne.n	8000742 <HAL_UART_RxCpltCallback+0x36>
		// Gelen veriyi struct'a aktar
		memcpy(&receivedData, rxBuffer, sizeof(Signal2));
 800071e:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <HAL_UART_RxCpltCallback+0x44>)
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_UART_RxCpltCallback+0x48>)
 8000722:	4614      	mov	r4, r2
 8000724:	461d      	mov	r5, r3
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000732:	c407      	stmia	r4!, {r0, r1, r2}
 8000734:	7023      	strb	r3, [r4, #0]
		dataReady = 1; // Yeni veri işareti koy
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <HAL_UART_RxCpltCallback+0x4c>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		printf("data gelfi\r\n");
 800073c:	4807      	ldr	r0, [pc, #28]	@ (800075c <HAL_UART_RxCpltCallback+0x50>)
 800073e:	f009 fd1f 	bl	800a180 <puts>
	}
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bdb0      	pop	{r4, r5, r7, pc}
 800074a:	bf00      	nop
 800074c:	40004400 	.word	0x40004400
 8000750:	2400043c 	.word	0x2400043c
 8000754:	2400046c 	.word	0x2400046c
 8000758:	24000499 	.word	0x24000499
 800075c:	0800bf98 	.word	0x0800bf98

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000766:	f000 fad1 	bl	8000d0c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fe13 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f86f 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f98b 	bl	8000a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000776:	f000 f961 	bl	8000a3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800077a:	f000 f8c7 	bl	800090c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f911 	bl	80009a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(Signal2));
 8000782:	222d      	movs	r2, #45	@ 0x2d
 8000784:	4921      	ldr	r1, [pc, #132]	@ (800080c <main+0xac>)
 8000786:	4822      	ldr	r0, [pc, #136]	@ (8000810 <main+0xb0>)
 8000788:	f006 ff30 	bl	80075ec <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Merhaba Fixaj\r\n\r\n \r\n");
 800078c:	4821      	ldr	r0, [pc, #132]	@ (8000814 <main+0xb4>)
 800078e:	f009 fcf7 	bl	800a180 <puts>
	  	  		if (dataReady) {
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <main+0xb8>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d032      	beq.n	8000802 <main+0xa2>
	  	  			dataReady = 0; // Veri işaretini sıfırla
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <main+0xb8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]

	  	  			// Şifre kontrolü
	  	  			if (strcmp(receivedData.sifre, "Fixaj.com") == 0) {
 80007a2:	491e      	ldr	r1, [pc, #120]	@ (800081c <main+0xbc>)
 80007a4:	481e      	ldr	r0, [pc, #120]	@ (8000820 <main+0xc0>)
 80007a6:	f7ff fdb3 	bl	8000310 <strcmp>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d125      	bne.n	80007fc <main+0x9c>
	  	  				printf("Şifre doğru\r\n");
 80007b0:	481c      	ldr	r0, [pc, #112]	@ (8000824 <main+0xc4>)
 80007b2:	f009 fce5 	bl	800a180 <puts>
	  	  				printf("Konum: %s\r\n", receivedData.konum);
 80007b6:	491c      	ldr	r1, [pc, #112]	@ (8000828 <main+0xc8>)
 80007b8:	481c      	ldr	r0, [pc, #112]	@ (800082c <main+0xcc>)
 80007ba:	f009 fc79 	bl	800a0b0 <iprintf>
	  	  				printf("Buton durumu: %s\r\n",
	  	  						receivedData.btn1 ? "Aktif" : "Pasif");
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <main+0xc0>)
 80007c0:	7f9b      	ldrb	r3, [r3, #30]
	  	  				printf("Buton durumu: %s\r\n",
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <main+0x6a>
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <main+0xd0>)
 80007c8:	e000      	b.n	80007cc <main+0x6c>
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <main+0xd4>)
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	@ (8000838 <main+0xd8>)
 80007d0:	f009 fc6e 	bl	800a0b0 <iprintf>

	  	  				// Float koordinat için btn2'yi dönüştür
	  	  				float koordinat = *(float*) (receivedData.btn2);
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <main+0xdc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	607b      	str	r3, [r7, #4]
	  	  				printf("Koordinat: %.6f\r\n", koordinat);
 80007da:	edd7 7a01 	vldr	s15, [r7, #4]
 80007de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e2:	ec53 2b17 	vmov	r2, r3, d7
 80007e6:	4816      	ldr	r0, [pc, #88]	@ (8000840 <main+0xe0>)
 80007e8:	f009 fc62 	bl	800a0b0 <iprintf>

	  	  				// Büyük sayı için btn3'ü dönüştür
	  	  				int buyukSayi = *(int*) (receivedData.btn3);
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <main+0xe4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	603b      	str	r3, [r7, #0]
	  	  				printf("Büyük sayı: %d\r\n", buyukSayi);
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	4814      	ldr	r0, [pc, #80]	@ (8000848 <main+0xe8>)
 80007f6:	f009 fc5b 	bl	800a0b0 <iprintf>
 80007fa:	e002      	b.n	8000802 <main+0xa2>
	  	  			} else {
	  	  				printf("Şifre yanlış!\r\n");
 80007fc:	4813      	ldr	r0, [pc, #76]	@ (800084c <main+0xec>)
 80007fe:	f009 fcbf 	bl	800a180 <puts>
	  	  			}
	  	  		}

	  	  		HAL_Delay(1000); // Döngüyü yavaşlatmak için gecikme
 8000802:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000806:	f000 fe57 	bl	80014b8 <HAL_Delay>
	  printf("Merhaba Fixaj\r\n\r\n \r\n");
 800080a:	e7bf      	b.n	800078c <main+0x2c>
 800080c:	2400046c 	.word	0x2400046c
 8000810:	24000224 	.word	0x24000224
 8000814:	0800bfa4 	.word	0x0800bfa4
 8000818:	24000499 	.word	0x24000499
 800081c:	0800bfb8 	.word	0x0800bfb8
 8000820:	2400043c 	.word	0x2400043c
 8000824:	0800bfc4 	.word	0x0800bfc4
 8000828:	2400044b 	.word	0x2400044b
 800082c:	0800bfd4 	.word	0x0800bfd4
 8000830:	0800bfe0 	.word	0x0800bfe0
 8000834:	0800bfe8 	.word	0x0800bfe8
 8000838:	0800bff0 	.word	0x0800bff0
 800083c:	2400045b 	.word	0x2400045b
 8000840:	0800c004 	.word	0x0800c004
 8000844:	24000465 	.word	0x24000465
 8000848:	0800c018 	.word	0x0800c018
 800084c:	0800c02c 	.word	0x0800c02c

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09c      	sub	sp, #112	@ 0x70
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	224c      	movs	r2, #76	@ 0x4c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f009 fd6e 	bl	800a340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f009 fd68 	bl	800a340 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000870:	2002      	movs	r0, #2
 8000872:	f003 fffb 	bl	800486c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <SystemClock_Config+0xb8>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000882:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <SystemClock_Config+0xb8>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <SystemClock_Config+0xb8>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000896:	bf00      	nop
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <SystemClock_Config+0xb8>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a4:	d1f8      	bne.n	8000898 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008ae:	2340      	movs	r3, #64	@ 0x40
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 f810 	bl	80048e0 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008c6:	f000 fa4d 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	233f      	movs	r3, #63	@ 0x3f
 80008cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2101      	movs	r1, #1
 80008f0:	4618      	mov	r0, r3
 80008f2:	f004 fbcf 	bl	8005094 <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008fc:	f000 fa32 	bl	8000d64 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3770      	adds	r7, #112	@ 0x70
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58024800 	.word	0x58024800

0800090c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b22      	ldr	r3, [pc, #136]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000912:	4a23      	ldr	r2, [pc, #140]	@ (80009a0 <MX_USART2_UART_Init+0x94>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000918:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_USART2_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_USART2_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART2_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000956:	f006 fceb 	bl	8007330 <HAL_UART_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000960:	f000 fa00 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_USART2_UART_Init+0x90>)
 8000968:	f008 fde0 	bl	800952c <HAL_UARTEx_SetTxFifoThreshold>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000972:	f000 f9f7 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4808      	ldr	r0, [pc, #32]	@ (800099c <MX_USART2_UART_Init+0x90>)
 800097a:	f008 fe15 	bl	80095a8 <HAL_UARTEx_SetRxFifoThreshold>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000984:	f000 f9ee 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_USART2_UART_Init+0x90>)
 800098a:	f008 fd96 	bl	80094ba <HAL_UARTEx_DisableFifoMode>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000994:	f000 f9e6 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24000224 	.word	0x24000224
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <MX_USART3_UART_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ec:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 80009ee:	f006 fc9f 	bl	8007330 <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 f9b4 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a00:	f008 fd94 	bl	800952c <HAL_UARTEx_SetTxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 f9ab 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a12:	f008 fdc9 	bl	80095a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 f9a2 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a22:	f008 fd4a 	bl	80094ba <HAL_UARTEx_DisableFifoMode>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 f99a 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240002b8 	.word	0x240002b8
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_DMA_Init+0x4c>)
 8000a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a48:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <MX_DMA_Init+0x4c>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a52:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <MX_DMA_Init+0x4c>)
 8000a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	200b      	movs	r0, #11
 8000a66:	f000 fe26 	bl	80016b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a6a:	200b      	movs	r0, #11
 8000a6c:	f000 fe3d 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	200c      	movs	r0, #12
 8000a76:	f000 fe1e 	bl	80016b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a7a:	200c      	movs	r0, #12
 8000a7c:	f000 fe35 	bl	80016ea <HAL_NVIC_EnableIRQ>

}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024400 	.word	0x58024400

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	4a24      	ldr	r2, [pc, #144]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad0:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_GPIO_Init+0xcc>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	4816      	ldr	r0, [pc, #88]	@ (8000b5c <MX_GPIO_Init+0xd0>)
 8000b02:	f003 fe65 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buton1_Pin */
  GPIO_InitStruct.Pin = buton1_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(buton1_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4810      	ldr	r0, [pc, #64]	@ (8000b60 <MX_GPIO_Init+0xd4>)
 8000b1e:	f003 fcaf 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0xd0>)
 8000b3a:	f003 fca1 	bl	8004480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(buton1_EXTI_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2028      	movs	r0, #40	@ 0x28
 8000b44:	f000 fdb7 	bl	80016b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(buton1_EXTI_IRQn);
 8000b48:	2028      	movs	r0, #40	@ 0x28
 8000b4a:	f000 fdce 	bl	80016ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400
 8000b60:	58020800 	.word	0x58020800

08000b64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == buton1_Pin){
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b74:	d12a      	bne.n	8000bcc <HAL_GPIO_EXTI_Callback+0x68>
	    HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000b76:	2101      	movs	r1, #1
 8000b78:	4816      	ldr	r0, [pc, #88]	@ (8000bd4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b7a:	f003 fe42 	bl	8004802 <HAL_GPIO_TogglePin>

		mSignal.address_high = 0x00;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
		mSignal.address_low = 2;
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	705a      	strb	r2, [r3, #1]
		mSignal.channel = 23;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b8c:	2217      	movs	r2, #23
 8000b8e:	709a      	strb	r2, [r3, #2]

		strcpy(mSignal.sifre, "Fixaj.com");    // "Fixaj.com\0"
 8000b90:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <HAL_GPIO_EXTI_Callback+0x78>)
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b94:	cb03      	ldmia	r3!, {r0, r1}
 8000b96:	6010      	str	r0, [r2, #0]
 8000b98:	6051      	str	r1, [r2, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	8113      	strh	r3, [r2, #8]
		strcpy(mSignal.konum, "Teknofest");   // "Teknofest\0"
 8000b9e:	4a11      	ldr	r2, [pc, #68]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000ba2:	cb03      	ldmia	r3!, {r0, r1}
 8000ba4:	6010      	str	r0, [r2, #0]
 8000ba6:	6051      	str	r1, [r2, #4]
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	8113      	strh	r3, [r2, #8]
		mSignal.btn1 = true; // true yerine 1
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		*(float*) mSignal.btn2 = 37.199386f;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x88>)
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bb8:	601a      	str	r2, [r3, #0]
		*(int*) mSignal.btn3 = 1453;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000bbc:	f240 52ad 	movw	r2, #1453	@ 0x5ad
 8000bc0:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &mSignal, sizeof(mSignal));
 8000bc2:	2230      	movs	r2, #48	@ 0x30
 8000bc4:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bc6:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000bc8:	f006 fc90 	bl	80074ec <HAL_UART_Transmit_DMA>


	   // HAL_Delay(50);
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58020400 	.word	0x58020400
 8000bd8:	240001f4 	.word	0x240001f4
 8000bdc:	240001f7 	.word	0x240001f7
 8000be0:	0800bfb8 	.word	0x0800bfb8
 8000be4:	24000206 	.word	0x24000206
 8000be8:	0800c040 	.word	0x0800c040
 8000bec:	24000216 	.word	0x24000216
 8000bf0:	4214cc2c 	.word	0x4214cc2c
 8000bf4:	24000220 	.word	0x24000220
 8000bf8:	24000224 	.word	0x24000224

08000bfc <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	@ (8000c74 <HAL_UART_TxCpltCallback+0x78>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12e      	bne.n	8000c6c <HAL_UART_TxCpltCallback+0x70>
		//Turn LD2 ON
		HAL_GPIO_TogglePin(led1_GPIO_Port	, led1_Pin);
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4819      	ldr	r0, [pc, #100]	@ (8000c78 <HAL_UART_TxCpltCallback+0x7c>)
 8000c12:	f003 fdf6 	bl	8004802 <HAL_GPIO_TogglePin>
		//	char message[] = "Merhaba Dünya\r\n";

		// DMA ile UART üzerinden gönder
		//HAL_UART_Transmit_DMA(&huart2, (uint8_t*) message, strlen(message));
		//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&mSignal, sizeof(mSignal));
		printf("Address High: %02X\r\n", mSignal.address_high);
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_UART_TxCpltCallback+0x80>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4818      	ldr	r0, [pc, #96]	@ (8000c80 <HAL_UART_TxCpltCallback+0x84>)
 8000c1e:	f009 fa47 	bl	800a0b0 <iprintf>
		printf("Address Low: %02X\r\n", mSignal.address_low);
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_UART_TxCpltCallback+0x80>)
 8000c24:	785b      	ldrb	r3, [r3, #1]
 8000c26:	4619      	mov	r1, r3
 8000c28:	4816      	ldr	r0, [pc, #88]	@ (8000c84 <HAL_UART_TxCpltCallback+0x88>)
 8000c2a:	f009 fa41 	bl	800a0b0 <iprintf>
		printf("Channel: %d\r\n", mSignal.channel);
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_UART_TxCpltCallback+0x80>)
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4814      	ldr	r0, [pc, #80]	@ (8000c88 <HAL_UART_TxCpltCallback+0x8c>)
 8000c36:	f009 fa3b 	bl	800a0b0 <iprintf>
		printf("Sifre: %s\r\n", mSignal.sifre);
 8000c3a:	4914      	ldr	r1, [pc, #80]	@ (8000c8c <HAL_UART_TxCpltCallback+0x90>)
 8000c3c:	4814      	ldr	r0, [pc, #80]	@ (8000c90 <HAL_UART_TxCpltCallback+0x94>)
 8000c3e:	f009 fa37 	bl	800a0b0 <iprintf>
		printf("Konum: %s\r\n", mSignal.konum);
 8000c42:	4914      	ldr	r1, [pc, #80]	@ (8000c94 <HAL_UART_TxCpltCallback+0x98>)
 8000c44:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <HAL_UART_TxCpltCallback+0x9c>)
 8000c46:	f009 fa33 	bl	800a0b0 <iprintf>
		printf("Btn1: %d\r\n", mSignal.btn1);
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_UART_TxCpltCallback+0x80>)
 8000c4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c50:	4619      	mov	r1, r3
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <HAL_UART_TxCpltCallback+0xa0>)
 8000c54:	f009 fa2c 	bl	800a0b0 <iprintf>
		printf("Btn2 (Float): %f\r\n", *(float*) mSignal.btn2);
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_TxCpltCallback+0xa4>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c62:	ec53 2b17 	vmov	r2, r3, d7
 8000c66:	480f      	ldr	r0, [pc, #60]	@ (8000ca4 <HAL_UART_TxCpltCallback+0xa8>)
 8000c68:	f009 fa22 	bl	800a0b0 <iprintf>
	//	printf("Btn3 (Int): %d\r\n", *(int*) mSignal.btn3);

	}
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40011000 	.word	0x40011000
 8000c78:	58020400 	.word	0x58020400
 8000c7c:	240001f4 	.word	0x240001f4
 8000c80:	0800c04c 	.word	0x0800c04c
 8000c84:	0800c064 	.word	0x0800c064
 8000c88:	0800c078 	.word	0x0800c078
 8000c8c:	240001f7 	.word	0x240001f7
 8000c90:	0800c088 	.word	0x0800c088
 8000c94:	24000206 	.word	0x24000206
 8000c98:	0800bfd4 	.word	0x0800bfd4
 8000c9c:	0800c094 	.word	0x0800c094
 8000ca0:	24000216 	.word	0x24000216
 8000ca4:	0800c0a0 	.word	0x0800c0a0

08000ca8 <__io_putchar>:

int __io_putchar(int ch) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, &*c, 1, 10);
 8000cb6:	f107 010c 	add.w	r1, r7, #12
 8000cba:	230a      	movs	r3, #10
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <__io_putchar+0x28>)
 8000cc0:	f006 fb86 	bl	80073d0 <HAL_UART_Transmit>
	return ch;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240002b8 	.word	0x240002b8

08000cd4 <_write>:

int _write(int file, char *ptr, int len) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	e009      	b.n	8000cfa <_write+0x26>
		__io_putchar(*ptr++);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	60ba      	str	r2, [r7, #8]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffda 	bl	8000ca8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dbf1      	blt.n	8000ce6 <_write+0x12>
	}
	return len;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d1e:	f000 fcff 	bl	8001720 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d2e:	231f      	movs	r3, #31
 8000d30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d32:	2387      	movs	r3, #135	@ 0x87
 8000d34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fd1d 	bl	8001790 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d56:	2004      	movs	r0, #4
 8000d58:	f000 fcfa 	bl	8001750 <HAL_MPU_Enable>

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d7c:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ba      	sub	sp, #232	@ 0xe8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	22b8      	movs	r2, #184	@ 0xb8
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f009 fabb 	bl	800a340 <memset>
  if(huart->Instance==USART2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7f      	ldr	r2, [pc, #508]	@ (8000fcc <HAL_UART_MspInit+0x228>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	f040 80ab 	bne.w	8000f2c <HAL_UART_MspInit+0x188>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd6:	f04f 0202 	mov.w	r2, #2
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fcdd 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000df8:	f7ff ffb4 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfc:	4b74      	ldr	r3, [pc, #464]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e02:	4a73      	ldr	r2, [pc, #460]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e0c:	4b70      	ldr	r3, [pc, #448]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	4a6b      	ldr	r2, [pc, #428]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2a:	4b69      	ldr	r3, [pc, #420]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e38:	2360      	movs	r3, #96	@ 0x60
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	485d      	ldr	r0, [pc, #372]	@ (8000fd4 <HAL_UART_MspInit+0x230>)
 8000e5e:	f003 fb0f 	bl	8004480 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream0;
 8000e62:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e64:	4a5d      	ldr	r2, [pc, #372]	@ (8000fdc <HAL_UART_MspInit+0x238>)
 8000e66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000e68:	4b5b      	ldr	r3, [pc, #364]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e6a:	222c      	movs	r2, #44	@ 0x2c
 8000e6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e70:	2240      	movs	r2, #64	@ 0x40
 8000e72:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e74:	4b58      	ldr	r3, [pc, #352]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7a:	4b57      	ldr	r3, [pc, #348]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e82:	4b55      	ldr	r3, [pc, #340]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e88:	4b53      	ldr	r3, [pc, #332]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e8e:	4b52      	ldr	r3, [pc, #328]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e94:	4b50      	ldr	r3, [pc, #320]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ea0:	484d      	ldr	r0, [pc, #308]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000ea2:	f000 fcb5 	bl	8001810 <HAL_DMA_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000eac:	f7ff ff5a 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a49      	ldr	r2, [pc, #292]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000eb4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000eb6:	4a48      	ldr	r2, [pc, #288]	@ (8000fd8 <HAL_UART_MspInit+0x234>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8000ebc:	4b48      	ldr	r3, [pc, #288]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ebe:	4a49      	ldr	r2, [pc, #292]	@ (8000fe4 <HAL_UART_MspInit+0x240>)
 8000ec0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000ec2:	4b47      	ldr	r3, [pc, #284]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ec4:	222b      	movs	r2, #43	@ 0x2b
 8000ec6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec8:	4b45      	ldr	r3, [pc, #276]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ece:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed4:	4b42      	ldr	r3, [pc, #264]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eda:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000edc:	4b40      	ldr	r3, [pc, #256]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000efc:	4838      	ldr	r0, [pc, #224]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000efe:	f000 fc87 	bl	8001810 <HAL_DMA_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8000f08:	f7ff ff2c 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a34      	ldr	r2, [pc, #208]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000f10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f14:	4a32      	ldr	r2, [pc, #200]	@ (8000fe0 <HAL_UART_MspInit+0x23c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2026      	movs	r0, #38	@ 0x26
 8000f20:	f000 fbc9 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f24:	2026      	movs	r0, #38	@ 0x26
 8000f26:	f000 fbe0 	bl	80016ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2a:	e04b      	b.n	8000fc4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe8 <HAL_UART_MspInit+0x244>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d146      	bne.n	8000fc4 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f36:	f04f 0202 	mov.w	r2, #2
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fc2d 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8000f58:	f7ff ff04 	bl	8000d64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f62:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a13      	ldr	r2, [pc, #76]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_UART_MspInit+0x22c>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <HAL_UART_MspInit+0x230>)
 8000fc0:	f003 fa5e 	bl	8004480 <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	37e8      	adds	r7, #232	@ 0xe8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	2400034c 	.word	0x2400034c
 8000fdc:	40020010 	.word	0x40020010
 8000fe0:	240003c4 	.word	0x240003c4
 8000fe4:	40020028 	.word	0x40020028
 8000fe8:	40004800 	.word	0x40004800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 fa19 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <DMA1_Stream0_IRQHandler+0x10>)
 8001052:	f001 ff03 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2400034c 	.word	0x2400034c

08001060 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <DMA1_Stream1_IRQHandler+0x10>)
 8001066:	f001 fef9 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	240003c4 	.word	0x240003c4

08001074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <USART2_IRQHandler+0x10>)
 800107a:	f006 fb03 	bl	8007684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	24000224 	.word	0x24000224

08001088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(buton1_Pin);
 800108c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001090:	f003 fbd1 	bl	8004836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return 1;
 800109c:	2301      	movs	r3, #1
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_kill>:

int _kill(int pid, int sig)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010b2:	f009 f997 	bl	800a3e4 <__errno>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2216      	movs	r2, #22
 80010ba:	601a      	str	r2, [r3, #0]
  return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_exit>:

void _exit (int status)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffe7 	bl	80010a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010da:	bf00      	nop
 80010dc:	e7fd      	b.n	80010da <_exit+0x12>

080010de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e00a      	b.n	8001106 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f0:	f3af 8000 	nop.w
 80010f4:	4601      	mov	r1, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	60ba      	str	r2, [r7, #8]
 80010fc:	b2ca      	uxtb	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	dbf0      	blt.n	80010f0 <_read+0x12>
  }

  return len;
 800110e:	687b      	ldr	r3, [r7, #4]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001140:	605a      	str	r2, [r3, #4]
  return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_isatty>:

int _isatty(int file)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f009 f918 	bl	800a3e4 <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	24050000 	.word	0x24050000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	2400049c 	.word	0x2400049c
 80011e8:	240005f0 	.word	0x240005f0

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f0:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <SystemInit+0x100>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ec <SystemInit+0x100>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <SystemInit+0x104>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	2b06      	cmp	r3, #6
 800120a:	d807      	bhi.n	800121c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120c:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <SystemInit+0x104>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 030f 	bic.w	r3, r3, #15
 8001214:	4a36      	ldr	r2, [pc, #216]	@ (80012f0 <SystemInit+0x104>)
 8001216:	f043 0307 	orr.w	r3, r3, #7
 800121a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800121c:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <SystemInit+0x108>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a34      	ldr	r2, [pc, #208]	@ (80012f4 <SystemInit+0x108>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001228:	4b32      	ldr	r3, [pc, #200]	@ (80012f4 <SystemInit+0x108>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800122e:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <SystemInit+0x108>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4930      	ldr	r1, [pc, #192]	@ (80012f4 <SystemInit+0x108>)
 8001234:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <SystemInit+0x10c>)
 8001236:	4013      	ands	r3, r2
 8001238:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800123a:	4b2d      	ldr	r3, [pc, #180]	@ (80012f0 <SystemInit+0x104>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <SystemInit+0x104>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 030f 	bic.w	r3, r3, #15
 800124e:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <SystemInit+0x104>)
 8001250:	f043 0307 	orr.w	r3, r3, #7
 8001254:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001256:	4b27      	ldr	r3, [pc, #156]	@ (80012f4 <SystemInit+0x108>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800125c:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <SystemInit+0x108>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <SystemInit+0x108>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <SystemInit+0x108>)
 800126a:	4a24      	ldr	r2, [pc, #144]	@ (80012fc <SystemInit+0x110>)
 800126c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <SystemInit+0x108>)
 8001270:	4a23      	ldr	r2, [pc, #140]	@ (8001300 <SystemInit+0x114>)
 8001272:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <SystemInit+0x108>)
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <SystemInit+0x118>)
 8001278:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <SystemInit+0x108>)
 800127c:	2200      	movs	r2, #0
 800127e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <SystemInit+0x108>)
 8001282:	4a20      	ldr	r2, [pc, #128]	@ (8001304 <SystemInit+0x118>)
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <SystemInit+0x108>)
 8001288:	2200      	movs	r2, #0
 800128a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <SystemInit+0x108>)
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <SystemInit+0x118>)
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <SystemInit+0x108>)
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <SystemInit+0x108>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a15      	ldr	r2, [pc, #84]	@ (80012f4 <SystemInit+0x108>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <SystemInit+0x108>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <SystemInit+0x108>)
 80012ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d113      	bne.n	80012e0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <SystemInit+0x108>)
 80012ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012be:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <SystemInit+0x108>)
 80012c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <SystemInit+0x11c>)
 80012ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <SystemInit+0x108>)
 80012d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012d6:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <SystemInit+0x108>)
 80012d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	52002000 	.word	0x52002000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80012fc:	02020200 	.word	0x02020200
 8001300:	01ff0000 	.word	0x01ff0000
 8001304:	01010280 	.word	0x01010280
 8001308:	52004000 	.word	0x52004000

0800130c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <ExitRun0Mode+0x2c>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <ExitRun0Mode+0x2c>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800131c:	bf00      	nop
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <ExitRun0Mode+0x2c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f9      	beq.n	800131e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	58024800 	.word	0x58024800

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001378 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001340:	f7ff ffe4 	bl	800130c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001344:	f7ff ff52 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f009 f83f 	bl	800a3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff f9f5 	bl	8000760 <main>
  bx  lr
 8001376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800137c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001380:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001384:	0800c47c 	.word	0x0800c47c
  ldr r2, =_sbss
 8001388:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800138c:	240005f0 	.word	0x240005f0

08001390 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC3_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139a:	2003      	movs	r0, #3
 800139c:	f000 f980 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a0:	f004 f82e 	bl	8005400 <HAL_RCC_GetSysClockFreq>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_Init+0x68>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	4913      	ldr	r1, [pc, #76]	@ (8001400 <HAL_Init+0x6c>)
 80013b2:	5ccb      	ldrb	r3, [r1, r3]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_Init+0x68>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_Init+0x6c>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <HAL_Init+0x70>)
 80013d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <HAL_Init+0x74>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f814 	bl	800140c <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e002      	b.n	80013f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ee:	f7ff fcbf 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	58024400 	.word	0x58024400
 8001400:	0800c0b4 	.word	0x0800c0b4
 8001404:	24000004 	.word	0x24000004
 8001408:	24000000 	.word	0x24000000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_InitTick+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e021      	b.n	8001464 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <HAL_InitTick+0x64>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_InitTick+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f965 	bl	8001706 <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f92f 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <HAL_InitTick+0x68>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2400000c 	.word	0x2400000c
 8001470:	24000000 	.word	0x24000000
 8001474:	24000008 	.word	0x24000008

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2400000c 	.word	0x2400000c
 800149c:	240004a0 	.word	0x240004a0

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	240004a0 	.word	0x240004a0

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2400000c 	.word	0x2400000c

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	@ (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff40 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff33 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa4 	bl	800165c <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001724:	f3bf 8f5f 	dmb	sy
}
 8001728:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <HAL_MPU_Disable+0x28>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_MPU_Disable+0x28>)
 8001730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001734:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_MPU_Disable+0x2c>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	e000ed90 	.word	0xe000ed90

08001750 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <HAL_MPU_Enable+0x38>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_MPU_Enable+0x3c>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_MPU_Enable+0x3c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800176e:	f3bf 8f4f 	dsb	sy
}
 8001772:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001774:	f3bf 8f6f 	isb	sy
}
 8001778:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed90 	.word	0xe000ed90
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	785a      	ldrb	r2, [r3, #1]
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_MPU_ConfigRegion+0x7c>)
 800179e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <HAL_MPU_ConfigRegion+0x7c>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a19      	ldr	r2, [pc, #100]	@ (800180c <HAL_MPU_ConfigRegion+0x7c>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_MPU_ConfigRegion+0x7c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7b1b      	ldrb	r3, [r3, #12]
 80017b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7adb      	ldrb	r3, [r3, #11]
 80017be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7a9b      	ldrb	r3, [r3, #10]
 80017c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7b5b      	ldrb	r3, [r3, #13]
 80017ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7b9b      	ldrb	r3, [r3, #14]
 80017d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7bdb      	ldrb	r3, [r3, #15]
 80017de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7a5b      	ldrb	r3, [r3, #9]
 80017e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7a1b      	ldrb	r3, [r3, #8]
 80017ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017fc:	6113      	str	r3, [r2, #16]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed90 	.word	0xe000ed90

08001810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fe42 	bl	80014a0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e312      	b.n	8001e4e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a66      	ldr	r2, [pc, #408]	@ (80019c8 <HAL_DMA_Init+0x1b8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d04a      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <HAL_DMA_Init+0x1bc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d045      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a63      	ldr	r2, [pc, #396]	@ (80019d0 <HAL_DMA_Init+0x1c0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d040      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a62      	ldr	r2, [pc, #392]	@ (80019d4 <HAL_DMA_Init+0x1c4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d03b      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a60      	ldr	r2, [pc, #384]	@ (80019d8 <HAL_DMA_Init+0x1c8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d036      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5f      	ldr	r2, [pc, #380]	@ (80019dc <HAL_DMA_Init+0x1cc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d031      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5d      	ldr	r2, [pc, #372]	@ (80019e0 <HAL_DMA_Init+0x1d0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02c      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5c      	ldr	r2, [pc, #368]	@ (80019e4 <HAL_DMA_Init+0x1d4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d027      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5a      	ldr	r2, [pc, #360]	@ (80019e8 <HAL_DMA_Init+0x1d8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d022      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a59      	ldr	r2, [pc, #356]	@ (80019ec <HAL_DMA_Init+0x1dc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d01d      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a57      	ldr	r2, [pc, #348]	@ (80019f0 <HAL_DMA_Init+0x1e0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d018      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a56      	ldr	r2, [pc, #344]	@ (80019f4 <HAL_DMA_Init+0x1e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a54      	ldr	r2, [pc, #336]	@ (80019f8 <HAL_DMA_Init+0x1e8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00e      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a53      	ldr	r2, [pc, #332]	@ (80019fc <HAL_DMA_Init+0x1ec>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a51      	ldr	r2, [pc, #324]	@ (8001a00 <HAL_DMA_Init+0x1f0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a50      	ldr	r2, [pc, #320]	@ (8001a04 <HAL_DMA_Init+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Init+0xbc>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_DMA_Init+0xbe>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 813c 	beq.w	8001b4c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a37      	ldr	r2, [pc, #220]	@ (80019c8 <HAL_DMA_Init+0x1b8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d04a      	beq.n	8001984 <HAL_DMA_Init+0x174>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a36      	ldr	r2, [pc, #216]	@ (80019cc <HAL_DMA_Init+0x1bc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d045      	beq.n	8001984 <HAL_DMA_Init+0x174>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a34      	ldr	r2, [pc, #208]	@ (80019d0 <HAL_DMA_Init+0x1c0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d040      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a33      	ldr	r2, [pc, #204]	@ (80019d4 <HAL_DMA_Init+0x1c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d03b      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a31      	ldr	r2, [pc, #196]	@ (80019d8 <HAL_DMA_Init+0x1c8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d036      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <HAL_DMA_Init+0x1cc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d031      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2e      	ldr	r2, [pc, #184]	@ (80019e0 <HAL_DMA_Init+0x1d0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02c      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2d      	ldr	r2, [pc, #180]	@ (80019e4 <HAL_DMA_Init+0x1d4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d027      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2b      	ldr	r2, [pc, #172]	@ (80019e8 <HAL_DMA_Init+0x1d8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d022      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2a      	ldr	r2, [pc, #168]	@ (80019ec <HAL_DMA_Init+0x1dc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01d      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <HAL_DMA_Init+0x1e0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d018      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <HAL_DMA_Init+0x1e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a25      	ldr	r2, [pc, #148]	@ (80019f8 <HAL_DMA_Init+0x1e8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00e      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a24      	ldr	r2, [pc, #144]	@ (80019fc <HAL_DMA_Init+0x1ec>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <HAL_DMA_Init+0x1f0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d004      	beq.n	8001984 <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <HAL_DMA_Init+0x1f4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d108      	bne.n	8001996 <HAL_DMA_Init+0x186>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e007      	b.n	80019a6 <HAL_DMA_Init+0x196>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019a6:	e02f      	b.n	8001a08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a8:	f7ff fd7a 	bl	80014a0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d928      	bls.n	8001a08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2220      	movs	r2, #32
 80019ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2203      	movs	r2, #3
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e242      	b.n	8001e4e <HAL_DMA_Init+0x63e>
 80019c8:	40020010 	.word	0x40020010
 80019cc:	40020028 	.word	0x40020028
 80019d0:	40020040 	.word	0x40020040
 80019d4:	40020058 	.word	0x40020058
 80019d8:	40020070 	.word	0x40020070
 80019dc:	40020088 	.word	0x40020088
 80019e0:	400200a0 	.word	0x400200a0
 80019e4:	400200b8 	.word	0x400200b8
 80019e8:	40020410 	.word	0x40020410
 80019ec:	40020428 	.word	0x40020428
 80019f0:	40020440 	.word	0x40020440
 80019f4:	40020458 	.word	0x40020458
 80019f8:	40020470 	.word	0x40020470
 80019fc:	40020488 	.word	0x40020488
 8001a00:	400204a0 	.word	0x400204a0
 8001a04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1c8      	bne.n	80019a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <HAL_DMA_Init+0x420>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b28      	cmp	r3, #40	@ 0x28
 8001a72:	d903      	bls.n	8001a7c <HAL_DMA_Init+0x26c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a7a:	d91f      	bls.n	8001abc <HAL_DMA_Init+0x2ac>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a82:	d903      	bls.n	8001a8c <HAL_DMA_Init+0x27c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b42      	cmp	r3, #66	@ 0x42
 8001a8a:	d917      	bls.n	8001abc <HAL_DMA_Init+0x2ac>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b46      	cmp	r3, #70	@ 0x46
 8001a92:	d903      	bls.n	8001a9c <HAL_DMA_Init+0x28c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b48      	cmp	r3, #72	@ 0x48
 8001a9a:	d90f      	bls.n	8001abc <HAL_DMA_Init+0x2ac>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b4e      	cmp	r3, #78	@ 0x4e
 8001aa2:	d903      	bls.n	8001aac <HAL_DMA_Init+0x29c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b52      	cmp	r3, #82	@ 0x52
 8001aaa:	d907      	bls.n	8001abc <HAL_DMA_Init+0x2ac>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b73      	cmp	r3, #115	@ 0x73
 8001ab2:	d905      	bls.n	8001ac0 <HAL_DMA_Init+0x2b0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b77      	cmp	r3, #119	@ 0x77
 8001aba:	d801      	bhi.n	8001ac0 <HAL_DMA_Init+0x2b0>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_DMA_Init+0x2b2>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001acc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f023 0307 	bic.w	r3, r3, #7
 8001ae4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d117      	bne.n	8001b28 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00e      	beq.n	8001b28 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f002 fb2e 	bl	800416c <DMA_CheckFifoParam>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2240      	movs	r2, #64	@ 0x40
 8001b1a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e192      	b.n	8001e4e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f002 fa69 	bl	8004008 <DMA_CalcBaseAndBitshift>
 8001b36:	4603      	mov	r3, r0
 8001b38:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	223f      	movs	r2, #63	@ 0x3f
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	e0c8      	b.n	8001cde <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a38      	ldr	r2, [pc, #224]	@ (8001c34 <HAL_DMA_Init+0x424>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a37      	ldr	r2, [pc, #220]	@ (8001c38 <HAL_DMA_Init+0x428>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01d      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a35      	ldr	r2, [pc, #212]	@ (8001c3c <HAL_DMA_Init+0x42c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_DMA_Init+0x430>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a32      	ldr	r2, [pc, #200]	@ (8001c44 <HAL_DMA_Init+0x434>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <HAL_DMA_Init+0x438>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c4c <HAL_DMA_Init+0x43c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_DMA_Init+0x38c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2e      	ldr	r2, [pc, #184]	@ (8001c50 <HAL_DMA_Init+0x440>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x390>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_DMA_Init+0x392>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8092 	beq.w	8001ccc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <HAL_DMA_Init+0x424>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d021      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a20      	ldr	r2, [pc, #128]	@ (8001c38 <HAL_DMA_Init+0x428>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01c      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c3c <HAL_DMA_Init+0x42c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d017      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_DMA_Init+0x430>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d012      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_DMA_Init+0x434>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <HAL_DMA_Init+0x438>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a18      	ldr	r2, [pc, #96]	@ (8001c4c <HAL_DMA_Init+0x43c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <HAL_DMA_Init+0x3e6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_DMA_Init+0x440>)
 8001bf4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_DMA_Init+0x444>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b40      	cmp	r3, #64	@ 0x40
 8001c1c:	d01c      	beq.n	8001c58 <HAL_DMA_Init+0x448>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b80      	cmp	r3, #128	@ 0x80
 8001c24:	d102      	bne.n	8001c2c <HAL_DMA_Init+0x41c>
 8001c26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c2a:	e016      	b.n	8001c5a <HAL_DMA_Init+0x44a>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e014      	b.n	8001c5a <HAL_DMA_Init+0x44a>
 8001c30:	fe10803f 	.word	0xfe10803f
 8001c34:	58025408 	.word	0x58025408
 8001c38:	5802541c 	.word	0x5802541c
 8001c3c:	58025430 	.word	0x58025430
 8001c40:	58025444 	.word	0x58025444
 8001c44:	58025458 	.word	0x58025458
 8001c48:	5802546c 	.word	0x5802546c
 8001c4c:	58025480 	.word	0x58025480
 8001c50:	58025494 	.word	0x58025494
 8001c54:	fffe000f 	.word	0xfffe000f
 8001c58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e58 <HAL_DMA_Init+0x648>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_DMA_Init+0x64c>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	009a      	lsls	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f002 f9a9 	bl	8004008 <DMA_CalcBaseAndBitshift>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e008      	b.n	8001cde <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0b7      	b.n	8001e4e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e60 <HAL_DMA_Init+0x650>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d072      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	@ (8001e64 <HAL_DMA_Init+0x654>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d06d      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e68 <HAL_DMA_Init+0x658>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d068      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a5a      	ldr	r2, [pc, #360]	@ (8001e6c <HAL_DMA_Init+0x65c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d063      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	@ (8001e70 <HAL_DMA_Init+0x660>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d05e      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a57      	ldr	r2, [pc, #348]	@ (8001e74 <HAL_DMA_Init+0x664>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d059      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a56      	ldr	r2, [pc, #344]	@ (8001e78 <HAL_DMA_Init+0x668>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d054      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <HAL_DMA_Init+0x66c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d04f      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a53      	ldr	r2, [pc, #332]	@ (8001e80 <HAL_DMA_Init+0x670>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04a      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a51      	ldr	r2, [pc, #324]	@ (8001e84 <HAL_DMA_Init+0x674>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d045      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a50      	ldr	r2, [pc, #320]	@ (8001e88 <HAL_DMA_Init+0x678>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d040      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4e      	ldr	r2, [pc, #312]	@ (8001e8c <HAL_DMA_Init+0x67c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d03b      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001e90 <HAL_DMA_Init+0x680>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d036      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	@ (8001e94 <HAL_DMA_Init+0x684>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e98 <HAL_DMA_Init+0x688>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d02c      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a48      	ldr	r2, [pc, #288]	@ (8001e9c <HAL_DMA_Init+0x68c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a47      	ldr	r2, [pc, #284]	@ (8001ea0 <HAL_DMA_Init+0x690>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a45      	ldr	r2, [pc, #276]	@ (8001ea4 <HAL_DMA_Init+0x694>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a44      	ldr	r2, [pc, #272]	@ (8001ea8 <HAL_DMA_Init+0x698>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d018      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a42      	ldr	r2, [pc, #264]	@ (8001eac <HAL_DMA_Init+0x69c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a41      	ldr	r2, [pc, #260]	@ (8001eb0 <HAL_DMA_Init+0x6a0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb4 <HAL_DMA_Init+0x6a4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb8 <HAL_DMA_Init+0x6a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_DMA_Init+0x5be>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001ebc <HAL_DMA_Init+0x6ac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_Init+0x5c2>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_Init+0x5c4>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d032      	beq.n	8001e3e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f002 fa43 	bl	8004264 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b80      	cmp	r3, #128	@ 0x80
 8001de4:	d102      	bne.n	8001dec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_DMA_Init+0x61c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d80c      	bhi.n	8001e2c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f002 fac0 	bl	8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	e008      	b.n	8001e3e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	a7fdabf8 	.word	0xa7fdabf8
 8001e5c:	cccccccd 	.word	0xcccccccd
 8001e60:	40020010 	.word	0x40020010
 8001e64:	40020028 	.word	0x40020028
 8001e68:	40020040 	.word	0x40020040
 8001e6c:	40020058 	.word	0x40020058
 8001e70:	40020070 	.word	0x40020070
 8001e74:	40020088 	.word	0x40020088
 8001e78:	400200a0 	.word	0x400200a0
 8001e7c:	400200b8 	.word	0x400200b8
 8001e80:	40020410 	.word	0x40020410
 8001e84:	40020428 	.word	0x40020428
 8001e88:	40020440 	.word	0x40020440
 8001e8c:	40020458 	.word	0x40020458
 8001e90:	40020470 	.word	0x40020470
 8001e94:	40020488 	.word	0x40020488
 8001e98:	400204a0 	.word	0x400204a0
 8001e9c:	400204b8 	.word	0x400204b8
 8001ea0:	58025408 	.word	0x58025408
 8001ea4:	5802541c 	.word	0x5802541c
 8001ea8:	58025430 	.word	0x58025430
 8001eac:	58025444 	.word	0x58025444
 8001eb0:	58025458 	.word	0x58025458
 8001eb4:	5802546c 	.word	0x5802546c
 8001eb8:	58025480 	.word	0x58025480
 8001ebc:	58025494 	.word	0x58025494

08001ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e226      	b.n	800232a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Start_IT+0x2a>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e21f      	b.n	800232a <HAL_DMA_Start_IT+0x46a>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f040 820a 	bne.w	8002314 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a68      	ldr	r2, [pc, #416]	@ (80020b4 <HAL_DMA_Start_IT+0x1f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04a      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a66      	ldr	r2, [pc, #408]	@ (80020b8 <HAL_DMA_Start_IT+0x1f8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d045      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a65      	ldr	r2, [pc, #404]	@ (80020bc <HAL_DMA_Start_IT+0x1fc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d040      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a63      	ldr	r2, [pc, #396]	@ (80020c0 <HAL_DMA_Start_IT+0x200>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d03b      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a62      	ldr	r2, [pc, #392]	@ (80020c4 <HAL_DMA_Start_IT+0x204>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d036      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a60      	ldr	r2, [pc, #384]	@ (80020c8 <HAL_DMA_Start_IT+0x208>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d031      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80020cc <HAL_DMA_Start_IT+0x20c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d02c      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	@ (80020d0 <HAL_DMA_Start_IT+0x210>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d027      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a5c      	ldr	r2, [pc, #368]	@ (80020d4 <HAL_DMA_Start_IT+0x214>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80020d8 <HAL_DMA_Start_IT+0x218>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a59      	ldr	r2, [pc, #356]	@ (80020dc <HAL_DMA_Start_IT+0x21c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d018      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a57      	ldr	r2, [pc, #348]	@ (80020e0 <HAL_DMA_Start_IT+0x220>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_DMA_Start_IT+0x224>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a54      	ldr	r2, [pc, #336]	@ (80020e8 <HAL_DMA_Start_IT+0x228>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a53      	ldr	r2, [pc, #332]	@ (80020ec <HAL_DMA_Start_IT+0x22c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_Start_IT+0xee>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a51      	ldr	r2, [pc, #324]	@ (80020f0 <HAL_DMA_Start_IT+0x230>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d108      	bne.n	8001fc0 <HAL_DMA_Start_IT+0x100>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e007      	b.n	8001fd0 <HAL_DMA_Start_IT+0x110>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f001 fe6a 	bl	8003cb0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a34      	ldr	r2, [pc, #208]	@ (80020b4 <HAL_DMA_Start_IT+0x1f4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a33      	ldr	r2, [pc, #204]	@ (80020b8 <HAL_DMA_Start_IT+0x1f8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a31      	ldr	r2, [pc, #196]	@ (80020bc <HAL_DMA_Start_IT+0x1fc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a30      	ldr	r2, [pc, #192]	@ (80020c0 <HAL_DMA_Start_IT+0x200>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <HAL_DMA_Start_IT+0x204>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2d      	ldr	r2, [pc, #180]	@ (80020c8 <HAL_DMA_Start_IT+0x208>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2b      	ldr	r2, [pc, #172]	@ (80020cc <HAL_DMA_Start_IT+0x20c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2a      	ldr	r2, [pc, #168]	@ (80020d0 <HAL_DMA_Start_IT+0x210>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a28      	ldr	r2, [pc, #160]	@ (80020d4 <HAL_DMA_Start_IT+0x214>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a27      	ldr	r2, [pc, #156]	@ (80020d8 <HAL_DMA_Start_IT+0x218>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a25      	ldr	r2, [pc, #148]	@ (80020dc <HAL_DMA_Start_IT+0x21c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <HAL_DMA_Start_IT+0x220>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a22      	ldr	r2, [pc, #136]	@ (80020e4 <HAL_DMA_Start_IT+0x224>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <HAL_DMA_Start_IT+0x228>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ec <HAL_DMA_Start_IT+0x22c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_Start_IT+0x1bc>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1e      	ldr	r2, [pc, #120]	@ (80020f0 <HAL_DMA_Start_IT+0x230>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Start_IT+0x1c0>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_DMA_Start_IT+0x1c2>
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 021e 	bic.w	r2, r3, #30
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0216 	orr.w	r2, r2, #22
 8002098:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03e      	beq.n	8002120 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0208 	orr.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	e035      	b.n	8002120 <HAL_DMA_Start_IT+0x260>
 80020b4:	40020010 	.word	0x40020010
 80020b8:	40020028 	.word	0x40020028
 80020bc:	40020040 	.word	0x40020040
 80020c0:	40020058 	.word	0x40020058
 80020c4:	40020070 	.word	0x40020070
 80020c8:	40020088 	.word	0x40020088
 80020cc:	400200a0 	.word	0x400200a0
 80020d0:	400200b8 	.word	0x400200b8
 80020d4:	40020410 	.word	0x40020410
 80020d8:	40020428 	.word	0x40020428
 80020dc:	40020440 	.word	0x40020440
 80020e0:	40020458 	.word	0x40020458
 80020e4:	40020470 	.word	0x40020470
 80020e8:	40020488 	.word	0x40020488
 80020ec:	400204a0 	.word	0x400204a0
 80020f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 020e 	bic.w	r2, r3, #14
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 020a 	orr.w	r2, r2, #10
 8002106:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0204 	orr.w	r2, r2, #4
 800211e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a83      	ldr	r2, [pc, #524]	@ (8002334 <HAL_DMA_Start_IT+0x474>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d072      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a82      	ldr	r2, [pc, #520]	@ (8002338 <HAL_DMA_Start_IT+0x478>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d06d      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a80      	ldr	r2, [pc, #512]	@ (800233c <HAL_DMA_Start_IT+0x47c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d068      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7f      	ldr	r2, [pc, #508]	@ (8002340 <HAL_DMA_Start_IT+0x480>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d063      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7d      	ldr	r2, [pc, #500]	@ (8002344 <HAL_DMA_Start_IT+0x484>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d05e      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7c      	ldr	r2, [pc, #496]	@ (8002348 <HAL_DMA_Start_IT+0x488>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d059      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a7a      	ldr	r2, [pc, #488]	@ (800234c <HAL_DMA_Start_IT+0x48c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d054      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a79      	ldr	r2, [pc, #484]	@ (8002350 <HAL_DMA_Start_IT+0x490>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d04f      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a77      	ldr	r2, [pc, #476]	@ (8002354 <HAL_DMA_Start_IT+0x494>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04a      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a76      	ldr	r2, [pc, #472]	@ (8002358 <HAL_DMA_Start_IT+0x498>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d045      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a74      	ldr	r2, [pc, #464]	@ (800235c <HAL_DMA_Start_IT+0x49c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d040      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a73      	ldr	r2, [pc, #460]	@ (8002360 <HAL_DMA_Start_IT+0x4a0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d03b      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a71      	ldr	r2, [pc, #452]	@ (8002364 <HAL_DMA_Start_IT+0x4a4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d036      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a70      	ldr	r2, [pc, #448]	@ (8002368 <HAL_DMA_Start_IT+0x4a8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_DMA_Start_IT+0x4ac>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02c      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002370 <HAL_DMA_Start_IT+0x4b0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d027      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002374 <HAL_DMA_Start_IT+0x4b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d022      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002378 <HAL_DMA_Start_IT+0x4b8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d01d      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a68      	ldr	r2, [pc, #416]	@ (800237c <HAL_DMA_Start_IT+0x4bc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d018      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a67      	ldr	r2, [pc, #412]	@ (8002380 <HAL_DMA_Start_IT+0x4c0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a65      	ldr	r2, [pc, #404]	@ (8002384 <HAL_DMA_Start_IT+0x4c4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00e      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a64      	ldr	r2, [pc, #400]	@ (8002388 <HAL_DMA_Start_IT+0x4c8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a62      	ldr	r2, [pc, #392]	@ (800238c <HAL_DMA_Start_IT+0x4cc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_DMA_Start_IT+0x350>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a61      	ldr	r2, [pc, #388]	@ (8002390 <HAL_DMA_Start_IT+0x4d0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_DMA_Start_IT+0x354>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_DMA_Start_IT+0x356>
 8002214:	2300      	movs	r3, #0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01a      	beq.n	8002250 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002236:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800224a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800224e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a37      	ldr	r2, [pc, #220]	@ (8002334 <HAL_DMA_Start_IT+0x474>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d04a      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a36      	ldr	r2, [pc, #216]	@ (8002338 <HAL_DMA_Start_IT+0x478>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d045      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a34      	ldr	r2, [pc, #208]	@ (800233c <HAL_DMA_Start_IT+0x47c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d040      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a33      	ldr	r2, [pc, #204]	@ (8002340 <HAL_DMA_Start_IT+0x480>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d03b      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <HAL_DMA_Start_IT+0x484>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d036      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_DMA_Start_IT+0x488>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d031      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2e      	ldr	r2, [pc, #184]	@ (800234c <HAL_DMA_Start_IT+0x48c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02c      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_DMA_Start_IT+0x490>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d027      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002354 <HAL_DMA_Start_IT+0x494>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d022      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002358 <HAL_DMA_Start_IT+0x498>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d01d      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a28      	ldr	r2, [pc, #160]	@ (800235c <HAL_DMA_Start_IT+0x49c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d018      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a27      	ldr	r2, [pc, #156]	@ (8002360 <HAL_DMA_Start_IT+0x4a0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a25      	ldr	r2, [pc, #148]	@ (8002364 <HAL_DMA_Start_IT+0x4a4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00e      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a24      	ldr	r2, [pc, #144]	@ (8002368 <HAL_DMA_Start_IT+0x4a8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a22      	ldr	r2, [pc, #136]	@ (800236c <HAL_DMA_Start_IT+0x4ac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_DMA_Start_IT+0x430>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <HAL_DMA_Start_IT+0x4b0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d108      	bne.n	8002302 <HAL_DMA_Start_IT+0x442>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e012      	b.n	8002328 <HAL_DMA_Start_IT+0x468>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e009      	b.n	8002328 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40020010 	.word	0x40020010
 8002338:	40020028 	.word	0x40020028
 800233c:	40020040 	.word	0x40020040
 8002340:	40020058 	.word	0x40020058
 8002344:	40020070 	.word	0x40020070
 8002348:	40020088 	.word	0x40020088
 800234c:	400200a0 	.word	0x400200a0
 8002350:	400200b8 	.word	0x400200b8
 8002354:	40020410 	.word	0x40020410
 8002358:	40020428 	.word	0x40020428
 800235c:	40020440 	.word	0x40020440
 8002360:	40020458 	.word	0x40020458
 8002364:	40020470 	.word	0x40020470
 8002368:	40020488 	.word	0x40020488
 800236c:	400204a0 	.word	0x400204a0
 8002370:	400204b8 	.word	0x400204b8
 8002374:	58025408 	.word	0x58025408
 8002378:	5802541c 	.word	0x5802541c
 800237c:	58025430 	.word	0x58025430
 8002380:	58025444 	.word	0x58025444
 8002384:	58025458 	.word	0x58025458
 8002388:	5802546c 	.word	0x5802546c
 800238c:	58025480 	.word	0x58025480
 8002390:	58025494 	.word	0x58025494

08002394 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff f880 	bl	80014a0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e2dc      	b.n	8002966 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d008      	beq.n	80023ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2280      	movs	r2, #128	@ 0x80
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e2cd      	b.n	8002966 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a76      	ldr	r2, [pc, #472]	@ (80025a8 <HAL_DMA_Abort+0x214>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d04a      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a74      	ldr	r2, [pc, #464]	@ (80025ac <HAL_DMA_Abort+0x218>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d045      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a73      	ldr	r2, [pc, #460]	@ (80025b0 <HAL_DMA_Abort+0x21c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d040      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a71      	ldr	r2, [pc, #452]	@ (80025b4 <HAL_DMA_Abort+0x220>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d03b      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a70      	ldr	r2, [pc, #448]	@ (80025b8 <HAL_DMA_Abort+0x224>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d036      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6e      	ldr	r2, [pc, #440]	@ (80025bc <HAL_DMA_Abort+0x228>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6d      	ldr	r2, [pc, #436]	@ (80025c0 <HAL_DMA_Abort+0x22c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d02c      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6b      	ldr	r2, [pc, #428]	@ (80025c4 <HAL_DMA_Abort+0x230>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6a      	ldr	r2, [pc, #424]	@ (80025c8 <HAL_DMA_Abort+0x234>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a68      	ldr	r2, [pc, #416]	@ (80025cc <HAL_DMA_Abort+0x238>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01d      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a67      	ldr	r2, [pc, #412]	@ (80025d0 <HAL_DMA_Abort+0x23c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d018      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a65      	ldr	r2, [pc, #404]	@ (80025d4 <HAL_DMA_Abort+0x240>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a64      	ldr	r2, [pc, #400]	@ (80025d8 <HAL_DMA_Abort+0x244>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a62      	ldr	r2, [pc, #392]	@ (80025dc <HAL_DMA_Abort+0x248>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a61      	ldr	r2, [pc, #388]	@ (80025e0 <HAL_DMA_Abort+0x24c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_DMA_Abort+0xd6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a5f      	ldr	r2, [pc, #380]	@ (80025e4 <HAL_DMA_Abort+0x250>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_DMA_Abort+0xda>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_DMA_Abort+0xdc>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 021e 	bic.w	r2, r2, #30
 8002482:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002492:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e00a      	b.n	80024b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 020e 	bic.w	r2, r2, #14
 80024aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a3c      	ldr	r2, [pc, #240]	@ (80025a8 <HAL_DMA_Abort+0x214>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d072      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3a      	ldr	r2, [pc, #232]	@ (80025ac <HAL_DMA_Abort+0x218>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d06d      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a39      	ldr	r2, [pc, #228]	@ (80025b0 <HAL_DMA_Abort+0x21c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d068      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a37      	ldr	r2, [pc, #220]	@ (80025b4 <HAL_DMA_Abort+0x220>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d063      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a36      	ldr	r2, [pc, #216]	@ (80025b8 <HAL_DMA_Abort+0x224>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d05e      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a34      	ldr	r2, [pc, #208]	@ (80025bc <HAL_DMA_Abort+0x228>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d059      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a33      	ldr	r2, [pc, #204]	@ (80025c0 <HAL_DMA_Abort+0x22c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d054      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a31      	ldr	r2, [pc, #196]	@ (80025c4 <HAL_DMA_Abort+0x230>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d04f      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a30      	ldr	r2, [pc, #192]	@ (80025c8 <HAL_DMA_Abort+0x234>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d04a      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2e      	ldr	r2, [pc, #184]	@ (80025cc <HAL_DMA_Abort+0x238>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d045      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <HAL_DMA_Abort+0x23c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d040      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2b      	ldr	r2, [pc, #172]	@ (80025d4 <HAL_DMA_Abort+0x240>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d03b      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a2a      	ldr	r2, [pc, #168]	@ (80025d8 <HAL_DMA_Abort+0x244>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d036      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <HAL_DMA_Abort+0x248>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d031      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a27      	ldr	r2, [pc, #156]	@ (80025e0 <HAL_DMA_Abort+0x24c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d02c      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a25      	ldr	r2, [pc, #148]	@ (80025e4 <HAL_DMA_Abort+0x250>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d027      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_DMA_Abort+0x254>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d022      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_DMA_Abort+0x258>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01d      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	@ (80025f0 <HAL_DMA_Abort+0x25c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d018      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <HAL_DMA_Abort+0x260>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1e      	ldr	r2, [pc, #120]	@ (80025f8 <HAL_DMA_Abort+0x264>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00e      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <HAL_DMA_Abort+0x268>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1b      	ldr	r2, [pc, #108]	@ (8002600 <HAL_DMA_Abort+0x26c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_DMA_Abort+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <HAL_DMA_Abort+0x270>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d132      	bne.n	8002608 <HAL_DMA_Abort+0x274>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e031      	b.n	800260a <HAL_DMA_Abort+0x276>
 80025a6:	bf00      	nop
 80025a8:	40020010 	.word	0x40020010
 80025ac:	40020028 	.word	0x40020028
 80025b0:	40020040 	.word	0x40020040
 80025b4:	40020058 	.word	0x40020058
 80025b8:	40020070 	.word	0x40020070
 80025bc:	40020088 	.word	0x40020088
 80025c0:	400200a0 	.word	0x400200a0
 80025c4:	400200b8 	.word	0x400200b8
 80025c8:	40020410 	.word	0x40020410
 80025cc:	40020428 	.word	0x40020428
 80025d0:	40020440 	.word	0x40020440
 80025d4:	40020458 	.word	0x40020458
 80025d8:	40020470 	.word	0x40020470
 80025dc:	40020488 	.word	0x40020488
 80025e0:	400204a0 	.word	0x400204a0
 80025e4:	400204b8 	.word	0x400204b8
 80025e8:	58025408 	.word	0x58025408
 80025ec:	5802541c 	.word	0x5802541c
 80025f0:	58025430 	.word	0x58025430
 80025f4:	58025444 	.word	0x58025444
 80025f8:	58025458 	.word	0x58025458
 80025fc:	5802546c 	.word	0x5802546c
 8002600:	58025480 	.word	0x58025480
 8002604:	58025494 	.word	0x58025494
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6d      	ldr	r2, [pc, #436]	@ (80027d8 <HAL_DMA_Abort+0x444>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d04a      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6b      	ldr	r2, [pc, #428]	@ (80027dc <HAL_DMA_Abort+0x448>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d045      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6a      	ldr	r2, [pc, #424]	@ (80027e0 <HAL_DMA_Abort+0x44c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d040      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_DMA_Abort+0x450>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d03b      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a67      	ldr	r2, [pc, #412]	@ (80027e8 <HAL_DMA_Abort+0x454>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d036      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	@ (80027ec <HAL_DMA_Abort+0x458>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d031      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a64      	ldr	r2, [pc, #400]	@ (80027f0 <HAL_DMA_Abort+0x45c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d02c      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a62      	ldr	r2, [pc, #392]	@ (80027f4 <HAL_DMA_Abort+0x460>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d027      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a61      	ldr	r2, [pc, #388]	@ (80027f8 <HAL_DMA_Abort+0x464>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5f      	ldr	r2, [pc, #380]	@ (80027fc <HAL_DMA_Abort+0x468>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01d      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5e      	ldr	r2, [pc, #376]	@ (8002800 <HAL_DMA_Abort+0x46c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d018      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5c      	ldr	r2, [pc, #368]	@ (8002804 <HAL_DMA_Abort+0x470>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5b      	ldr	r2, [pc, #364]	@ (8002808 <HAL_DMA_Abort+0x474>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00e      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a59      	ldr	r2, [pc, #356]	@ (800280c <HAL_DMA_Abort+0x478>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a58      	ldr	r2, [pc, #352]	@ (8002810 <HAL_DMA_Abort+0x47c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_DMA_Abort+0x32a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_DMA_Abort+0x480>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <HAL_DMA_Abort+0x33c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_DMA_Abort+0x34c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026e0:	e013      	b.n	800270a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e2:	f7fe fedd 	bl	80014a0 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d90c      	bls.n	800270a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2203      	movs	r2, #3
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e12d      	b.n	8002966 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1e5      	bne.n	80026e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2f      	ldr	r2, [pc, #188]	@ (80027d8 <HAL_DMA_Abort+0x444>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d04a      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2d      	ldr	r2, [pc, #180]	@ (80027dc <HAL_DMA_Abort+0x448>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d045      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2c      	ldr	r2, [pc, #176]	@ (80027e0 <HAL_DMA_Abort+0x44c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d040      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2a      	ldr	r2, [pc, #168]	@ (80027e4 <HAL_DMA_Abort+0x450>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d03b      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a29      	ldr	r2, [pc, #164]	@ (80027e8 <HAL_DMA_Abort+0x454>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d036      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a27      	ldr	r2, [pc, #156]	@ (80027ec <HAL_DMA_Abort+0x458>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d031      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <HAL_DMA_Abort+0x45c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d02c      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <HAL_DMA_Abort+0x460>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d027      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a23      	ldr	r2, [pc, #140]	@ (80027f8 <HAL_DMA_Abort+0x464>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a21      	ldr	r2, [pc, #132]	@ (80027fc <HAL_DMA_Abort+0x468>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01d      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a20      	ldr	r2, [pc, #128]	@ (8002800 <HAL_DMA_Abort+0x46c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d018      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <HAL_DMA_Abort+0x470>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <HAL_DMA_Abort+0x474>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00e      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1b      	ldr	r2, [pc, #108]	@ (800280c <HAL_DMA_Abort+0x478>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <HAL_DMA_Abort+0x47c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d004      	beq.n	80027b6 <HAL_DMA_Abort+0x422>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a18      	ldr	r2, [pc, #96]	@ (8002814 <HAL_DMA_Abort+0x480>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_DMA_Abort+0x426>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_DMA_Abort+0x428>
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02b      	beq.n	8002818 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	223f      	movs	r2, #63	@ 0x3f
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	e02a      	b.n	800282e <HAL_DMA_Abort+0x49a>
 80027d8:	40020010 	.word	0x40020010
 80027dc:	40020028 	.word	0x40020028
 80027e0:	40020040 	.word	0x40020040
 80027e4:	40020058 	.word	0x40020058
 80027e8:	40020070 	.word	0x40020070
 80027ec:	40020088 	.word	0x40020088
 80027f0:	400200a0 	.word	0x400200a0
 80027f4:	400200b8 	.word	0x400200b8
 80027f8:	40020410 	.word	0x40020410
 80027fc:	40020428 	.word	0x40020428
 8002800:	40020440 	.word	0x40020440
 8002804:	40020458 	.word	0x40020458
 8002808:	40020470 	.word	0x40020470
 800280c:	40020488 	.word	0x40020488
 8002810:	400204a0 	.word	0x400204a0
 8002814:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2201      	movs	r2, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4f      	ldr	r2, [pc, #316]	@ (8002970 <HAL_DMA_Abort+0x5dc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d072      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a4d      	ldr	r2, [pc, #308]	@ (8002974 <HAL_DMA_Abort+0x5e0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d06d      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a4c      	ldr	r2, [pc, #304]	@ (8002978 <HAL_DMA_Abort+0x5e4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d068      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4a      	ldr	r2, [pc, #296]	@ (800297c <HAL_DMA_Abort+0x5e8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d063      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <HAL_DMA_Abort+0x5ec>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d05e      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a47      	ldr	r2, [pc, #284]	@ (8002984 <HAL_DMA_Abort+0x5f0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d059      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a46      	ldr	r2, [pc, #280]	@ (8002988 <HAL_DMA_Abort+0x5f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d054      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a44      	ldr	r2, [pc, #272]	@ (800298c <HAL_DMA_Abort+0x5f8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d04f      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a43      	ldr	r2, [pc, #268]	@ (8002990 <HAL_DMA_Abort+0x5fc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d04a      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a41      	ldr	r2, [pc, #260]	@ (8002994 <HAL_DMA_Abort+0x600>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d045      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a40      	ldr	r2, [pc, #256]	@ (8002998 <HAL_DMA_Abort+0x604>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d040      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a3e      	ldr	r2, [pc, #248]	@ (800299c <HAL_DMA_Abort+0x608>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d03b      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3d      	ldr	r2, [pc, #244]	@ (80029a0 <HAL_DMA_Abort+0x60c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d036      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_DMA_Abort+0x610>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3a      	ldr	r2, [pc, #232]	@ (80029a8 <HAL_DMA_Abort+0x614>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d02c      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a38      	ldr	r2, [pc, #224]	@ (80029ac <HAL_DMA_Abort+0x618>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d027      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a37      	ldr	r2, [pc, #220]	@ (80029b0 <HAL_DMA_Abort+0x61c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a35      	ldr	r2, [pc, #212]	@ (80029b4 <HAL_DMA_Abort+0x620>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a34      	ldr	r2, [pc, #208]	@ (80029b8 <HAL_DMA_Abort+0x624>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a32      	ldr	r2, [pc, #200]	@ (80029bc <HAL_DMA_Abort+0x628>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a31      	ldr	r2, [pc, #196]	@ (80029c0 <HAL_DMA_Abort+0x62c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <HAL_DMA_Abort+0x630>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2e      	ldr	r2, [pc, #184]	@ (80029c8 <HAL_DMA_Abort+0x634>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_DMA_Abort+0x58a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <HAL_DMA_Abort+0x638>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_DMA_Abort+0x58e>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_DMA_Abort+0x590>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002930:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002948:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002952:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40020010 	.word	0x40020010
 8002974:	40020028 	.word	0x40020028
 8002978:	40020040 	.word	0x40020040
 800297c:	40020058 	.word	0x40020058
 8002980:	40020070 	.word	0x40020070
 8002984:	40020088 	.word	0x40020088
 8002988:	400200a0 	.word	0x400200a0
 800298c:	400200b8 	.word	0x400200b8
 8002990:	40020410 	.word	0x40020410
 8002994:	40020428 	.word	0x40020428
 8002998:	40020440 	.word	0x40020440
 800299c:	40020458 	.word	0x40020458
 80029a0:	40020470 	.word	0x40020470
 80029a4:	40020488 	.word	0x40020488
 80029a8:	400204a0 	.word	0x400204a0
 80029ac:	400204b8 	.word	0x400204b8
 80029b0:	58025408 	.word	0x58025408
 80029b4:	5802541c 	.word	0x5802541c
 80029b8:	58025430 	.word	0x58025430
 80029bc:	58025444 	.word	0x58025444
 80029c0:	58025458 	.word	0x58025458
 80029c4:	5802546c 	.word	0x5802546c
 80029c8:	58025480 	.word	0x58025480
 80029cc:	58025494 	.word	0x58025494

080029d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e237      	b.n	8002e52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d004      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e22c      	b.n	8002e52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002b70 <HAL_DMA_Abort_IT+0x1a0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d04a      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a5b      	ldr	r2, [pc, #364]	@ (8002b74 <HAL_DMA_Abort_IT+0x1a4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d045      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a59      	ldr	r2, [pc, #356]	@ (8002b78 <HAL_DMA_Abort_IT+0x1a8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d040      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_DMA_Abort_IT+0x1ac>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d03b      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a56      	ldr	r2, [pc, #344]	@ (8002b80 <HAL_DMA_Abort_IT+0x1b0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d036      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a55      	ldr	r2, [pc, #340]	@ (8002b84 <HAL_DMA_Abort_IT+0x1b4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d031      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a53      	ldr	r2, [pc, #332]	@ (8002b88 <HAL_DMA_Abort_IT+0x1b8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02c      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a52      	ldr	r2, [pc, #328]	@ (8002b8c <HAL_DMA_Abort_IT+0x1bc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d027      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	@ (8002b90 <HAL_DMA_Abort_IT+0x1c0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d022      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4f      	ldr	r2, [pc, #316]	@ (8002b94 <HAL_DMA_Abort_IT+0x1c4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d01d      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4d      	ldr	r2, [pc, #308]	@ (8002b98 <HAL_DMA_Abort_IT+0x1c8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b9c <HAL_DMA_Abort_IT+0x1cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a49      	ldr	r2, [pc, #292]	@ (8002ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a47      	ldr	r2, [pc, #284]	@ (8002ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xc8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a46      	ldr	r2, [pc, #280]	@ (8002bac <HAL_DMA_Abort_IT+0x1dc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Abort_IT+0xcc>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_DMA_Abort_IT+0xce>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8086 	beq.w	8002bb0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8002b70 <HAL_DMA_Abort_IT+0x1a0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d04a      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a2e      	ldr	r2, [pc, #184]	@ (8002b74 <HAL_DMA_Abort_IT+0x1a4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d045      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <HAL_DMA_Abort_IT+0x1a8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d040      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <HAL_DMA_Abort_IT+0x1ac>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d03b      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_DMA_Abort_IT+0x1b0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d036      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a28      	ldr	r2, [pc, #160]	@ (8002b84 <HAL_DMA_Abort_IT+0x1b4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d031      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a26      	ldr	r2, [pc, #152]	@ (8002b88 <HAL_DMA_Abort_IT+0x1b8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d02c      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a25      	ldr	r2, [pc, #148]	@ (8002b8c <HAL_DMA_Abort_IT+0x1bc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d027      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_DMA_Abort_IT+0x1c0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d022      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <HAL_DMA_Abort_IT+0x1c4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01d      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <HAL_DMA_Abort_IT+0x1c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d018      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <HAL_DMA_Abort_IT+0x1cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00e      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x17c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <HAL_DMA_Abort_IT+0x1dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d108      	bne.n	8002b5e <HAL_DMA_Abort_IT+0x18e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e178      	b.n	8002e50 <HAL_DMA_Abort_IT+0x480>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e16f      	b.n	8002e50 <HAL_DMA_Abort_IT+0x480>
 8002b70:	40020010 	.word	0x40020010
 8002b74:	40020028 	.word	0x40020028
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	40020070 	.word	0x40020070
 8002b84:	40020088 	.word	0x40020088
 8002b88:	400200a0 	.word	0x400200a0
 8002b8c:	400200b8 	.word	0x400200b8
 8002b90:	40020410 	.word	0x40020410
 8002b94:	40020428 	.word	0x40020428
 8002b98:	40020440 	.word	0x40020440
 8002b9c:	40020458 	.word	0x40020458
 8002ba0:	40020470 	.word	0x40020470
 8002ba4:	40020488 	.word	0x40020488
 8002ba8:	400204a0 	.word	0x400204a0
 8002bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 020e 	bic.w	r2, r2, #14
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6c      	ldr	r2, [pc, #432]	@ (8002d78 <HAL_DMA_Abort_IT+0x3a8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d04a      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6b      	ldr	r2, [pc, #428]	@ (8002d7c <HAL_DMA_Abort_IT+0x3ac>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d045      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a69      	ldr	r2, [pc, #420]	@ (8002d80 <HAL_DMA_Abort_IT+0x3b0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d040      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a68      	ldr	r2, [pc, #416]	@ (8002d84 <HAL_DMA_Abort_IT+0x3b4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d03b      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a66      	ldr	r2, [pc, #408]	@ (8002d88 <HAL_DMA_Abort_IT+0x3b8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d036      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a65      	ldr	r2, [pc, #404]	@ (8002d8c <HAL_DMA_Abort_IT+0x3bc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d031      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a63      	ldr	r2, [pc, #396]	@ (8002d90 <HAL_DMA_Abort_IT+0x3c0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d02c      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a62      	ldr	r2, [pc, #392]	@ (8002d94 <HAL_DMA_Abort_IT+0x3c4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d027      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a60      	ldr	r2, [pc, #384]	@ (8002d98 <HAL_DMA_Abort_IT+0x3c8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d022      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002d9c <HAL_DMA_Abort_IT+0x3cc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d01d      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <HAL_DMA_Abort_IT+0x3d0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a5c      	ldr	r2, [pc, #368]	@ (8002da4 <HAL_DMA_Abort_IT+0x3d4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002da8 <HAL_DMA_Abort_IT+0x3d8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a59      	ldr	r2, [pc, #356]	@ (8002dac <HAL_DMA_Abort_IT+0x3dc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a57      	ldr	r2, [pc, #348]	@ (8002db0 <HAL_DMA_Abort_IT+0x3e0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x290>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a56      	ldr	r2, [pc, #344]	@ (8002db4 <HAL_DMA_Abort_IT+0x3e4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <HAL_DMA_Abort_IT+0x2a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <HAL_DMA_Abort_IT+0x2b2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a3c      	ldr	r2, [pc, #240]	@ (8002d78 <HAL_DMA_Abort_IT+0x3a8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d072      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3a      	ldr	r2, [pc, #232]	@ (8002d7c <HAL_DMA_Abort_IT+0x3ac>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d06d      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a39      	ldr	r2, [pc, #228]	@ (8002d80 <HAL_DMA_Abort_IT+0x3b0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d068      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a37      	ldr	r2, [pc, #220]	@ (8002d84 <HAL_DMA_Abort_IT+0x3b4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d063      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a36      	ldr	r2, [pc, #216]	@ (8002d88 <HAL_DMA_Abort_IT+0x3b8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a34      	ldr	r2, [pc, #208]	@ (8002d8c <HAL_DMA_Abort_IT+0x3bc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d059      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a33      	ldr	r2, [pc, #204]	@ (8002d90 <HAL_DMA_Abort_IT+0x3c0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d054      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a31      	ldr	r2, [pc, #196]	@ (8002d94 <HAL_DMA_Abort_IT+0x3c4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d04f      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a30      	ldr	r2, [pc, #192]	@ (8002d98 <HAL_DMA_Abort_IT+0x3c8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d04a      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d9c <HAL_DMA_Abort_IT+0x3cc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d045      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2d      	ldr	r2, [pc, #180]	@ (8002da0 <HAL_DMA_Abort_IT+0x3d0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d040      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002da4 <HAL_DMA_Abort_IT+0x3d4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d03b      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002da8 <HAL_DMA_Abort_IT+0x3d8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d036      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a28      	ldr	r2, [pc, #160]	@ (8002dac <HAL_DMA_Abort_IT+0x3dc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d031      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a27      	ldr	r2, [pc, #156]	@ (8002db0 <HAL_DMA_Abort_IT+0x3e0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d02c      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <HAL_DMA_Abort_IT+0x3e4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d027      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a24      	ldr	r2, [pc, #144]	@ (8002db8 <HAL_DMA_Abort_IT+0x3e8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a22      	ldr	r2, [pc, #136]	@ (8002dbc <HAL_DMA_Abort_IT+0x3ec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01d      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a21      	ldr	r2, [pc, #132]	@ (8002dc0 <HAL_DMA_Abort_IT+0x3f0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc4 <HAL_DMA_Abort_IT+0x3f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc8 <HAL_DMA_Abort_IT+0x3f8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_DMA_Abort_IT+0x3fc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <HAL_DMA_Abort_IT+0x400>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <HAL_DMA_Abort_IT+0x404>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d132      	bne.n	8002dd8 <HAL_DMA_Abort_IT+0x408>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e031      	b.n	8002dda <HAL_DMA_Abort_IT+0x40a>
 8002d76:	bf00      	nop
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	58025408 	.word	0x58025408
 8002dbc:	5802541c 	.word	0x5802541c
 8002dc0:	58025430 	.word	0x58025430
 8002dc4:	58025444 	.word	0x58025444
 8002dc8:	58025458 	.word	0x58025458
 8002dcc:	5802546c 	.word	0x5802546c
 8002dd0:	58025480 	.word	0x58025480
 8002dd4:	58025494 	.word	0x58025494
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d028      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop

08002e5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e68:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <HAL_DMA_IRQHandler+0x1ac>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a67      	ldr	r2, [pc, #412]	@ (800300c <HAL_DMA_IRQHandler+0x1b0>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a9b      	lsrs	r3, r3, #10
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a5f      	ldr	r2, [pc, #380]	@ (8003010 <HAL_DMA_IRQHandler+0x1b4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04a      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003014 <HAL_DMA_IRQHandler+0x1b8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d045      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8003018 <HAL_DMA_IRQHandler+0x1bc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d040      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800301c <HAL_DMA_IRQHandler+0x1c0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03b      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a59      	ldr	r2, [pc, #356]	@ (8003020 <HAL_DMA_IRQHandler+0x1c4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d036      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a57      	ldr	r2, [pc, #348]	@ (8003024 <HAL_DMA_IRQHandler+0x1c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d031      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_DMA_IRQHandler+0x1cc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d02c      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a54      	ldr	r2, [pc, #336]	@ (800302c <HAL_DMA_IRQHandler+0x1d0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d027      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a53      	ldr	r2, [pc, #332]	@ (8003030 <HAL_DMA_IRQHandler+0x1d4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a51      	ldr	r2, [pc, #324]	@ (8003034 <HAL_DMA_IRQHandler+0x1d8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01d      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a50      	ldr	r2, [pc, #320]	@ (8003038 <HAL_DMA_IRQHandler+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a4e      	ldr	r2, [pc, #312]	@ (800303c <HAL_DMA_IRQHandler+0x1e0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8003040 <HAL_DMA_IRQHandler+0x1e4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4b      	ldr	r2, [pc, #300]	@ (8003044 <HAL_DMA_IRQHandler+0x1e8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d009      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003048 <HAL_DMA_IRQHandler+0x1ec>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_DMA_IRQHandler+0xd2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a48      	ldr	r2, [pc, #288]	@ (800304c <HAL_DMA_IRQHandler+0x1f0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_DMA_IRQHandler+0xd6>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_DMA_IRQHandler+0xd8>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 842b 	beq.w	8003790 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2208      	movs	r2, #8
 8002f44:	409a      	lsls	r2, r3
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80a2 	beq.w	8003094 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2e      	ldr	r2, [pc, #184]	@ (8003010 <HAL_DMA_IRQHandler+0x1b4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d04a      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <HAL_DMA_IRQHandler+0x1b8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d045      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	@ (8003018 <HAL_DMA_IRQHandler+0x1bc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d040      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2a      	ldr	r2, [pc, #168]	@ (800301c <HAL_DMA_IRQHandler+0x1c0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d03b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a28      	ldr	r2, [pc, #160]	@ (8003020 <HAL_DMA_IRQHandler+0x1c4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d036      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a27      	ldr	r2, [pc, #156]	@ (8003024 <HAL_DMA_IRQHandler+0x1c8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d031      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a25      	ldr	r2, [pc, #148]	@ (8003028 <HAL_DMA_IRQHandler+0x1cc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a24      	ldr	r2, [pc, #144]	@ (800302c <HAL_DMA_IRQHandler+0x1d0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d027      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <HAL_DMA_IRQHandler+0x1d4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d022      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <HAL_DMA_IRQHandler+0x1d8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01d      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_DMA_IRQHandler+0x1dc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d018      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_DMA_IRQHandler+0x1e0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_DMA_IRQHandler+0x1e4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_DMA_IRQHandler+0x1e8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d009      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	@ (8003048 <HAL_DMA_IRQHandler+0x1ec>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x194>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a18      	ldr	r2, [pc, #96]	@ (800304c <HAL_DMA_IRQHandler+0x1f0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d12f      	bne.n	8003050 <HAL_DMA_IRQHandler+0x1f4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	e02e      	b.n	8003064 <HAL_DMA_IRQHandler+0x208>
 8003006:	bf00      	nop
 8003008:	24000000 	.word	0x24000000
 800300c:	1b4e81b5 	.word	0x1b4e81b5
 8003010:	40020010 	.word	0x40020010
 8003014:	40020028 	.word	0x40020028
 8003018:	40020040 	.word	0x40020040
 800301c:	40020058 	.word	0x40020058
 8003020:	40020070 	.word	0x40020070
 8003024:	40020088 	.word	0x40020088
 8003028:	400200a0 	.word	0x400200a0
 800302c:	400200b8 	.word	0x400200b8
 8003030:	40020410 	.word	0x40020410
 8003034:	40020428 	.word	0x40020428
 8003038:	40020440 	.word	0x40020440
 800303c:	40020458 	.word	0x40020458
 8003040:	40020470 	.word	0x40020470
 8003044:	40020488 	.word	0x40020488
 8003048:	400204a0 	.word	0x400204a0
 800304c:	400204b8 	.word	0x400204b8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2208      	movs	r2, #8
 8003082:	409a      	lsls	r2, r3
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d06e      	beq.n	8003188 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a69      	ldr	r2, [pc, #420]	@ (8003254 <HAL_DMA_IRQHandler+0x3f8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a67      	ldr	r2, [pc, #412]	@ (8003258 <HAL_DMA_IRQHandler+0x3fc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a66      	ldr	r2, [pc, #408]	@ (800325c <HAL_DMA_IRQHandler+0x400>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a64      	ldr	r2, [pc, #400]	@ (8003260 <HAL_DMA_IRQHandler+0x404>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a63      	ldr	r2, [pc, #396]	@ (8003264 <HAL_DMA_IRQHandler+0x408>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a61      	ldr	r2, [pc, #388]	@ (8003268 <HAL_DMA_IRQHandler+0x40c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a60      	ldr	r2, [pc, #384]	@ (800326c <HAL_DMA_IRQHandler+0x410>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003270 <HAL_DMA_IRQHandler+0x414>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003274 <HAL_DMA_IRQHandler+0x418>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5b      	ldr	r2, [pc, #364]	@ (8003278 <HAL_DMA_IRQHandler+0x41c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5a      	ldr	r2, [pc, #360]	@ (800327c <HAL_DMA_IRQHandler+0x420>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a58      	ldr	r2, [pc, #352]	@ (8003280 <HAL_DMA_IRQHandler+0x424>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a57      	ldr	r2, [pc, #348]	@ (8003284 <HAL_DMA_IRQHandler+0x428>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a55      	ldr	r2, [pc, #340]	@ (8003288 <HAL_DMA_IRQHandler+0x42c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_DMA_IRQHandler+0x430>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_IRQHandler+0x2ee>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <HAL_DMA_IRQHandler+0x434>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10a      	bne.n	8003160 <HAL_DMA_IRQHandler+0x304>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e003      	b.n	8003168 <HAL_DMA_IRQHandler+0x30c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2201      	movs	r2, #1
 8003176:	409a      	lsls	r2, r3
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	f043 0202 	orr.w	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2204      	movs	r2, #4
 8003192:	409a      	lsls	r2, r3
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 808f 	beq.w	80032bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <HAL_DMA_IRQHandler+0x3f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003258 <HAL_DMA_IRQHandler+0x3fc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a29      	ldr	r2, [pc, #164]	@ (800325c <HAL_DMA_IRQHandler+0x400>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a27      	ldr	r2, [pc, #156]	@ (8003260 <HAL_DMA_IRQHandler+0x404>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a26      	ldr	r2, [pc, #152]	@ (8003264 <HAL_DMA_IRQHandler+0x408>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <HAL_DMA_IRQHandler+0x40c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a23      	ldr	r2, [pc, #140]	@ (800326c <HAL_DMA_IRQHandler+0x410>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a21      	ldr	r2, [pc, #132]	@ (8003270 <HAL_DMA_IRQHandler+0x414>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a20      	ldr	r2, [pc, #128]	@ (8003274 <HAL_DMA_IRQHandler+0x418>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_DMA_IRQHandler+0x41c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <HAL_DMA_IRQHandler+0x420>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1b      	ldr	r2, [pc, #108]	@ (8003280 <HAL_DMA_IRQHandler+0x424>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <HAL_DMA_IRQHandler+0x428>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_DMA_IRQHandler+0x42c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <HAL_DMA_IRQHandler+0x430>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_IRQHandler+0x3e2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <HAL_DMA_IRQHandler+0x434>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12a      	bne.n	8003294 <HAL_DMA_IRQHandler+0x438>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e023      	b.n	800329c <HAL_DMA_IRQHandler+0x440>
 8003254:	40020010 	.word	0x40020010
 8003258:	40020028 	.word	0x40020028
 800325c:	40020040 	.word	0x40020040
 8003260:	40020058 	.word	0x40020058
 8003264:	40020070 	.word	0x40020070
 8003268:	40020088 	.word	0x40020088
 800326c:	400200a0 	.word	0x400200a0
 8003270:	400200b8 	.word	0x400200b8
 8003274:	40020410 	.word	0x40020410
 8003278:	40020428 	.word	0x40020428
 800327c:	40020440 	.word	0x40020440
 8003280:	40020458 	.word	0x40020458
 8003284:	40020470 	.word	0x40020470
 8003288:	40020488 	.word	0x40020488
 800328c:	400204a0 	.word	0x400204a0
 8003290:	400204b8 	.word	0x400204b8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2210      	movs	r2, #16
 80032c6:	409a      	lsls	r2, r3
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a6 	beq.w	800341e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a85      	ldr	r2, [pc, #532]	@ (80034ec <HAL_DMA_IRQHandler+0x690>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d04a      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a83      	ldr	r2, [pc, #524]	@ (80034f0 <HAL_DMA_IRQHandler+0x694>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d045      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a82      	ldr	r2, [pc, #520]	@ (80034f4 <HAL_DMA_IRQHandler+0x698>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d040      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a80      	ldr	r2, [pc, #512]	@ (80034f8 <HAL_DMA_IRQHandler+0x69c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d03b      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7f      	ldr	r2, [pc, #508]	@ (80034fc <HAL_DMA_IRQHandler+0x6a0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d036      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a7d      	ldr	r2, [pc, #500]	@ (8003500 <HAL_DMA_IRQHandler+0x6a4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d031      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7c      	ldr	r2, [pc, #496]	@ (8003504 <HAL_DMA_IRQHandler+0x6a8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d02c      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7a      	ldr	r2, [pc, #488]	@ (8003508 <HAL_DMA_IRQHandler+0x6ac>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d027      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a79      	ldr	r2, [pc, #484]	@ (800350c <HAL_DMA_IRQHandler+0x6b0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a77      	ldr	r2, [pc, #476]	@ (8003510 <HAL_DMA_IRQHandler+0x6b4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a76      	ldr	r2, [pc, #472]	@ (8003514 <HAL_DMA_IRQHandler+0x6b8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a74      	ldr	r2, [pc, #464]	@ (8003518 <HAL_DMA_IRQHandler+0x6bc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a73      	ldr	r2, [pc, #460]	@ (800351c <HAL_DMA_IRQHandler+0x6c0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a71      	ldr	r2, [pc, #452]	@ (8003520 <HAL_DMA_IRQHandler+0x6c4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a70      	ldr	r2, [pc, #448]	@ (8003524 <HAL_DMA_IRQHandler+0x6c8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_DMA_IRQHandler+0x516>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <HAL_DMA_IRQHandler+0x6cc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10a      	bne.n	8003388 <HAL_DMA_IRQHandler+0x52c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e009      	b.n	800339c <HAL_DMA_IRQHandler+0x540>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03e      	beq.n	800341e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2210      	movs	r2, #16
 80033aa:	409a      	lsls	r2, r3
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d108      	bne.n	80033de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d024      	beq.n	800341e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
 80033dc:	e01f      	b.n	800341e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01b      	beq.n	800341e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
 80033ee:	e016      	b.n	800341e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2220      	movs	r2, #32
 8003428:	409a      	lsls	r2, r3
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8110 	beq.w	8003654 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2c      	ldr	r2, [pc, #176]	@ (80034ec <HAL_DMA_IRQHandler+0x690>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <HAL_DMA_IRQHandler+0x694>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a29      	ldr	r2, [pc, #164]	@ (80034f4 <HAL_DMA_IRQHandler+0x698>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a28      	ldr	r2, [pc, #160]	@ (80034f8 <HAL_DMA_IRQHandler+0x69c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a26      	ldr	r2, [pc, #152]	@ (80034fc <HAL_DMA_IRQHandler+0x6a0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a25      	ldr	r2, [pc, #148]	@ (8003500 <HAL_DMA_IRQHandler+0x6a4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <HAL_DMA_IRQHandler+0x6a8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_DMA_IRQHandler+0x6ac>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a20      	ldr	r2, [pc, #128]	@ (800350c <HAL_DMA_IRQHandler+0x6b0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_DMA_IRQHandler+0x6b4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <HAL_DMA_IRQHandler+0x6b8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_DMA_IRQHandler+0x6bc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1a      	ldr	r2, [pc, #104]	@ (800351c <HAL_DMA_IRQHandler+0x6c0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_DMA_IRQHandler+0x6c4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_DMA_IRQHandler+0x6c8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x678>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <HAL_DMA_IRQHandler+0x6cc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d12b      	bne.n	800352c <HAL_DMA_IRQHandler+0x6d0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e02a      	b.n	8003540 <HAL_DMA_IRQHandler+0x6e4>
 80034ea:	bf00      	nop
 80034ec:	40020010 	.word	0x40020010
 80034f0:	40020028 	.word	0x40020028
 80034f4:	40020040 	.word	0x40020040
 80034f8:	40020058 	.word	0x40020058
 80034fc:	40020070 	.word	0x40020070
 8003500:	40020088 	.word	0x40020088
 8003504:	400200a0 	.word	0x400200a0
 8003508:	400200b8 	.word	0x400200b8
 800350c:	40020410 	.word	0x40020410
 8003510:	40020428 	.word	0x40020428
 8003514:	40020440 	.word	0x40020440
 8003518:	40020458 	.word	0x40020458
 800351c:	40020470 	.word	0x40020470
 8003520:	40020488 	.word	0x40020488
 8003524:	400204a0 	.word	0x400204a0
 8003528:	400204b8 	.word	0x400204b8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8087 	beq.w	8003654 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2220      	movs	r2, #32
 8003550:	409a      	lsls	r2, r3
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b04      	cmp	r3, #4
 8003560:	d139      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0216 	bic.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003580:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_DMA_IRQHandler+0x736>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	223f      	movs	r2, #63	@ 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 834a 	beq.w	8003c60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
          }
          return;
 80035d4:	e344      	b.n	8003c60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d018      	beq.n	8003616 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e027      	b.n	8003654 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
 8003614:	e01e      	b.n	8003654 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0210 	bic.w	r2, r2, #16
 8003632:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8306 	beq.w	8003c6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8088 	beq.w	800377c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7a      	ldr	r2, [pc, #488]	@ (8003864 <HAL_DMA_IRQHandler+0xa08>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d04a      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a79      	ldr	r2, [pc, #484]	@ (8003868 <HAL_DMA_IRQHandler+0xa0c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d045      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a77      	ldr	r2, [pc, #476]	@ (800386c <HAL_DMA_IRQHandler+0xa10>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d040      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a76      	ldr	r2, [pc, #472]	@ (8003870 <HAL_DMA_IRQHandler+0xa14>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03b      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a74      	ldr	r2, [pc, #464]	@ (8003874 <HAL_DMA_IRQHandler+0xa18>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a73      	ldr	r2, [pc, #460]	@ (8003878 <HAL_DMA_IRQHandler+0xa1c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a71      	ldr	r2, [pc, #452]	@ (800387c <HAL_DMA_IRQHandler+0xa20>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a70      	ldr	r2, [pc, #448]	@ (8003880 <HAL_DMA_IRQHandler+0xa24>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <HAL_DMA_IRQHandler+0xa28>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d022      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003888 <HAL_DMA_IRQHandler+0xa2c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a6b      	ldr	r2, [pc, #428]	@ (800388c <HAL_DMA_IRQHandler+0xa30>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003890 <HAL_DMA_IRQHandler+0xa34>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a68      	ldr	r2, [pc, #416]	@ (8003894 <HAL_DMA_IRQHandler+0xa38>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a67      	ldr	r2, [pc, #412]	@ (8003898 <HAL_DMA_IRQHandler+0xa3c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a65      	ldr	r2, [pc, #404]	@ (800389c <HAL_DMA_IRQHandler+0xa40>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_IRQHandler+0x8b8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a64      	ldr	r2, [pc, #400]	@ (80038a0 <HAL_DMA_IRQHandler+0xa44>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <HAL_DMA_IRQHandler+0x8ca>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_DMA_IRQHandler+0x8da>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373e:	429a      	cmp	r2, r3
 8003740:	d307      	bcc.n	8003752 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f2      	bne.n	8003736 <HAL_DMA_IRQHandler+0x8da>
 8003750:	e000      	b.n	8003754 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003752:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800376a:	e003      	b.n	8003774 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8272 	beq.w	8003c6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
 800378e:	e26c      	b.n	8003c6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a43      	ldr	r2, [pc, #268]	@ (80038a4 <HAL_DMA_IRQHandler+0xa48>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d022      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a42      	ldr	r2, [pc, #264]	@ (80038a8 <HAL_DMA_IRQHandler+0xa4c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01d      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <HAL_DMA_IRQHandler+0xa50>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a3f      	ldr	r2, [pc, #252]	@ (80038b0 <HAL_DMA_IRQHandler+0xa54>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3d      	ldr	r2, [pc, #244]	@ (80038b4 <HAL_DMA_IRQHandler+0xa58>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3c      	ldr	r2, [pc, #240]	@ (80038b8 <HAL_DMA_IRQHandler+0xa5c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a3a      	ldr	r2, [pc, #232]	@ (80038bc <HAL_DMA_IRQHandler+0xa60>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x984>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a39      	ldr	r2, [pc, #228]	@ (80038c0 <HAL_DMA_IRQHandler+0xa64>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x988>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_IRQHandler+0x98a>
 80037e4:	2300      	movs	r3, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 823f 	beq.w	8003c6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2204      	movs	r2, #4
 80037fe:	409a      	lsls	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80cd 	beq.w	80039a4 <HAL_DMA_IRQHandler+0xb48>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80c7 	beq.w	80039a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2204      	movs	r2, #4
 8003820:	409a      	lsls	r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d049      	beq.n	80038c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8210 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384c:	e20a      	b.n	8003c64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8206 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003860:	e200      	b.n	8003c64 <HAL_DMA_IRQHandler+0xe08>
 8003862:	bf00      	nop
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
 80038a4:	58025408 	.word	0x58025408
 80038a8:	5802541c 	.word	0x5802541c
 80038ac:	58025430 	.word	0x58025430
 80038b0:	58025444 	.word	0x58025444
 80038b4:	58025458 	.word	0x58025458
 80038b8:	5802546c 	.word	0x5802546c
 80038bc:	58025480 	.word	0x58025480
 80038c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d160      	bne.n	8003990 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad0 <HAL_DMA_IRQHandler+0xc74>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d04a      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a7d      	ldr	r2, [pc, #500]	@ (8003ad4 <HAL_DMA_IRQHandler+0xc78>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d045      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ad8 <HAL_DMA_IRQHandler+0xc7c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d040      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a7a      	ldr	r2, [pc, #488]	@ (8003adc <HAL_DMA_IRQHandler+0xc80>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d03b      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a79      	ldr	r2, [pc, #484]	@ (8003ae0 <HAL_DMA_IRQHandler+0xc84>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d036      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a77      	ldr	r2, [pc, #476]	@ (8003ae4 <HAL_DMA_IRQHandler+0xc88>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d031      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a76      	ldr	r2, [pc, #472]	@ (8003ae8 <HAL_DMA_IRQHandler+0xc8c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d02c      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a74      	ldr	r2, [pc, #464]	@ (8003aec <HAL_DMA_IRQHandler+0xc90>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d027      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_DMA_IRQHandler+0xc94>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d022      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a71      	ldr	r2, [pc, #452]	@ (8003af4 <HAL_DMA_IRQHandler+0xc98>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01d      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a70      	ldr	r2, [pc, #448]	@ (8003af8 <HAL_DMA_IRQHandler+0xc9c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d018      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6e      	ldr	r2, [pc, #440]	@ (8003afc <HAL_DMA_IRQHandler+0xca0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b00 <HAL_DMA_IRQHandler+0xca4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a6b      	ldr	r2, [pc, #428]	@ (8003b04 <HAL_DMA_IRQHandler+0xca8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6a      	ldr	r2, [pc, #424]	@ (8003b08 <HAL_DMA_IRQHandler+0xcac>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_DMA_IRQHandler+0xb12>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a68      	ldr	r2, [pc, #416]	@ (8003b0c <HAL_DMA_IRQHandler+0xcb0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <HAL_DMA_IRQHandler+0xb24>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0208 	bic.w	r2, r2, #8
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e007      	b.n	8003990 <HAL_DMA_IRQHandler+0xb34>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8165 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a2:	e15f      	b.n	8003c64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2202      	movs	r2, #2
 80039ae:	409a      	lsls	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80c5 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xce8>
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80bf 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2202      	movs	r2, #2
 80039d0:	409a      	lsls	r2, r3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d018      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 813a 	beq.w	8003c68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039fc:	e134      	b.n	8003c68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8130 	beq.w	8003c68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a10:	e12a      	b.n	8003c68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 8089 	bne.w	8003b30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad0 <HAL_DMA_IRQHandler+0xc74>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d04a      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a29      	ldr	r2, [pc, #164]	@ (8003ad4 <HAL_DMA_IRQHandler+0xc78>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d045      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <HAL_DMA_IRQHandler+0xc7c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d040      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a26      	ldr	r2, [pc, #152]	@ (8003adc <HAL_DMA_IRQHandler+0xc80>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d03b      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a25      	ldr	r2, [pc, #148]	@ (8003ae0 <HAL_DMA_IRQHandler+0xc84>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d036      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a23      	ldr	r2, [pc, #140]	@ (8003ae4 <HAL_DMA_IRQHandler+0xc88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d031      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_DMA_IRQHandler+0xc8c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d02c      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a20      	ldr	r2, [pc, #128]	@ (8003aec <HAL_DMA_IRQHandler+0xc90>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d027      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <HAL_DMA_IRQHandler+0xc94>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <HAL_DMA_IRQHandler+0xc98>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01d      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <HAL_DMA_IRQHandler+0xc9c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <HAL_DMA_IRQHandler+0xca0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a19      	ldr	r2, [pc, #100]	@ (8003b00 <HAL_DMA_IRQHandler+0xca4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <HAL_DMA_IRQHandler+0xca8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <HAL_DMA_IRQHandler+0xcac>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_DMA_IRQHandler+0xc62>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a14      	ldr	r2, [pc, #80]	@ (8003b0c <HAL_DMA_IRQHandler+0xcb0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d128      	bne.n	8003b10 <HAL_DMA_IRQHandler+0xcb4>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0214 	bic.w	r2, r2, #20
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e027      	b.n	8003b20 <HAL_DMA_IRQHandler+0xcc4>
 8003ad0:	40020010 	.word	0x40020010
 8003ad4:	40020028 	.word	0x40020028
 8003ad8:	40020040 	.word	0x40020040
 8003adc:	40020058 	.word	0x40020058
 8003ae0:	40020070 	.word	0x40020070
 8003ae4:	40020088 	.word	0x40020088
 8003ae8:	400200a0 	.word	0x400200a0
 8003aec:	400200b8 	.word	0x400200b8
 8003af0:	40020410 	.word	0x40020410
 8003af4:	40020428 	.word	0x40020428
 8003af8:	40020440 	.word	0x40020440
 8003afc:	40020458 	.word	0x40020458
 8003b00:	40020470 	.word	0x40020470
 8003b04:	40020488 	.word	0x40020488
 8003b08:	400204a0 	.word	0x400204a0
 8003b0c:	400204b8 	.word	0x400204b8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020a 	bic.w	r2, r2, #10
 8003b1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8097 	beq.w	8003c68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b42:	e091      	b.n	8003c68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8088 	beq.w	8003c6a <HAL_DMA_IRQHandler+0xe0e>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8082 	beq.w	8003c6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a41      	ldr	r2, [pc, #260]	@ (8003c70 <HAL_DMA_IRQHandler+0xe14>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3f      	ldr	r2, [pc, #252]	@ (8003c74 <HAL_DMA_IRQHandler+0xe18>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c78 <HAL_DMA_IRQHandler+0xe1c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3c      	ldr	r2, [pc, #240]	@ (8003c7c <HAL_DMA_IRQHandler+0xe20>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3b      	ldr	r2, [pc, #236]	@ (8003c80 <HAL_DMA_IRQHandler+0xe24>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a39      	ldr	r2, [pc, #228]	@ (8003c84 <HAL_DMA_IRQHandler+0xe28>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a38      	ldr	r2, [pc, #224]	@ (8003c88 <HAL_DMA_IRQHandler+0xe2c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a36      	ldr	r2, [pc, #216]	@ (8003c8c <HAL_DMA_IRQHandler+0xe30>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a35      	ldr	r2, [pc, #212]	@ (8003c90 <HAL_DMA_IRQHandler+0xe34>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	@ (8003c94 <HAL_DMA_IRQHandler+0xe38>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a32      	ldr	r2, [pc, #200]	@ (8003c98 <HAL_DMA_IRQHandler+0xe3c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a30      	ldr	r2, [pc, #192]	@ (8003c9c <HAL_DMA_IRQHandler+0xe40>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca0 <HAL_DMA_IRQHandler+0xe44>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca4 <HAL_DMA_IRQHandler+0xe48>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca8 <HAL_DMA_IRQHandler+0xe4c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xdaa>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2a      	ldr	r2, [pc, #168]	@ (8003cac <HAL_DMA_IRQHandler+0xe50>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d108      	bne.n	8003c18 <HAL_DMA_IRQHandler+0xdbc>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 021c 	bic.w	r2, r2, #28
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e007      	b.n	8003c28 <HAL_DMA_IRQHandler+0xdcc>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 020e 	bic.w	r2, r2, #14
 8003c26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
 8003c5e:	e004      	b.n	8003c6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c60:	bf00      	nop
 8003c62:	e002      	b.n	8003c6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c64:	bf00      	nop
 8003c66:	e000      	b.n	8003c6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c6a:	3728      	adds	r7, #40	@ 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40020010 	.word	0x40020010
 8003c74:	40020028 	.word	0x40020028
 8003c78:	40020040 	.word	0x40020040
 8003c7c:	40020058 	.word	0x40020058
 8003c80:	40020070 	.word	0x40020070
 8003c84:	40020088 	.word	0x40020088
 8003c88:	400200a0 	.word	0x400200a0
 8003c8c:	400200b8 	.word	0x400200b8
 8003c90:	40020410 	.word	0x40020410
 8003c94:	40020428 	.word	0x40020428
 8003c98:	40020440 	.word	0x40020440
 8003c9c:	40020458 	.word	0x40020458
 8003ca0:	40020470 	.word	0x40020470
 8003ca4:	40020488 	.word	0x40020488
 8003ca8:	400204a0 	.word	0x400204a0
 8003cac:	400204b8 	.word	0x400204b8

08003cb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7f      	ldr	r2, [pc, #508]	@ (8003ecc <DMA_SetConfig+0x21c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d072      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ed0 <DMA_SetConfig+0x220>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d06d      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ed4 <DMA_SetConfig+0x224>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d068      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7a      	ldr	r2, [pc, #488]	@ (8003ed8 <DMA_SetConfig+0x228>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d063      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a79      	ldr	r2, [pc, #484]	@ (8003edc <DMA_SetConfig+0x22c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d05e      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a77      	ldr	r2, [pc, #476]	@ (8003ee0 <DMA_SetConfig+0x230>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d059      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a76      	ldr	r2, [pc, #472]	@ (8003ee4 <DMA_SetConfig+0x234>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d054      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a74      	ldr	r2, [pc, #464]	@ (8003ee8 <DMA_SetConfig+0x238>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d04f      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a73      	ldr	r2, [pc, #460]	@ (8003eec <DMA_SetConfig+0x23c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04a      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a71      	ldr	r2, [pc, #452]	@ (8003ef0 <DMA_SetConfig+0x240>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d045      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a70      	ldr	r2, [pc, #448]	@ (8003ef4 <DMA_SetConfig+0x244>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d040      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef8 <DMA_SetConfig+0x248>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d03b      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6d      	ldr	r2, [pc, #436]	@ (8003efc <DMA_SetConfig+0x24c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d036      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6b      	ldr	r2, [pc, #428]	@ (8003f00 <DMA_SetConfig+0x250>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d031      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6a      	ldr	r2, [pc, #424]	@ (8003f04 <DMA_SetConfig+0x254>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d02c      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a68      	ldr	r2, [pc, #416]	@ (8003f08 <DMA_SetConfig+0x258>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d027      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a67      	ldr	r2, [pc, #412]	@ (8003f0c <DMA_SetConfig+0x25c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a65      	ldr	r2, [pc, #404]	@ (8003f10 <DMA_SetConfig+0x260>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a64      	ldr	r2, [pc, #400]	@ (8003f14 <DMA_SetConfig+0x264>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a62      	ldr	r2, [pc, #392]	@ (8003f18 <DMA_SetConfig+0x268>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a61      	ldr	r2, [pc, #388]	@ (8003f1c <DMA_SetConfig+0x26c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f20 <DMA_SetConfig+0x270>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5e      	ldr	r2, [pc, #376]	@ (8003f24 <DMA_SetConfig+0x274>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <DMA_SetConfig+0x10a>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f28 <DMA_SetConfig+0x278>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <DMA_SetConfig+0x10e>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <DMA_SetConfig+0x110>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003dcc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dde:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a39      	ldr	r2, [pc, #228]	@ (8003ecc <DMA_SetConfig+0x21c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a38      	ldr	r2, [pc, #224]	@ (8003ed0 <DMA_SetConfig+0x220>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a36      	ldr	r2, [pc, #216]	@ (8003ed4 <DMA_SetConfig+0x224>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a35      	ldr	r2, [pc, #212]	@ (8003ed8 <DMA_SetConfig+0x228>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a33      	ldr	r2, [pc, #204]	@ (8003edc <DMA_SetConfig+0x22c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a32      	ldr	r2, [pc, #200]	@ (8003ee0 <DMA_SetConfig+0x230>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a30      	ldr	r2, [pc, #192]	@ (8003ee4 <DMA_SetConfig+0x234>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee8 <DMA_SetConfig+0x238>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2d      	ldr	r2, [pc, #180]	@ (8003eec <DMA_SetConfig+0x23c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <DMA_SetConfig+0x240>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <DMA_SetConfig+0x244>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a29      	ldr	r2, [pc, #164]	@ (8003ef8 <DMA_SetConfig+0x248>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <DMA_SetConfig+0x24c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <DMA_SetConfig+0x250>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <DMA_SetConfig+0x254>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <DMA_SetConfig+0x1d0>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a23      	ldr	r2, [pc, #140]	@ (8003f08 <DMA_SetConfig+0x258>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <DMA_SetConfig+0x1d4>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <DMA_SetConfig+0x1d6>
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d059      	beq.n	8003f3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	223f      	movs	r2, #63	@ 0x3f
 8003e94:	409a      	lsls	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d138      	bne.n	8003f2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eca:	e086      	b.n	8003fda <DMA_SetConfig+0x32a>
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	40020040 	.word	0x40020040
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020088 	.word	0x40020088
 8003ee4:	400200a0 	.word	0x400200a0
 8003ee8:	400200b8 	.word	0x400200b8
 8003eec:	40020410 	.word	0x40020410
 8003ef0:	40020428 	.word	0x40020428
 8003ef4:	40020440 	.word	0x40020440
 8003ef8:	40020458 	.word	0x40020458
 8003efc:	40020470 	.word	0x40020470
 8003f00:	40020488 	.word	0x40020488
 8003f04:	400204a0 	.word	0x400204a0
 8003f08:	400204b8 	.word	0x400204b8
 8003f0c:	58025408 	.word	0x58025408
 8003f10:	5802541c 	.word	0x5802541c
 8003f14:	58025430 	.word	0x58025430
 8003f18:	58025444 	.word	0x58025444
 8003f1c:	58025458 	.word	0x58025458
 8003f20:	5802546c 	.word	0x5802546c
 8003f24:	58025480 	.word	0x58025480
 8003f28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
}
 8003f3c:	e04d      	b.n	8003fda <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a29      	ldr	r2, [pc, #164]	@ (8003fe8 <DMA_SetConfig+0x338>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a27      	ldr	r2, [pc, #156]	@ (8003fec <DMA_SetConfig+0x33c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <DMA_SetConfig+0x340>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a24      	ldr	r2, [pc, #144]	@ (8003ff4 <DMA_SetConfig+0x344>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ff8 <DMA_SetConfig+0x348>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a21      	ldr	r2, [pc, #132]	@ (8003ffc <DMA_SetConfig+0x34c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a20      	ldr	r2, [pc, #128]	@ (8004000 <DMA_SetConfig+0x350>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <DMA_SetConfig+0x2de>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <DMA_SetConfig+0x354>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <DMA_SetConfig+0x2e2>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <DMA_SetConfig+0x2e4>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	d108      	bne.n	8003fca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	60da      	str	r2, [r3, #12]
}
 8003fc8:	e007      	b.n	8003fda <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	60da      	str	r2, [r3, #12]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	58025408 	.word	0x58025408
 8003fec:	5802541c 	.word	0x5802541c
 8003ff0:	58025430 	.word	0x58025430
 8003ff4:	58025444 	.word	0x58025444
 8003ff8:	58025458 	.word	0x58025458
 8003ffc:	5802546c 	.word	0x5802546c
 8004000:	58025480 	.word	0x58025480
 8004004:	58025494 	.word	0x58025494

08004008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a42      	ldr	r2, [pc, #264]	@ (8004120 <DMA_CalcBaseAndBitshift+0x118>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04a      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a41      	ldr	r2, [pc, #260]	@ (8004124 <DMA_CalcBaseAndBitshift+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d045      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a3f      	ldr	r2, [pc, #252]	@ (8004128 <DMA_CalcBaseAndBitshift+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d040      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3e      	ldr	r2, [pc, #248]	@ (800412c <DMA_CalcBaseAndBitshift+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d03b      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a3c      	ldr	r2, [pc, #240]	@ (8004130 <DMA_CalcBaseAndBitshift+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d036      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3b      	ldr	r2, [pc, #236]	@ (8004134 <DMA_CalcBaseAndBitshift+0x12c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d031      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a39      	ldr	r2, [pc, #228]	@ (8004138 <DMA_CalcBaseAndBitshift+0x130>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02c      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a38      	ldr	r2, [pc, #224]	@ (800413c <DMA_CalcBaseAndBitshift+0x134>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d027      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a36      	ldr	r2, [pc, #216]	@ (8004140 <DMA_CalcBaseAndBitshift+0x138>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a35      	ldr	r2, [pc, #212]	@ (8004144 <DMA_CalcBaseAndBitshift+0x13c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01d      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a33      	ldr	r2, [pc, #204]	@ (8004148 <DMA_CalcBaseAndBitshift+0x140>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a32      	ldr	r2, [pc, #200]	@ (800414c <DMA_CalcBaseAndBitshift+0x144>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a30      	ldr	r2, [pc, #192]	@ (8004150 <DMA_CalcBaseAndBitshift+0x148>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a2f      	ldr	r2, [pc, #188]	@ (8004154 <DMA_CalcBaseAndBitshift+0x14c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004158 <DMA_CalcBaseAndBitshift+0x150>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <DMA_CalcBaseAndBitshift+0xa8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2c      	ldr	r2, [pc, #176]	@ (800415c <DMA_CalcBaseAndBitshift+0x154>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <DMA_CalcBaseAndBitshift+0xac>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <DMA_CalcBaseAndBitshift+0xae>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d024      	beq.n	8004104 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	3b10      	subs	r3, #16
 80040c2:	4a27      	ldr	r2, [pc, #156]	@ (8004160 <DMA_CalcBaseAndBitshift+0x158>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <DMA_CalcBaseAndBitshift+0x15c>)
 80040d4:	5cd3      	ldrb	r3, [r2, r3]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d908      	bls.n	80040f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004168 <DMA_CalcBaseAndBitshift+0x160>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80040f2:	e00d      	b.n	8004110 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <DMA_CalcBaseAndBitshift+0x160>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6593      	str	r3, [r2, #88]	@ 0x58
 8004102:	e005      	b.n	8004110 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	aaaaaaab 	.word	0xaaaaaaab
 8004164:	0800c0c4 	.word	0x0800c0c4
 8004168:	fffffc00 	.word	0xfffffc00

0800416c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d120      	bne.n	80041c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	2b03      	cmp	r3, #3
 8004186:	d858      	bhi.n	800423a <DMA_CheckFifoParam+0xce>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <DMA_CheckFifoParam+0x24>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041b3 	.word	0x080041b3
 8004198:	080041a1 	.word	0x080041a1
 800419c:	0800423b 	.word	0x0800423b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d048      	beq.n	800423e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041b0:	e045      	b.n	800423e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ba:	d142      	bne.n	8004242 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041c0:	e03f      	b.n	8004242 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ca:	d123      	bne.n	8004214 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d838      	bhi.n	8004246 <DMA_CheckFifoParam+0xda>
 80041d4:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <DMA_CheckFifoParam+0x70>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f3 	.word	0x080041f3
 80041e4:	080041ed 	.word	0x080041ed
 80041e8:	08004205 	.word	0x08004205
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
        break;
 80041f0:	e030      	b.n	8004254 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d025      	beq.n	800424a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004202:	e022      	b.n	800424a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800420c:	d11f      	bne.n	800424e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004212:	e01c      	b.n	800424e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	2b02      	cmp	r3, #2
 800421a:	d902      	bls.n	8004222 <DMA_CheckFifoParam+0xb6>
 800421c:	2b03      	cmp	r3, #3
 800421e:	d003      	beq.n	8004228 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004220:	e018      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e015      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
    break;
 8004238:	e00b      	b.n	8004252 <DMA_CheckFifoParam+0xe6>
        break;
 800423a:	bf00      	nop
 800423c:	e00a      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        break;
 800423e:	bf00      	nop
 8004240:	e008      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        break;
 8004242:	bf00      	nop
 8004244:	e006      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        break;
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
        break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
    break;
 8004252:	bf00      	nop
    }
  }

  return status;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a38      	ldr	r2, [pc, #224]	@ (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a36      	ldr	r2, [pc, #216]	@ (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a35      	ldr	r2, [pc, #212]	@ (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a33      	ldr	r2, [pc, #204]	@ (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a32      	ldr	r2, [pc, #200]	@ (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a30      	ldr	r2, [pc, #192]	@ (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01a      	beq.n	8004302 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3b08      	subs	r3, #8
 80042d4:	4a28      	ldr	r2, [pc, #160]	@ (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4b26      	ldr	r3, [pc, #152]	@ (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a24      	ldr	r2, [pc, #144]	@ (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004300:	e024      	b.n	800434c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3b10      	subs	r3, #16
 800430a:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a1c      	ldr	r2, [pc, #112]	@ (8004388 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d806      	bhi.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a1b      	ldr	r2, [pc, #108]	@ (800438c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d902      	bls.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3308      	adds	r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4b18      	ldr	r3, [pc, #96]	@ (8004390 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800433c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2201      	movs	r2, #1
 8004346:	409a      	lsls	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494
 8004378:	cccccccd 	.word	0xcccccccd
 800437c:	16009600 	.word	0x16009600
 8004380:	58025880 	.word	0x58025880
 8004384:	aaaaaaab 	.word	0xaaaaaaab
 8004388:	400204b8 	.word	0x400204b8
 800438c:	4002040f 	.word	0x4002040f
 8004390:	10008200 	.word	0x10008200
 8004394:	40020880 	.word	0x40020880

08004398 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d04a      	beq.n	8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d847      	bhi.n	8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a25      	ldr	r2, [pc, #148]	@ (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a24      	ldr	r2, [pc, #144]	@ (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01d      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	@ (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	@ (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004408:	2300      	movs	r3, #0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004420:	671a      	str	r2, [r3, #112]	@ 0x70
 8004422:	e009      	b.n	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a11      	ldr	r2, [pc, #68]	@ (800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004436:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3b01      	subs	r3, #1
 800443c:	2201      	movs	r2, #1
 800443e:	409a      	lsls	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	58025408 	.word	0x58025408
 8004454:	5802541c 	.word	0x5802541c
 8004458:	58025430 	.word	0x58025430
 800445c:	58025444 	.word	0x58025444
 8004460:	58025458 	.word	0x58025458
 8004464:	5802546c 	.word	0x5802546c
 8004468:	58025480 	.word	0x58025480
 800446c:	58025494 	.word	0x58025494
 8004470:	1600963f 	.word	0x1600963f
 8004474:	58025940 	.word	0x58025940
 8004478:	1000823f 	.word	0x1000823f
 800447c:	40020940 	.word	0x40020940

08004480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800448e:	4b86      	ldr	r3, [pc, #536]	@ (80046a8 <HAL_GPIO_Init+0x228>)
 8004490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004492:	e18c      	b.n	80047ae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 817e 	beq.w	80047a8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d005      	beq.n	80044c4 <HAL_GPIO_Init+0x44>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d130      	bne.n	8004526 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044fa:	2201      	movs	r2, #1
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 0201 	and.w	r2, r3, #1
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b03      	cmp	r3, #3
 8004530:	d017      	beq.n	8004562 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	2203      	movs	r2, #3
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d123      	bne.n	80045b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	220f      	movs	r2, #15
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	2203      	movs	r2, #3
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80d8 	beq.w	80047a8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f8:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <HAL_GPIO_Init+0x22c>)
 80045fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045fe:	4a2b      	ldr	r2, [pc, #172]	@ (80046ac <HAL_GPIO_Init+0x22c>)
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <HAL_GPIO_Init+0x22c>)
 800460a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004616:	4a26      	ldr	r2, [pc, #152]	@ (80046b0 <HAL_GPIO_Init+0x230>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	3302      	adds	r3, #2
 800461e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <HAL_GPIO_Init+0x234>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d04a      	beq.n	80046d8 <HAL_GPIO_Init+0x258>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <HAL_GPIO_Init+0x238>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d02b      	beq.n	80046a2 <HAL_GPIO_Init+0x222>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_GPIO_Init+0x23c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d025      	beq.n	800469e <HAL_GPIO_Init+0x21e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <HAL_GPIO_Init+0x240>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <HAL_GPIO_Init+0x21a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a19      	ldr	r2, [pc, #100]	@ (80046c4 <HAL_GPIO_Init+0x244>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d019      	beq.n	8004696 <HAL_GPIO_Init+0x216>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a18      	ldr	r2, [pc, #96]	@ (80046c8 <HAL_GPIO_Init+0x248>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_GPIO_Init+0x212>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a17      	ldr	r2, [pc, #92]	@ (80046cc <HAL_GPIO_Init+0x24c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00d      	beq.n	800468e <HAL_GPIO_Init+0x20e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a16      	ldr	r2, [pc, #88]	@ (80046d0 <HAL_GPIO_Init+0x250>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <HAL_GPIO_Init+0x20a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <HAL_GPIO_Init+0x254>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d101      	bne.n	8004686 <HAL_GPIO_Init+0x206>
 8004682:	2309      	movs	r3, #9
 8004684:	e029      	b.n	80046da <HAL_GPIO_Init+0x25a>
 8004686:	230a      	movs	r3, #10
 8004688:	e027      	b.n	80046da <HAL_GPIO_Init+0x25a>
 800468a:	2307      	movs	r3, #7
 800468c:	e025      	b.n	80046da <HAL_GPIO_Init+0x25a>
 800468e:	2306      	movs	r3, #6
 8004690:	e023      	b.n	80046da <HAL_GPIO_Init+0x25a>
 8004692:	2305      	movs	r3, #5
 8004694:	e021      	b.n	80046da <HAL_GPIO_Init+0x25a>
 8004696:	2304      	movs	r3, #4
 8004698:	e01f      	b.n	80046da <HAL_GPIO_Init+0x25a>
 800469a:	2303      	movs	r3, #3
 800469c:	e01d      	b.n	80046da <HAL_GPIO_Init+0x25a>
 800469e:	2302      	movs	r3, #2
 80046a0:	e01b      	b.n	80046da <HAL_GPIO_Init+0x25a>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e019      	b.n	80046da <HAL_GPIO_Init+0x25a>
 80046a6:	bf00      	nop
 80046a8:	58000080 	.word	0x58000080
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58000400 	.word	0x58000400
 80046b4:	58020000 	.word	0x58020000
 80046b8:	58020400 	.word	0x58020400
 80046bc:	58020800 	.word	0x58020800
 80046c0:	58020c00 	.word	0x58020c00
 80046c4:	58021000 	.word	0x58021000
 80046c8:	58021400 	.word	0x58021400
 80046cc:	58021800 	.word	0x58021800
 80046d0:	58021c00 	.word	0x58021c00
 80046d4:	58022400 	.word	0x58022400
 80046d8:	2300      	movs	r3, #0
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	f002 0203 	and.w	r2, r2, #3
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	4093      	lsls	r3, r2
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ea:	4938      	ldr	r1, [pc, #224]	@ (80047cc <HAL_GPIO_Init+0x34c>)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800471e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800474c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3301      	adds	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f ae6b 	bne.w	8004494 <HAL_GPIO_Init+0x14>
  }
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3724      	adds	r7, #36	@ 0x24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	58000400 	.word	0x58000400

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047ec:	e003      	b.n	80047f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	041a      	lsls	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	619a      	str	r2, [r3, #24]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004814:	887a      	ldrh	r2, [r7, #2]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4013      	ands	r3, r2
 800481a:	041a      	lsls	r2, r3, #16
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	43d9      	mvns	r1, r3
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	400b      	ands	r3, r1
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	619a      	str	r2, [r3, #24]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004844:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc f981 	bl	8000b64 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_PWREx_ConfigSupply+0x70>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00a      	beq.n	8004896 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004880:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <HAL_PWREx_ConfigSupply+0x70>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d001      	beq.n	8004892 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e01f      	b.n	80048d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e01d      	b.n	80048d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004896:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <HAL_PWREx_ConfigSupply+0x70>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 0207 	bic.w	r2, r3, #7
 800489e:	490f      	ldr	r1, [pc, #60]	@ (80048dc <HAL_PWREx_ConfigSupply+0x70>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048a6:	f7fc fdfb 	bl	80014a0 <HAL_GetTick>
 80048aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048ac:	e009      	b.n	80048c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048ae:	f7fc fdf7 	bl	80014a0 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048bc:	d901      	bls.n	80048c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e007      	b.n	80048d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_PWREx_ConfigSupply+0x70>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ce:	d1ee      	bne.n	80048ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	58024800 	.word	0x58024800

080048e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	@ 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e3c8      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8087 	beq.w	8004a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004900:	4b88      	ldr	r3, [pc, #544]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800490a:	4b86      	ldr	r3, [pc, #536]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	2b10      	cmp	r3, #16
 8004914:	d007      	beq.n	8004926 <HAL_RCC_OscConfig+0x46>
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	2b18      	cmp	r3, #24
 800491a:	d110      	bne.n	800493e <HAL_RCC_OscConfig+0x5e>
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d10b      	bne.n	800493e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004926:	4b7f      	ldr	r3, [pc, #508]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d06c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x12c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d168      	bne.n	8004a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e3a2      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x76>
 8004948:	4b76      	ldr	r3, [pc, #472]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a75      	ldr	r2, [pc, #468]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 800494e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e02e      	b.n	80049b4 <HAL_RCC_OscConfig+0xd4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x98>
 800495e:	4b71      	ldr	r3, [pc, #452]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a70      	ldr	r2, [pc, #448]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6d      	ldr	r2, [pc, #436]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e01d      	b.n	80049b4 <HAL_RCC_OscConfig+0xd4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0xbc>
 8004982:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a67      	ldr	r2, [pc, #412]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a64      	ldr	r2, [pc, #400]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e00b      	b.n	80049b4 <HAL_RCC_OscConfig+0xd4>
 800499c:	4b61      	ldr	r3, [pc, #388]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a60      	ldr	r2, [pc, #384]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 80049ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d013      	beq.n	80049e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fc fd70 	bl	80014a0 <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c4:	f7fc fd6c 	bl	80014a0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	@ 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e356      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d6:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0xe4>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fc fd5c 	bl	80014a0 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fc fd58 	bl	80014a0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	@ 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e342      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049fe:	4b49      	ldr	r3, [pc, #292]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x10c>
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 808c 	beq.w	8004b34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1c:	4b41      	ldr	r3, [pc, #260]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a26:	4b3f      	ldr	r3, [pc, #252]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_RCC_OscConfig+0x162>
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2b18      	cmp	r3, #24
 8004a36:	d137      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x1c8>
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d132      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a42:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_RCC_OscConfig+0x17a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e314      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a5a:	4b32      	ldr	r3, [pc, #200]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 0219 	bic.w	r2, r3, #25
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	492f      	ldr	r1, [pc, #188]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fc fd18 	bl	80014a0 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fc fd14 	bl	80014a0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e2fe      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a86:	4b27      	ldr	r3, [pc, #156]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a92:	4b24      	ldr	r3, [pc, #144]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	4920      	ldr	r1, [pc, #128]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa6:	e045      	b.n	8004b34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d026      	beq.n	8004afe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 0219 	bic.w	r2, r3, #25
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4919      	ldr	r1, [pc, #100]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fc fced 	bl	80014a0 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aca:	f7fc fce9 	bl	80014a0 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e2d3      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	490b      	ldr	r1, [pc, #44]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
 8004afc:	e01a      	b.n	8004b34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a08      	ldr	r2, [pc, #32]	@ (8004b24 <HAL_RCC_OscConfig+0x244>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fc fcc9 	bl	80014a0 <HAL_GetTick>
 8004b0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b12:	f7fc fcc5 	bl	80014a0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d903      	bls.n	8004b28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e2af      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
 8004b24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b28:	4b96      	ldr	r3, [pc, #600]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ee      	bne.n	8004b12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d06a      	beq.n	8004c16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b40:	4b90      	ldr	r3, [pc, #576]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d007      	beq.n	8004b66 <HAL_RCC_OscConfig+0x286>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b18      	cmp	r3, #24
 8004b5a:	d11b      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2b4>
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d116      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b66:	4b87      	ldr	r3, [pc, #540]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_RCC_OscConfig+0x29e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e282      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b7e:	4b81      	ldr	r3, [pc, #516]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	497d      	ldr	r1, [pc, #500]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b92:	e040      	b.n	8004c16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d023      	beq.n	8004be4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b9c:	4b79      	ldr	r3, [pc, #484]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a78      	ldr	r2, [pc, #480]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fc fc7a 	bl	80014a0 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bb0:	f7fc fc76 	bl	80014a0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e260      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bc2:	4b70      	ldr	r3, [pc, #448]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bce:	4b6d      	ldr	r3, [pc, #436]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	4969      	ldr	r1, [pc, #420]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60cb      	str	r3, [r1, #12]
 8004be2:	e018      	b.n	8004c16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004be4:	4b67      	ldr	r3, [pc, #412]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a66      	ldr	r2, [pc, #408]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fc56 	bl	80014a0 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bf8:	f7fc fc52 	bl	80014a0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e23c      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d036      	beq.n	8004c90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d019      	beq.n	8004c5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2a:	4b56      	ldr	r3, [pc, #344]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2e:	4a55      	ldr	r2, [pc, #340]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7fc fc33 	bl	80014a0 <HAL_GetTick>
 8004c3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7fc fc2f 	bl	80014a0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e219      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c50:	4b4c      	ldr	r3, [pc, #304]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x35e>
 8004c5c:	e018      	b.n	8004c90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5e:	4b49      	ldr	r3, [pc, #292]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c62:	4a48      	ldr	r2, [pc, #288]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fc fc19 	bl	80014a0 <HAL_GetTick>
 8004c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c72:	f7fc fc15 	bl	80014a0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e1ff      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c84:	4b3f      	ldr	r3, [pc, #252]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d036      	beq.n	8004d0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d019      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ca4:	4b37      	ldr	r3, [pc, #220]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a36      	ldr	r2, [pc, #216]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004caa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cb0:	f7fc fbf6 	bl	80014a0 <HAL_GetTick>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cb8:	f7fc fbf2 	bl	80014a0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e1dc      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cca:	4b2e      	ldr	r3, [pc, #184]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x3d8>
 8004cd6:	e018      	b.n	8004d0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ce4:	f7fc fbdc 	bl	80014a0 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cec:	f7fc fbd8 	bl	80014a0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1c2      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004cfe:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8086 	beq.w	8004e24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x4a8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d88 <HAL_RCC_OscConfig+0x4a8>)
 8004d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d24:	f7fc fbbc 	bl	80014a0 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2c:	f7fc fbb8 	bl	80014a0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	@ 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e1a2      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <HAL_RCC_OscConfig+0x4a8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d106      	bne.n	8004d60 <HAL_RCC_OscConfig+0x480>
 8004d52:	4b0c      	ldr	r3, [pc, #48]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	4a0b      	ldr	r2, [pc, #44]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5e:	e032      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4ac>
 8004d68:	4b06      	ldr	r3, [pc, #24]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	4a05      	ldr	r2, [pc, #20]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d74:	4b03      	ldr	r3, [pc, #12]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4a02      	ldr	r2, [pc, #8]	@ (8004d84 <HAL_RCC_OscConfig+0x4a4>)
 8004d7a:	f023 0304 	bic.w	r3, r3, #4
 8004d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d80:	e021      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e6>
 8004d82:	bf00      	nop
 8004d84:	58024400 	.word	0x58024400
 8004d88:	58024800 	.word	0x58024800
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d10c      	bne.n	8004dae <HAL_RCC_OscConfig+0x4ce>
 8004d94:	4b83      	ldr	r3, [pc, #524]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	4a82      	ldr	r2, [pc, #520]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da0:	4b80      	ldr	r3, [pc, #512]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da4:	4a7f      	ldr	r2, [pc, #508]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dac:	e00b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e6>
 8004dae:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dba:	4b7a      	ldr	r3, [pc, #488]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	4a79      	ldr	r2, [pc, #484]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7fc fb67 	bl	80014a0 <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7fc fb63 	bl	80014a0 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e14b      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dec:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ee      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x4f6>
 8004df8:	e014      	b.n	8004e24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fc fb51 	bl	80014a0 <HAL_GetTick>
 8004dfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fc fb4d 	bl	80014a0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e135      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e18:	4b62      	ldr	r3, [pc, #392]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1ee      	bne.n	8004e02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 812a 	beq.w	8005082 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e36:	2b18      	cmp	r3, #24
 8004e38:	f000 80ba 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	f040 8095 	bne.w	8004f70 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b57      	ldr	r3, [pc, #348]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a56      	ldr	r2, [pc, #344]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fc fb25 	bl	80014a0 <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fc fb21 	bl	80014a0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e10b      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e78:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa8 <HAL_RCC_OscConfig+0x6c8>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e88:	0112      	lsls	r2, r2, #4
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	4945      	ldr	r1, [pc, #276]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	3b01      	subs	r3, #1
 8004e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	025b      	lsls	r3, r3, #9
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	3b01      	subs	r3, #1
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	061b      	lsls	r3, r3, #24
 8004ebe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ec2:	4938      	ldr	r1, [pc, #224]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ec8:	4b36      	ldr	r3, [pc, #216]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	4a35      	ldr	r2, [pc, #212]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ed4:	4b33      	ldr	r3, [pc, #204]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ed8:	4b34      	ldr	r3, [pc, #208]	@ (8004fac <HAL_RCC_OscConfig+0x6cc>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ee0:	00d2      	lsls	r2, r2, #3
 8004ee2:	4930      	ldr	r1, [pc, #192]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	f023 020c 	bic.w	r2, r3, #12
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	492b      	ldr	r1, [pc, #172]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004efa:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	f023 0202 	bic.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	4927      	ldr	r1, [pc, #156]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f0c:	4b25      	ldr	r3, [pc, #148]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a24      	ldr	r2, [pc, #144]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b22      	ldr	r3, [pc, #136]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4a21      	ldr	r2, [pc, #132]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f24:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f30:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc faaa 	bl	80014a0 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fc faa6 	bl	80014a0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e090      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f62:	4b10      	ldr	r3, [pc, #64]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x670>
 8004f6e:	e088      	b.n	8005082 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f70:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fa90 	bl	80014a0 <HAL_GetTick>
 8004f80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fc fa8c 	bl	80014a0 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e076      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f96:	4b03      	ldr	r3, [pc, #12]	@ (8004fa4 <HAL_RCC_OscConfig+0x6c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x6a4>
 8004fa2:	e06e      	b.n	8005082 <HAL_RCC_OscConfig+0x7a2>
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	fffffc0c 	.word	0xfffffc0c
 8004fac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fb0:	4b36      	ldr	r3, [pc, #216]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fb6:	4b35      	ldr	r3, [pc, #212]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d031      	beq.n	8005028 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f003 0203 	and.w	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d12a      	bne.n	8005028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d122      	bne.n	8005028 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d11a      	bne.n	8005028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0a5b      	lsrs	r3, r3, #9
 8004ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d111      	bne.n	8005028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d108      	bne.n	8005028 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005022:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e02b      	b.n	8005084 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800502c:	4b17      	ldr	r3, [pc, #92]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 800502e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005030:	08db      	lsrs	r3, r3, #3
 8005032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005036:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d01f      	beq.n	8005082 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800504e:	f7fc fa27 	bl	80014a0 <HAL_GetTick>
 8005052:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005054:	bf00      	nop
 8005056:	f7fc fa23 	bl	80014a0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	4293      	cmp	r3, r2
 8005060:	d0f9      	beq.n	8005056 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8005064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <HAL_RCC_OscConfig+0x7b0>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800506e:	00d2      	lsls	r2, r2, #3
 8005070:	4906      	ldr	r1, [pc, #24]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8005072:	4313      	orrs	r3, r2
 8005074:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005076:	4b05      	ldr	r3, [pc, #20]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a04      	ldr	r2, [pc, #16]	@ (800508c <HAL_RCC_OscConfig+0x7ac>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3730      	adds	r7, #48	@ 0x30
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	58024400 	.word	0x58024400
 8005090:	ffff0007 	.word	0xffff0007

08005094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e19c      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a8:	4b8a      	ldr	r3, [pc, #552]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d910      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b6:	4b87      	ldr	r3, [pc, #540]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f023 020f 	bic.w	r2, r3, #15
 80050be:	4985      	ldr	r1, [pc, #532]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b83      	ldr	r3, [pc, #524]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e184      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d010      	beq.n	8005106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	4b7b      	ldr	r3, [pc, #492]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d908      	bls.n	8005106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050f4:	4b78      	ldr	r3, [pc, #480]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	4975      	ldr	r1, [pc, #468]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005102:	4313      	orrs	r3, r2
 8005104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	4b70      	ldr	r3, [pc, #448]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800511e:	429a      	cmp	r2, r3
 8005120:	d908      	bls.n	8005134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005122:	4b6d      	ldr	r3, [pc, #436]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	496a      	ldr	r1, [pc, #424]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005130:	4313      	orrs	r3, r2
 8005132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	4b64      	ldr	r3, [pc, #400]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800514c:	429a      	cmp	r2, r3
 800514e:	d908      	bls.n	8005162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005150:	4b61      	ldr	r3, [pc, #388]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	495e      	ldr	r1, [pc, #376]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 800515e:	4313      	orrs	r3, r2
 8005160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d010      	beq.n	8005190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800517a:	429a      	cmp	r2, r3
 800517c:	d908      	bls.n	8005190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800517e:	4b56      	ldr	r3, [pc, #344]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	4953      	ldr	r1, [pc, #332]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 800518c:	4313      	orrs	r3, r2
 800518e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d010      	beq.n	80051be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	4b4d      	ldr	r3, [pc, #308]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d908      	bls.n	80051be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ac:	4b4a      	ldr	r3, [pc, #296]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f023 020f 	bic.w	r2, r3, #15
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4947      	ldr	r1, [pc, #284]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d055      	beq.n	8005276 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051ca:	4b43      	ldr	r3, [pc, #268]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4940      	ldr	r1, [pc, #256]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e4:	4b3c      	ldr	r3, [pc, #240]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d121      	bne.n	8005234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0f6      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d107      	bne.n	800520c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051fc:	4b36      	ldr	r3, [pc, #216]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d115      	bne.n	8005234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0ea      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005214:	4b30      	ldr	r3, [pc, #192]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0de      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005224:	4b2c      	ldr	r3, [pc, #176]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0d6      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005234:	4b28      	ldr	r3, [pc, #160]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f023 0207 	bic.w	r2, r3, #7
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4925      	ldr	r1, [pc, #148]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005242:	4313      	orrs	r3, r2
 8005244:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005246:	f7fc f92b 	bl	80014a0 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524c:	e00a      	b.n	8005264 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524e:	f7fc f927 	bl	80014a0 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e0be      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005264:	4b1c      	ldr	r3, [pc, #112]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	429a      	cmp	r2, r3
 8005274:	d1eb      	bne.n	800524e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	4b14      	ldr	r3, [pc, #80]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	429a      	cmp	r2, r3
 8005290:	d208      	bcs.n	80052a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f023 020f 	bic.w	r2, r3, #15
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	490e      	ldr	r1, [pc, #56]	@ (80052d8 <HAL_RCC_ClockConfig+0x244>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d214      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 020f 	bic.w	r2, r3, #15
 80052ba:	4906      	ldr	r1, [pc, #24]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <HAL_RCC_ClockConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e086      	b.n	80053e2 <HAL_RCC_ClockConfig+0x34e>
 80052d4:	52002000 	.word	0x52002000
 80052d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d010      	beq.n	800530a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	4b3f      	ldr	r3, [pc, #252]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d208      	bcs.n	800530a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052f8:	4b3c      	ldr	r3, [pc, #240]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	4939      	ldr	r1, [pc, #228]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005306:	4313      	orrs	r3, r2
 8005308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d010      	beq.n	8005338 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	4b34      	ldr	r3, [pc, #208]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005322:	429a      	cmp	r2, r3
 8005324:	d208      	bcs.n	8005338 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005326:	4b31      	ldr	r3, [pc, #196]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	492e      	ldr	r1, [pc, #184]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005334:	4313      	orrs	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	4b28      	ldr	r3, [pc, #160]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005350:	429a      	cmp	r2, r3
 8005352:	d208      	bcs.n	8005366 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005354:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	4922      	ldr	r1, [pc, #136]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005362:	4313      	orrs	r3, r2
 8005364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d010      	beq.n	8005394 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	4b1d      	ldr	r3, [pc, #116]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800537e:	429a      	cmp	r2, r3
 8005380:	d208      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005382:	4b1a      	ldr	r3, [pc, #104]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	4917      	ldr	r1, [pc, #92]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 8005390:	4313      	orrs	r3, r2
 8005392:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005394:	f000 f834 	bl	8005400 <HAL_RCC_GetSysClockFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	4912      	ldr	r1, [pc, #72]	@ (80053f0 <HAL_RCC_ClockConfig+0x35c>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053b2:	4b0e      	ldr	r3, [pc, #56]	@ (80053ec <HAL_RCC_ClockConfig+0x358>)
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	4a0d      	ldr	r2, [pc, #52]	@ (80053f0 <HAL_RCC_ClockConfig+0x35c>)
 80053bc:	5cd3      	ldrb	r3, [r2, r3]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <HAL_RCC_ClockConfig+0x360>)
 80053ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053cc:	4a0a      	ldr	r2, [pc, #40]	@ (80053f8 <HAL_RCC_ClockConfig+0x364>)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <HAL_RCC_ClockConfig+0x368>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fc f818 	bl	800140c <HAL_InitTick>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400
 80053f0:	0800c0b4 	.word	0x0800c0b4
 80053f4:	24000004 	.word	0x24000004
 80053f8:	24000000 	.word	0x24000000
 80053fc:	24000008 	.word	0x24000008

08005400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	@ 0x24
 8005404:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005406:	4bb3      	ldr	r3, [pc, #716]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800540e:	2b18      	cmp	r3, #24
 8005410:	f200 8155 	bhi.w	80056be <HAL_RCC_GetSysClockFreq+0x2be>
 8005414:	a201      	add	r2, pc, #4	@ (adr r2, 800541c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	08005481 	.word	0x08005481
 8005420:	080056bf 	.word	0x080056bf
 8005424:	080056bf 	.word	0x080056bf
 8005428:	080056bf 	.word	0x080056bf
 800542c:	080056bf 	.word	0x080056bf
 8005430:	080056bf 	.word	0x080056bf
 8005434:	080056bf 	.word	0x080056bf
 8005438:	080056bf 	.word	0x080056bf
 800543c:	080054a7 	.word	0x080054a7
 8005440:	080056bf 	.word	0x080056bf
 8005444:	080056bf 	.word	0x080056bf
 8005448:	080056bf 	.word	0x080056bf
 800544c:	080056bf 	.word	0x080056bf
 8005450:	080056bf 	.word	0x080056bf
 8005454:	080056bf 	.word	0x080056bf
 8005458:	080056bf 	.word	0x080056bf
 800545c:	080054ad 	.word	0x080054ad
 8005460:	080056bf 	.word	0x080056bf
 8005464:	080056bf 	.word	0x080056bf
 8005468:	080056bf 	.word	0x080056bf
 800546c:	080056bf 	.word	0x080056bf
 8005470:	080056bf 	.word	0x080056bf
 8005474:	080056bf 	.word	0x080056bf
 8005478:	080056bf 	.word	0x080056bf
 800547c:	080054b3 	.word	0x080054b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005480:	4b94      	ldr	r3, [pc, #592]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800548c:	4b91      	ldr	r3, [pc, #580]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	08db      	lsrs	r3, r3, #3
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	4a90      	ldr	r2, [pc, #576]	@ (80056d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
 800549c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800549e:	e111      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054a0:	4b8d      	ldr	r3, [pc, #564]	@ (80056d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054a2:	61bb      	str	r3, [r7, #24]
      break;
 80054a4:	e10e      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054a6:	4b8d      	ldr	r3, [pc, #564]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054a8:	61bb      	str	r3, [r7, #24]
      break;
 80054aa:	e10b      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054ac:	4b8c      	ldr	r3, [pc, #560]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054ae:	61bb      	str	r3, [r7, #24]
      break;
 80054b0:	e108      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054b2:	4b88      	ldr	r3, [pc, #544]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80054bc:	4b85      	ldr	r3, [pc, #532]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054c8:	4b82      	ldr	r3, [pc, #520]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054d2:	4b80      	ldr	r3, [pc, #512]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80e1 	beq.w	80056b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f000 8083 	beq.w	8005604 <HAL_RCC_GetSysClockFreq+0x204>
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f200 80a1 	bhi.w	8005648 <HAL_RCC_GetSysClockFreq+0x248>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_RCC_GetSysClockFreq+0x114>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d056      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005512:	e099      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005514:	4b6f      	ldr	r3, [pc, #444]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02d      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005520:	4b6c      	ldr	r3, [pc, #432]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	08db      	lsrs	r3, r3, #3
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	4a6b      	ldr	r2, [pc, #428]	@ (80056d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	4b62      	ldr	r3, [pc, #392]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555a:	ed97 6a02 	vldr	s12, [r7, #8]
 800555e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80056e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800556e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800557a:	e087      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80056e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800558a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558e:	4b51      	ldr	r3, [pc, #324]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a02 	vldr	s12, [r7, #8]
 80055a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80056e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055be:	e065      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80056ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	4b40      	ldr	r3, [pc, #256]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80056e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005602:	e043      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80056f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005616:	4b2f      	ldr	r3, [pc, #188]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005626:	ed97 6a02 	vldr	s12, [r7, #8]
 800562a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80056e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800562e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800563a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005646:	e021      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80056ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565a:	4b1e      	ldr	r3, [pc, #120]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566a:	ed97 6a02 	vldr	s12, [r7, #8]
 800566e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80056e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800567e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800568a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800568c:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	0a5b      	lsrs	r3, r3, #9
 8005692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005696:	3301      	adds	r3, #1
 8005698:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b0:	ee17 3a90 	vmov	r3, s15
 80056b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80056b6:	e005      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
      break;
 80056bc:	e002      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80056be:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056c0:	61bb      	str	r3, [r7, #24]
      break;
 80056c2:	bf00      	nop
  }

  return sysclockfreq;
 80056c4:	69bb      	ldr	r3, [r7, #24]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3724      	adds	r7, #36	@ 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
 80056d8:	03d09000 	.word	0x03d09000
 80056dc:	003d0900 	.word	0x003d0900
 80056e0:	017d7840 	.word	0x017d7840
 80056e4:	46000000 	.word	0x46000000
 80056e8:	4c742400 	.word	0x4c742400
 80056ec:	4a742400 	.word	0x4a742400
 80056f0:	4bbebc20 	.word	0x4bbebc20

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056fa:	f7ff fe81 	bl	8005400 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <HAL_RCC_GetHCLKFreq+0x50>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	0a1b      	lsrs	r3, r3, #8
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	490f      	ldr	r1, [pc, #60]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x54>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	fa22 f303 	lsr.w	r3, r2, r3
 8005716:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005718:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <HAL_RCC_GetHCLKFreq+0x50>)
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x54>)
 8005722:	5cd3      	ldrb	r3, [r2, r3]
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	fa22 f303 	lsr.w	r3, r2, r3
 800572e:	4a07      	ldr	r2, [pc, #28]	@ (800574c <HAL_RCC_GetHCLKFreq+0x58>)
 8005730:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005732:	4a07      	ldr	r2, [pc, #28]	@ (8005750 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005738:	4b04      	ldr	r3, [pc, #16]	@ (800574c <HAL_RCC_GetHCLKFreq+0x58>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	58024400 	.word	0x58024400
 8005748:	0800c0b4 	.word	0x0800c0b4
 800574c:	24000004 	.word	0x24000004
 8005750:	24000000 	.word	0x24000000

08005754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005758:	f7ff ffcc 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	4904      	ldr	r1, [pc, #16]	@ (800577c <HAL_RCC_GetPCLK1Freq+0x28>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	58024400 	.word	0x58024400
 800577c:	0800c0b4 	.word	0x0800c0b4

08005780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005784:	f7ff ffb6 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005788:	4602      	mov	r2, r0
 800578a:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	4904      	ldr	r1, [pc, #16]	@ (80057a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005796:	5ccb      	ldrb	r3, [r1, r3]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	58024400 	.word	0x58024400
 80057a8:	0800c0b4 	.word	0x0800c0b4

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b0:	b0c6      	sub	sp, #280	@ 0x118
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80057d0:	2500      	movs	r5, #0
 80057d2:	ea54 0305 	orrs.w	r3, r4, r5
 80057d6:	d049      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057e2:	d02f      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057e8:	d828      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ee:	d01a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057f4:	d822      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057fe:	d007      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005800:	e01c      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005802:	4bab      	ldr	r3, [pc, #684]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	4aaa      	ldr	r2, [pc, #680]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800580e:	e01a      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	3308      	adds	r3, #8
 8005816:	2102      	movs	r1, #2
 8005818:	4618      	mov	r0, r3
 800581a:	f001 fc25 	bl	8007068 <RCCEx_PLL2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005824:	e00f      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582a:	3328      	adds	r3, #40	@ 0x28
 800582c:	2102      	movs	r1, #2
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fccc 	bl	80071cc <RCCEx_PLL3_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800583a:	e004      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005842:	e000      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800584e:	4b98      	ldr	r3, [pc, #608]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005852:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800585c:	4a94      	ldr	r2, [pc, #592]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800585e:	430b      	orrs	r3, r1
 8005860:	6513      	str	r3, [r2, #80]	@ 0x50
 8005862:	e003      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005868:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005878:	f04f 0900 	mov.w	r9, #0
 800587c:	ea58 0309 	orrs.w	r3, r8, r9
 8005880:	d047      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005888:	2b04      	cmp	r3, #4
 800588a:	d82a      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800588c:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058a9 	.word	0x080058a9
 8005898:	080058b7 	.word	0x080058b7
 800589c:	080058cd 	.word	0x080058cd
 80058a0:	080058eb 	.word	0x080058eb
 80058a4:	080058eb 	.word	0x080058eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a8:	4b81      	ldr	r3, [pc, #516]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	4a80      	ldr	r2, [pc, #512]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b4:	e01a      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ba:	3308      	adds	r3, #8
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 fbd2 	bl	8007068 <RCCEx_PLL2_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058ca:	e00f      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	3328      	adds	r3, #40	@ 0x28
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fc79 	bl	80071cc <RCCEx_PLL3_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058e0:	e004      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f4:	4b6e      	ldr	r3, [pc, #440]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	f023 0107 	bic.w	r1, r3, #7
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005902:	4a6b      	ldr	r2, [pc, #428]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005904:	430b      	orrs	r3, r1
 8005906:	6513      	str	r3, [r2, #80]	@ 0x50
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800590e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800591e:	f04f 0b00 	mov.w	fp, #0
 8005922:	ea5a 030b 	orrs.w	r3, sl, fp
 8005926:	d05b      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005930:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005934:	d03b      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005936:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800593a:	d834      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800593c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005940:	d037      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005946:	d82e      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005948:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800594c:	d033      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800594e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005952:	d828      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005958:	d01a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800595a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800595e:	d822      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005968:	d007      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800596a:	e01c      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596c:	4b50      	ldr	r3, [pc, #320]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	4a4f      	ldr	r2, [pc, #316]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005978:	e01e      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800597a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597e:	3308      	adds	r3, #8
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fb70 	bl	8007068 <RCCEx_PLL2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800598e:	e013      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	3328      	adds	r3, #40	@ 0x28
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fc17 	bl	80071cc <RCCEx_PLL3_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059a4:	e008      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059c0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059d0:	4a37      	ldr	r2, [pc, #220]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d05d      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a08:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a0c:	d03b      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005a0e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a12:	d834      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a18:	d037      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005a1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a1e:	d82e      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a24:	d033      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005a26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a2a:	d828      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a30:	d01a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a36:	d822      	bhi.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a40:	d007      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a42:	e01c      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a44:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	4a19      	ldr	r2, [pc, #100]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a50:	e01e      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	3308      	adds	r3, #8
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fb04 	bl	8007068 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a66:	e013      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6c:	3328      	adds	r3, #40	@ 0x28
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fbab 	bl	80071cc <RCCEx_PLL3_Config>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a84:	e004      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005a86:	bf00      	nop
 8005a88:	e002      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005a8a:	bf00      	nop
 8005a8c:	e000      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10d      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a98:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005aa8:	4a01      	ldr	r2, [pc, #4]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aae:	e005      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ac8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	d03a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae2:	2b30      	cmp	r3, #48	@ 0x30
 8005ae4:	d01f      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005ae6:	2b30      	cmp	r3, #48	@ 0x30
 8005ae8:	d819      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d00c      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d815      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d019      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d111      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afa:	4baa      	ldr	r3, [pc, #680]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	4aa9      	ldr	r2, [pc, #676]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	2102      	movs	r1, #2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 faa9 	bl	8007068 <RCCEx_PLL2_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b1c:	e006      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b24:	e002      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b34:	4b9b      	ldr	r3, [pc, #620]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b42:	4a98      	ldr	r2, [pc, #608]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b48:	e003      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	d051      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b7c:	d035      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005b7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b82:	d82e      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005b84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b88:	d031      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005b8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b8e:	d828      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	d01a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b9a:	d822      	bhi.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba4:	d007      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ba6:	e01c      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4a7d      	ldr	r2, [pc, #500]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	3308      	adds	r3, #8
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fa52 	bl	8007068 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd0:	3328      	adds	r3, #40	@ 0x28
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 faf9 	bl	80071cc <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c06:	4a67      	ldr	r2, [pc, #412]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c0c:	e003      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d053      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c40:	d033      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005c42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c46:	d82c      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c4c:	d02f      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005c4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c52:	d826      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c58:	d02b      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005c5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c5e:	d820      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c64:	d012      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6a:	d81a      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d022      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c74:	d115      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 f9f2 	bl	8007068 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c8a:	e015      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	3328      	adds	r3, #40	@ 0x28
 8005c92:	2101      	movs	r1, #1
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fa99 	bl	80071cc <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005caa:	bf00      	nop
 8005cac:	e004      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e002      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cc0:	4b38      	ldr	r3, [pc, #224]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cce:	4a35      	ldr	r2, [pc, #212]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cf4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	d058      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d0a:	d033      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d10:	d82c      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d16:	d02f      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1c:	d826      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d22:	d02b      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005d24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d28:	d820      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d2e:	d012      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005d30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d34:	d81a      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d022      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d3e:	d115      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	3308      	adds	r3, #8
 8005d46:	2101      	movs	r1, #1
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f98d 	bl	8007068 <RCCEx_PLL2_Config>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d54:	e015      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	3328      	adds	r3, #40	@ 0x28
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 fa34 	bl	80071cc <RCCEx_PLL3_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d72:	e006      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d74:	bf00      	nop
 8005d76:	e004      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d78:	bf00      	nop
 8005d7a:	e002      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10e      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d8a:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d9a:	4a02      	ldr	r2, [pc, #8]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005dc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	d037      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dda:	d00e      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de0:	d816      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d018      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dea:	d111      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4bc4      	ldr	r3, [pc, #784]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	4ac3      	ldr	r2, [pc, #780]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005df8:	e00f      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	3308      	adds	r3, #8
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f930 	bl	8007068 <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e0e:	e004      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e16:	e000      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e22:	4bb7      	ldr	r3, [pc, #732]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e30:	4ab3      	ldr	r2, [pc, #716]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e32:	430b      	orrs	r3, r1
 8005e34:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e50:	2300      	movs	r3, #0
 8005e52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	d039      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d81c      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005ead 	.word	0x08005ead
 8005e74:	08005e81 	.word	0x08005e81
 8005e78:	08005e8f 	.word	0x08005e8f
 8005e7c:	08005ead 	.word	0x08005ead
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b9f      	ldr	r3, [pc, #636]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	4a9e      	ldr	r2, [pc, #632]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e8c:	e00f      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	3308      	adds	r3, #8
 8005e94:	2102      	movs	r1, #2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 f8e6 	bl	8007068 <RCCEx_PLL2_Config>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005eb6:	4b92      	ldr	r3, [pc, #584]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eba:	f023 0103 	bic.w	r1, r3, #3
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005eca:	e003      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f000 8099 	beq.w	8006028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ef6:	4b83      	ldr	r3, [pc, #524]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a82      	ldr	r2, [pc, #520]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f02:	f7fb facd 	bl	80014a0 <HAL_GetTick>
 8005f06:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f0a:	e00b      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0c:	f7fb fac8 	bl	80014a0 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b64      	cmp	r3, #100	@ 0x64
 8005f1a:	d903      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f22:	e005      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f24:	4b77      	ldr	r3, [pc, #476]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ed      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d173      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f38:	4b71      	ldr	r3, [pc, #452]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f44:	4053      	eors	r3, r2
 8005f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d015      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f56:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f5a:	4b69      	ldr	r3, [pc, #420]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5e:	4a68      	ldr	r2, [pc, #416]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f66:	4b66      	ldr	r3, [pc, #408]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6a:	4a65      	ldr	r2, [pc, #404]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f72:	4a63      	ldr	r2, [pc, #396]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f86:	d118      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fb fa8a 	bl	80014a0 <HAL_GetTick>
 8005f8c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f90:	e00d      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f92:	f7fb fa85 	bl	80014a0 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f9c:	1ad2      	subs	r2, r2, r3
 8005f9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d903      	bls.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005fac:	e005      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fae:	4b54      	ldr	r3, [pc, #336]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0eb      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d129      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd2:	d10e      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fe4:	091a      	lsrs	r2, r3, #4
 8005fe6:	4b48      	ldr	r3, [pc, #288]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	4a45      	ldr	r2, [pc, #276]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6113      	str	r3, [r2, #16]
 8005ff0:	e005      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005ff2:	4b43      	ldr	r3, [pc, #268]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	4a42      	ldr	r2, [pc, #264]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ff8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ffc:	6113      	str	r3, [r2, #16]
 8005ffe:	4b40      	ldr	r3, [pc, #256]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006000:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800600a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600e:	4a3c      	ldr	r2, [pc, #240]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006010:	430b      	orrs	r3, r1
 8006012:	6713      	str	r3, [r2, #112]	@ 0x70
 8006014:	e008      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800601a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800601e:	e003      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f002 0301 	and.w	r3, r2, #1
 8006034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800603e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	f000 808f 	beq.w	8006168 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800604a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006050:	2b28      	cmp	r3, #40	@ 0x28
 8006052:	d871      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006141 	.word	0x08006141
 8006060:	08006139 	.word	0x08006139
 8006064:	08006139 	.word	0x08006139
 8006068:	08006139 	.word	0x08006139
 800606c:	08006139 	.word	0x08006139
 8006070:	08006139 	.word	0x08006139
 8006074:	08006139 	.word	0x08006139
 8006078:	08006139 	.word	0x08006139
 800607c:	0800610d 	.word	0x0800610d
 8006080:	08006139 	.word	0x08006139
 8006084:	08006139 	.word	0x08006139
 8006088:	08006139 	.word	0x08006139
 800608c:	08006139 	.word	0x08006139
 8006090:	08006139 	.word	0x08006139
 8006094:	08006139 	.word	0x08006139
 8006098:	08006139 	.word	0x08006139
 800609c:	08006123 	.word	0x08006123
 80060a0:	08006139 	.word	0x08006139
 80060a4:	08006139 	.word	0x08006139
 80060a8:	08006139 	.word	0x08006139
 80060ac:	08006139 	.word	0x08006139
 80060b0:	08006139 	.word	0x08006139
 80060b4:	08006139 	.word	0x08006139
 80060b8:	08006139 	.word	0x08006139
 80060bc:	08006141 	.word	0x08006141
 80060c0:	08006139 	.word	0x08006139
 80060c4:	08006139 	.word	0x08006139
 80060c8:	08006139 	.word	0x08006139
 80060cc:	08006139 	.word	0x08006139
 80060d0:	08006139 	.word	0x08006139
 80060d4:	08006139 	.word	0x08006139
 80060d8:	08006139 	.word	0x08006139
 80060dc:	08006141 	.word	0x08006141
 80060e0:	08006139 	.word	0x08006139
 80060e4:	08006139 	.word	0x08006139
 80060e8:	08006139 	.word	0x08006139
 80060ec:	08006139 	.word	0x08006139
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006139 	.word	0x08006139
 80060fc:	08006141 	.word	0x08006141
 8006100:	58024400 	.word	0x58024400
 8006104:	58024800 	.word	0x58024800
 8006108:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800610c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006110:	3308      	adds	r3, #8
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ffa7 	bl	8007068 <RCCEx_PLL2_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006120:	e00f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	3328      	adds	r3, #40	@ 0x28
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f001 f84e 	bl	80071cc <RCCEx_PLL3_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800614a:	4bbf      	ldr	r3, [pc, #764]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800614c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006158:	4abb      	ldr	r2, [pc, #748]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800615a:	430b      	orrs	r3, r1
 800615c:	6553      	str	r3, [r2, #84]	@ 0x54
 800615e:	e003      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 0302 	and.w	r3, r2, #2
 8006174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800617e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d041      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	2b05      	cmp	r3, #5
 8006190:	d824      	bhi.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006192:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061e5 	.word	0x080061e5
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061c7 	.word	0x080061c7
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061e5 	.word	0x080061e5
 80061ac:	080061e5 	.word	0x080061e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	3308      	adds	r3, #8
 80061b6:	2101      	movs	r1, #1
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 ff55 	bl	8007068 <RCCEx_PLL2_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061c4:	e00f      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	3328      	adds	r3, #40	@ 0x28
 80061cc:	2101      	movs	r1, #1
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fffc 	bl	80071cc <RCCEx_PLL3_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061da:	e004      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80061e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061ee:	4b96      	ldr	r3, [pc, #600]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	f023 0107 	bic.w	r1, r3, #7
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fc:	4a92      	ldr	r2, [pc, #584]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80061fe:	430b      	orrs	r3, r1
 8006200:	6553      	str	r3, [r2, #84]	@ 0x54
 8006202:	e003      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f002 0304 	and.w	r3, r2, #4
 8006218:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800621c:	2300      	movs	r3, #0
 800621e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006222:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006226:	460b      	mov	r3, r1
 8006228:	4313      	orrs	r3, r2
 800622a:	d044      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006234:	2b05      	cmp	r3, #5
 8006236:	d825      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006238:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	0800628d 	.word	0x0800628d
 8006244:	08006259 	.word	0x08006259
 8006248:	0800626f 	.word	0x0800626f
 800624c:	0800628d 	.word	0x0800628d
 8006250:	0800628d 	.word	0x0800628d
 8006254:	0800628d 	.word	0x0800628d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625c:	3308      	adds	r3, #8
 800625e:	2101      	movs	r1, #1
 8006260:	4618      	mov	r0, r3
 8006262:	f000 ff01 	bl	8007068 <RCCEx_PLL2_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800626c:	e00f      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	3328      	adds	r3, #40	@ 0x28
 8006274:	2101      	movs	r1, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f000 ffa8 	bl	80071cc <RCCEx_PLL3_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006282:	e004      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800628a:	e000      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800628c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006296:	4b6c      	ldr	r3, [pc, #432]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629a:	f023 0107 	bic.w	r1, r3, #7
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a6:	4a68      	ldr	r2, [pc, #416]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f002 0320 	and.w	r3, r2, #32
 80062c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d055      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062e2:	d033      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80062e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062e8:	d82c      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80062ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ee:	d02f      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f4:	d826      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80062f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062fa:	d02b      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80062fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006300:	d820      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006306:	d012      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800630c:	d81a      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d022      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006316:	d115      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	3308      	adds	r3, #8
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fea1 	bl	8007068 <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800632c:	e015      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006332:	3328      	adds	r3, #40	@ 0x28
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f000 ff48 	bl	80071cc <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006342:	e00a      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800634a:	e006      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800634c:	bf00      	nop
 800634e:	e004      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006350:	bf00      	nop
 8006352:	e002      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006362:	4b39      	ldr	r3, [pc, #228]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006366:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006372:	4a35      	ldr	r2, [pc, #212]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6553      	str	r3, [r2, #84]	@ 0x54
 8006378:	e003      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800637e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800638e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006392:	2300      	movs	r3, #0
 8006394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006398:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800639c:	460b      	mov	r3, r1
 800639e:	4313      	orrs	r3, r2
 80063a0:	d058      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063ae:	d033      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80063b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063b4:	d82c      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ba:	d02f      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c0:	d826      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063c6:	d02b      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80063c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063cc:	d820      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d2:	d012      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80063d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d8:	d81a      	bhi.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d022      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e2:	d115      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	3308      	adds	r3, #8
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fe3b 	bl	8007068 <RCCEx_PLL2_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063f8:	e015      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	3328      	adds	r3, #40	@ 0x28
 8006400:	2102      	movs	r1, #2
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fee2 	bl	80071cc <RCCEx_PLL3_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800640e:	e00a      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006416:	e006      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006418:	bf00      	nop
 800641a:	e004      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006426:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10e      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800642e:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006432:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800643e:	4a02      	ldr	r2, [pc, #8]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6593      	str	r3, [r2, #88]	@ 0x58
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800646a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	d055      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800647c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006480:	d033      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006482:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006486:	d82c      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800648c:	d02f      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006492:	d826      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006494:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006498:	d02b      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800649a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800649e:	d820      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064a4:	d012      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80064a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064aa:	d81a      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d022      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b4:	d115      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ba:	3308      	adds	r3, #8
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fdd2 	bl	8007068 <RCCEx_PLL2_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064ca:	e015      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	3328      	adds	r3, #40	@ 0x28
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fe79 	bl	80071cc <RCCEx_PLL3_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064e0:	e00a      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064e8:	e006      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80064ea:	bf00      	nop
 80064ec:	e004      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006500:	4ba0      	ldr	r3, [pc, #640]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006510:	4a9c      	ldr	r2, [pc, #624]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006512:	430b      	orrs	r3, r1
 8006514:	6593      	str	r3, [r2, #88]	@ 0x58
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800651c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 0308 	and.w	r3, r2, #8
 800652c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006536:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d01e      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654c:	d10c      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006552:	3328      	adds	r3, #40	@ 0x28
 8006554:	2102      	movs	r1, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe38 	bl	80071cc <RCCEx_PLL3_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006568:	4b86      	ldr	r3, [pc, #536]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006578:	4a82      	ldr	r2, [pc, #520]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800657a:	430b      	orrs	r3, r1
 800657c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f002 0310 	and.w	r3, r2, #16
 800658a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006594:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d01e      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065aa:	d10c      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	3328      	adds	r3, #40	@ 0x28
 80065b2:	2102      	movs	r1, #2
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fe09 	bl	80071cc <RCCEx_PLL3_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065d8:	430b      	orrs	r3, r1
 80065da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065ea:	2300      	movs	r3, #0
 80065ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065ee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80065f2:	460b      	mov	r3, r1
 80065f4:	4313      	orrs	r3, r2
 80065f6:	d03e      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006604:	d022      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800660a:	d81b      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006614:	d00b      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006616:	e015      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	3308      	adds	r3, #8
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fd21 	bl	8007068 <RCCEx_PLL2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800662c:	e00f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	3328      	adds	r3, #40	@ 0x28
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fdc8 	bl	80071cc <RCCEx_PLL3_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006656:	4b4b      	ldr	r3, [pc, #300]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006666:	4a47      	ldr	r2, [pc, #284]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006668:	430b      	orrs	r3, r1
 800666a:	6593      	str	r3, [r2, #88]	@ 0x58
 800666c:	e003      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006672:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006682:	673b      	str	r3, [r7, #112]	@ 0x70
 8006684:	2300      	movs	r3, #0
 8006686:	677b      	str	r3, [r7, #116]	@ 0x74
 8006688:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d03b      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800669a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800669e:	d01f      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80066a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066a4:	d818      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80066a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066aa:	d003      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80066ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066b0:	d007      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80066b2:	e011      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b4:	4b33      	ldr	r3, [pc, #204]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	4a32      	ldr	r2, [pc, #200]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066c0:	e00f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	3328      	adds	r3, #40	@ 0x28
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fd7e 	bl	80071cc <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ea:	4b26      	ldr	r3, [pc, #152]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066fa:	4a22      	ldr	r2, [pc, #136]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006700:	e003      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006706:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006716:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006718:	2300      	movs	r3, #0
 800671a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800671c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d034      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d007      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006736:	e011      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006738:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	4a11      	ldr	r2, [pc, #68]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800673e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006744:	e00e      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674a:	3308      	adds	r3, #8
 800674c:	2102      	movs	r1, #2
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fc8a 	bl	8007068 <RCCEx_PLL2_Config>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800676c:	4b05      	ldr	r3, [pc, #20]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800676e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006770:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677a:	4a02      	ldr	r2, [pc, #8]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800677c:	430b      	orrs	r3, r1
 800677e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800679c:	663b      	str	r3, [r7, #96]	@ 0x60
 800679e:	2300      	movs	r3, #0
 80067a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80067a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067a6:	460b      	mov	r3, r1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	d00c      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	3328      	adds	r3, #40	@ 0x28
 80067b2:	2102      	movs	r1, #2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fd09 	bl	80071cc <RCCEx_PLL3_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067d4:	2300      	movs	r3, #0
 80067d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80067dc:	460b      	mov	r3, r1
 80067de:	4313      	orrs	r3, r2
 80067e0:	d036      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ec:	d018      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067f2:	d811      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f8:	d014      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80067fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067fe:	d80b      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d011      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006808:	d106      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680a:	4bb7      	ldr	r3, [pc, #732]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	4ab6      	ldr	r2, [pc, #728]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006816:	e008      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800681e:	e004      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006820:	bf00      	nop
 8006822:	e002      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006832:	4bad      	ldr	r3, [pc, #692]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006836:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006840:	4aa9      	ldr	r2, [pc, #676]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006842:	430b      	orrs	r3, r1
 8006844:	6553      	str	r3, [r2, #84]	@ 0x54
 8006846:	e003      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800684c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800685c:	653b      	str	r3, [r7, #80]	@ 0x50
 800685e:	2300      	movs	r3, #0
 8006860:	657b      	str	r3, [r7, #84]	@ 0x54
 8006862:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800686c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800686e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006870:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	4a9b      	ldr	r2, [pc, #620]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800687c:	430b      	orrs	r3, r1
 800687e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800688c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800688e:	2300      	movs	r3, #0
 8006890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006892:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006896:	460b      	mov	r3, r1
 8006898:	4313      	orrs	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800689c:	4b92      	ldr	r3, [pc, #584]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800689e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068aa:	4a8f      	ldr	r2, [pc, #572]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068be:	2300      	movs	r3, #0
 80068c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d00e      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068cc:	4b86      	ldr	r3, [pc, #536]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	4a85      	ldr	r2, [pc, #532]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d6:	6113      	str	r3, [r2, #16]
 80068d8:	4b83      	ldr	r3, [pc, #524]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068da:	6919      	ldr	r1, [r3, #16]
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068e4:	4a80      	ldr	r2, [pc, #512]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068e6:	430b      	orrs	r3, r1
 80068e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80068f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f8:	2300      	movs	r3, #0
 80068fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006906:	4b78      	ldr	r3, [pc, #480]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006914:	4a74      	ldr	r2, [pc, #464]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006916:	430b      	orrs	r3, r1
 8006918:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006926:	633b      	str	r3, [r7, #48]	@ 0x30
 8006928:	2300      	movs	r3, #0
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
 800692c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006930:	460b      	mov	r3, r1
 8006932:	4313      	orrs	r3, r2
 8006934:	d00a      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006936:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	4a68      	ldr	r2, [pc, #416]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006948:	430b      	orrs	r3, r1
 800694a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	2100      	movs	r1, #0
 8006956:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006962:	460b      	mov	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	d011      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	3308      	adds	r3, #8
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fb79 	bl	8007068 <RCCEx_PLL2_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800697c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	2100      	movs	r1, #0
 8006996:	6239      	str	r1, [r7, #32]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
 800699e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069a2:	460b      	mov	r3, r1
 80069a4:	4313      	orrs	r3, r2
 80069a6:	d011      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ac:	3308      	adds	r3, #8
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fb59 	bl	8007068 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80069bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	2100      	movs	r1, #0
 80069d6:	61b9      	str	r1, [r7, #24]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d011      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ec:	3308      	adds	r3, #8
 80069ee:	2102      	movs	r1, #2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fb39 	bl	8007068 <RCCEx_PLL2_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80069fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	2100      	movs	r1, #0
 8006a16:	6139      	str	r1, [r7, #16]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a22:	460b      	mov	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	d011      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	3328      	adds	r3, #40	@ 0x28
 8006a2e:	2100      	movs	r1, #0
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fbcb 	bl	80071cc <RCCEx_PLL3_Config>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	2100      	movs	r1, #0
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d011      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6c:	3328      	adds	r3, #40	@ 0x28
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fbab 	bl	80071cc <RCCEx_PLL3_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	2100      	movs	r1, #0
 8006a96:	6039      	str	r1, [r7, #0]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d011      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	3328      	adds	r3, #40	@ 0x28
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fb8b 	bl	80071cc <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ac8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006acc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400

08006aec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006af0:	f7fe fe00 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	4904      	ldr	r1, [pc, #16]	@ (8006b14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b02:	5ccb      	ldrb	r3, [r1, r3]
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	58024400 	.word	0x58024400
 8006b14:	0800c0b4 	.word	0x0800c0b4

08006b18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b089      	sub	sp, #36	@ 0x24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b20:	4ba1      	ldr	r3, [pc, #644]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b2a:	4b9f      	ldr	r3, [pc, #636]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	0b1b      	lsrs	r3, r3, #12
 8006b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b36:	4b9c      	ldr	r3, [pc, #624]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	091b      	lsrs	r3, r3, #4
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b42:	4b99      	ldr	r3, [pc, #612]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8111 	beq.w	8006d88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	f000 8083 	beq.w	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	f200 80a1 	bhi.w	8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d056      	beq.n	8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b82:	e099      	b.n	8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b84:	4b88      	ldr	r3, [pc, #544]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d02d      	beq.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b90:	4b85      	ldr	r3, [pc, #532]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	08db      	lsrs	r3, r3, #3
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	4a84      	ldr	r2, [pc, #528]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b7b      	ldr	r3, [pc, #492]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bea:	e087      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c2e:	e065      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b59      	ldr	r3, [pc, #356]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c72:	e043      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b48      	ldr	r3, [pc, #288]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb6:	e021      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b37      	ldr	r3, [pc, #220]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	0a5b      	lsrs	r3, r3, #9
 8006d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d22:	ee17 2a90 	vmov	r2, s15
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d50:	ee17 2a90 	vmov	r2, s15
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d58:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	0e1b      	lsrs	r3, r3, #24
 8006d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7e:	ee17 2a90 	vmov	r2, s15
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d86:	e008      	b.n	8006d9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	609a      	str	r2, [r3, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	3724      	adds	r7, #36	@ 0x24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	58024400 	.word	0x58024400
 8006dac:	03d09000 	.word	0x03d09000
 8006db0:	46000000 	.word	0x46000000
 8006db4:	4c742400 	.word	0x4c742400
 8006db8:	4a742400 	.word	0x4a742400
 8006dbc:	4bbebc20 	.word	0x4bbebc20

08006dc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	@ 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dc8:	4ba1      	ldr	r3, [pc, #644]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	0d1b      	lsrs	r3, r3, #20
 8006dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ddc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006dde:	4b9c      	ldr	r3, [pc, #624]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006dea:	4b99      	ldr	r3, [pc, #612]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	08db      	lsrs	r3, r3, #3
 8006df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8111 	beq.w	8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	f000 8083 	beq.w	8006f1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	f200 80a1 	bhi.w	8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d056      	beq.n	8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e2a:	e099      	b.n	8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2c:	4b88      	ldr	r3, [pc, #544]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d02d      	beq.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e38:	4b85      	ldr	r3, [pc, #532]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	08db      	lsrs	r3, r3, #3
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	4a84      	ldr	r2, [pc, #528]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
 8006e48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	ee07 3a90 	vmov	s15, r3
 8006e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b7b      	ldr	r3, [pc, #492]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e92:	e087      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ed6:	e065      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eea:	4b59      	ldr	r3, [pc, #356]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1a:	e043      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b48      	ldr	r3, [pc, #288]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5e:	e021      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b37      	ldr	r3, [pc, #220]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa8:	0a5b      	lsrs	r3, r3, #9
 8006faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fca:	ee17 2a90 	vmov	r2, s15
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	0c1b      	lsrs	r3, r3, #16
 8006fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fdc:	ee07 3a90 	vmov	s15, r3
 8006fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff8:	ee17 2a90 	vmov	r2, s15
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007000:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	0e1b      	lsrs	r3, r3, #24
 8007006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701a:	edd7 6a07 	vldr	s13, [r7, #28]
 800701e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007026:	ee17 2a90 	vmov	r2, s15
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800702e:	e008      	b.n	8007042 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	609a      	str	r2, [r3, #8]
}
 8007042:	bf00      	nop
 8007044:	3724      	adds	r7, #36	@ 0x24
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	58024400 	.word	0x58024400
 8007054:	03d09000 	.word	0x03d09000
 8007058:	46000000 	.word	0x46000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4bbebc20 	.word	0x4bbebc20

08007068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007076:	4b53      	ldr	r3, [pc, #332]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d101      	bne.n	8007086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e099      	b.n	80071ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007086:	4b4f      	ldr	r3, [pc, #316]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a4e      	ldr	r2, [pc, #312]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fa fa05 	bl	80014a0 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800709a:	f7fa fa01 	bl	80014a0 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e086      	b.n	80071ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070ac:	4b45      	ldr	r3, [pc, #276]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f0      	bne.n	800709a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070b8:	4b42      	ldr	r3, [pc, #264]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	493f      	ldr	r1, [pc, #252]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	3b01      	subs	r3, #1
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	b29b      	uxth	r3, r3
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	041b      	lsls	r3, r3, #16
 80070ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	061b      	lsls	r3, r3, #24
 80070f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070fc:	4931      	ldr	r1, [pc, #196]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007102:	4b30      	ldr	r3, [pc, #192]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	492d      	ldr	r1, [pc, #180]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007114:	4b2b      	ldr	r3, [pc, #172]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	f023 0220 	bic.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4928      	ldr	r1, [pc, #160]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007126:	4b27      	ldr	r3, [pc, #156]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	4a26      	ldr	r2, [pc, #152]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007132:	4b24      	ldr	r3, [pc, #144]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007136:	4b24      	ldr	r3, [pc, #144]	@ (80071c8 <RCCEx_PLL2_Config+0x160>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	69d2      	ldr	r2, [r2, #28]
 800713e:	00d2      	lsls	r2, r2, #3
 8007140:	4920      	ldr	r1, [pc, #128]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007146:	4b1f      	ldr	r3, [pc, #124]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	4a1e      	ldr	r2, [pc, #120]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800714c:	f043 0310 	orr.w	r3, r3, #16
 8007150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007158:	4b1a      	ldr	r3, [pc, #104]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800715e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007164:	e00f      	b.n	8007186 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800716c:	4b15      	ldr	r3, [pc, #84]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a14      	ldr	r2, [pc, #80]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007178:	e005      	b.n	8007186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800717a:	4b12      	ldr	r3, [pc, #72]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	4a11      	ldr	r2, [pc, #68]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007180:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0e      	ldr	r2, [pc, #56]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800718c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fa f985 	bl	80014a0 <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007198:	e008      	b.n	80071ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800719a:	f7fa f981 	bl	80014a0 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e006      	b.n	80071ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ac:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	ffff0007 	.word	0xffff0007

080071cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071da:	4b53      	ldr	r3, [pc, #332]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d101      	bne.n	80071ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e099      	b.n	800731e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a4e      	ldr	r2, [pc, #312]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f6:	f7fa f953 	bl	80014a0 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071fc:	e008      	b.n	8007210 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071fe:	f7fa f94f 	bl	80014a0 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e086      	b.n	800731e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007210:	4b45      	ldr	r3, [pc, #276]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f0      	bne.n	80071fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800721c:	4b42      	ldr	r3, [pc, #264]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	051b      	lsls	r3, r3, #20
 800722a:	493f      	ldr	r1, [pc, #252]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800722c:	4313      	orrs	r3, r2
 800722e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	3b01      	subs	r3, #1
 8007236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	025b      	lsls	r3, r3, #9
 8007242:	b29b      	uxth	r3, r3
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	3b01      	subs	r3, #1
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	3b01      	subs	r3, #1
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007260:	4931      	ldr	r1, [pc, #196]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007266:	4b30      	ldr	r3, [pc, #192]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	492d      	ldr	r1, [pc, #180]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007274:	4313      	orrs	r3, r2
 8007276:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007278:	4b2b      	ldr	r3, [pc, #172]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800727a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	4928      	ldr	r1, [pc, #160]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800728a:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	4a26      	ldr	r2, [pc, #152]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007296:	4b24      	ldr	r3, [pc, #144]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729a:	4b24      	ldr	r3, [pc, #144]	@ (800732c <RCCEx_PLL3_Config+0x160>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	69d2      	ldr	r2, [r2, #28]
 80072a2:	00d2      	lsls	r2, r2, #3
 80072a4:	4920      	ldr	r1, [pc, #128]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	4a19      	ldr	r2, [pc, #100]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072c8:	e00f      	b.n	80072ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d106      	bne.n	80072de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072d0:	4b15      	ldr	r3, [pc, #84]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072dc:	e005      	b.n	80072ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a11      	ldr	r2, [pc, #68]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f6:	f7fa f8d3 	bl	80014a0 <HAL_GetTick>
 80072fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072fc:	e008      	b.n	8007310 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072fe:	f7fa f8cf 	bl	80014a0 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	58024400 	.word	0x58024400
 800732c:	ffff0007 	.word	0xffff0007

08007330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e042      	b.n	80073c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7f9 fd25 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2224      	movs	r2, #36	@ 0x24
 800735e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 fbee 	bl	8008b5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fd7f 	bl	8007e84 <UART_SetConfig>
 8007386:	4603      	mov	r3, r0
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e01b      	b.n	80073c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800739e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fc6d 	bl	8008ca0 <UART_CheckIdleState>
 80073c6:	4603      	mov	r3, r0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	@ 0x28
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d17b      	bne.n	80074e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_UART_Transmit+0x26>
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e074      	b.n	80074e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2221      	movs	r2, #33	@ 0x21
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800740a:	f7fa f849 	bl	80014a0 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007428:	d108      	bne.n	800743c <HAL_UART_Transmit+0x6c>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e003      	b.n	8007444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007444:	e030      	b.n	80074a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	@ 0x80
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f001 fccf 	bl	8008df4 <UART_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e03d      	b.n	80074e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800747c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	3302      	adds	r3, #2
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	e007      	b.n	8007496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	781a      	ldrb	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3301      	adds	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1c8      	bne.n	8007446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2200      	movs	r2, #0
 80074bc:	2140      	movs	r1, #64	@ 0x40
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f001 fc98 	bl	8008df4 <UART_WaitOnFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e006      	b.n	80074e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e000      	b.n	80074e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
  }
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	@ 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	2b20      	cmp	r3, #32
 8007502:	d167      	bne.n	80075d4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Transmit_DMA+0x24>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e060      	b.n	80075d6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	88fa      	ldrh	r2, [r7, #6]
 800751e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	88fa      	ldrh	r2, [r7, #6]
 8007526:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2221      	movs	r2, #33	@ 0x21
 8007536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d028      	beq.n	8007594 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007546:	4a26      	ldr	r2, [pc, #152]	@ (80075e0 <HAL_UART_Transmit_DMA+0xf4>)
 8007548:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800754e:	4a25      	ldr	r2, [pc, #148]	@ (80075e4 <HAL_UART_Transmit_DMA+0xf8>)
 8007550:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007556:	4a24      	ldr	r2, [pc, #144]	@ (80075e8 <HAL_UART_Transmit_DMA+0xfc>)
 8007558:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800755e:	2200      	movs	r2, #0
 8007560:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756a:	4619      	mov	r1, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3328      	adds	r3, #40	@ 0x28
 8007572:	461a      	mov	r2, r3
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	f7fa fca3 	bl	8001ec0 <HAL_DMA_Start_IT>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2210      	movs	r2, #16
 8007584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e020      	b.n	80075d6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2240      	movs	r2, #64	@ 0x40
 800759a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	613b      	str	r3, [r7, #16]
   return(result);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075bc:	623a      	str	r2, [r7, #32]
 80075be:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e5      	bne.n	800759c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	e000      	b.n	80075d6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80075d4:	2302      	movs	r3, #2
  }
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3728      	adds	r7, #40	@ 0x28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	0800916d 	.word	0x0800916d
 80075e4:	08009203 	.word	0x08009203
 80075e8:	08009385 	.word	0x08009385

080075ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	@ 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007600:	2b20      	cmp	r3, #32
 8007602:	d137      	bne.n	8007674 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_UART_Receive_DMA+0x24>
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e030      	b.n	8007676 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a18      	ldr	r2, [pc, #96]	@ (8007680 <HAL_UART_Receive_DMA+0x94>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d01f      	beq.n	8007664 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d018      	beq.n	8007664 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	613b      	str	r3, [r7, #16]
   return(result);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	69f9      	ldr	r1, [r7, #28]
 8007656:	6a3a      	ldr	r2, [r7, #32]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	61bb      	str	r3, [r7, #24]
   return(result);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	461a      	mov	r2, r3
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f001 fc30 	bl	8008ed0 <UART_Start_Receive_DMA>
 8007670:	4603      	mov	r3, r0
 8007672:	e000      	b.n	8007676 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007674:	2302      	movs	r3, #2
  }
}
 8007676:	4618      	mov	r0, r3
 8007678:	3728      	adds	r7, #40	@ 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	58000c00 	.word	0x58000c00

08007684 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b0ba      	sub	sp, #232	@ 0xe8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80076b2:	4013      	ands	r3, r2
 80076b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80076b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d11b      	bne.n	80076f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d015      	beq.n	80076f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d0:	f003 0320 	and.w	r3, r3, #32
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d009      	beq.n	80076f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8393 	beq.w	8007e14 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
      }
      return;
 80076f6:	e38d      	b.n	8007e14 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8123 	beq.w	8007948 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007702:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007706:	4b8d      	ldr	r3, [pc, #564]	@ (800793c <HAL_UART_IRQHandler+0x2b8>)
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800770e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007712:	4b8b      	ldr	r3, [pc, #556]	@ (8007940 <HAL_UART_IRQHandler+0x2bc>)
 8007714:	4013      	ands	r3, r2
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8116 	beq.w	8007948 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d011      	beq.n	800774c <HAL_UART_IRQHandler+0xc8>
 8007728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800772c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007742:	f043 0201 	orr.w	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800774c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d011      	beq.n	800777c <HAL_UART_IRQHandler+0xf8>
 8007758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2202      	movs	r2, #2
 800776a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007772:	f043 0204 	orr.w	r2, r3, #4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800777c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d011      	beq.n	80077ac <HAL_UART_IRQHandler+0x128>
 8007788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2204      	movs	r2, #4
 800779a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a2:	f043 0202 	orr.w	r2, r3, #2
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d017      	beq.n	80077e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077c8:	4b5c      	ldr	r3, [pc, #368]	@ (800793c <HAL_UART_IRQHandler+0x2b8>)
 80077ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2208      	movs	r2, #8
 80077d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077de:	f043 0208 	orr.w	r2, r3, #8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d012      	beq.n	800781a <HAL_UART_IRQHandler+0x196>
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00c      	beq.n	800781a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007810:	f043 0220 	orr.w	r2, r3, #32
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 82f9 	beq.w	8007e18 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d013      	beq.n	800785a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d007      	beq.n	800785a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007860:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786e:	2b40      	cmp	r3, #64	@ 0x40
 8007870:	d005      	beq.n	800787e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007876:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800787a:	2b00      	cmp	r3, #0
 800787c:	d054      	beq.n	8007928 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fc0e 	bl	80090a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d146      	bne.n	8007920 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1d9      	bne.n	8007892 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d017      	beq.n	8007918 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ee:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <HAL_UART_IRQHandler+0x2c0>)
 80078f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fb f869 	bl	80029d0 <HAL_DMA_Abort_IT>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d019      	beq.n	8007938 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007912:	4610      	mov	r0, r2
 8007914:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007916:	e00f      	b.n	8007938 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fa9d 	bl	8007e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791e:	e00b      	b.n	8007938 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa99 	bl	8007e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007926:	e007      	b.n	8007938 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fa95 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007936:	e26f      	b.n	8007e18 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	bf00      	nop
    return;
 800793a:	e26d      	b.n	8007e18 <HAL_UART_IRQHandler+0x794>
 800793c:	10000001 	.word	0x10000001
 8007940:	04000120 	.word	0x04000120
 8007944:	08009405 	.word	0x08009405

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794c:	2b01      	cmp	r3, #1
 800794e:	f040 8203 	bne.w	8007d58 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 81fc 	beq.w	8007d58 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 81f5 	beq.w	8007d58 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2210      	movs	r2, #16
 8007974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007980:	2b40      	cmp	r3, #64	@ 0x40
 8007982:	f040 816d 	bne.w	8007c60 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4aa4      	ldr	r2, [pc, #656]	@ (8007c20 <HAL_UART_IRQHandler+0x59c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d068      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4aa1      	ldr	r2, [pc, #644]	@ (8007c24 <HAL_UART_IRQHandler+0x5a0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d061      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a9f      	ldr	r2, [pc, #636]	@ (8007c28 <HAL_UART_IRQHandler+0x5a4>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d05a      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a9c      	ldr	r2, [pc, #624]	@ (8007c2c <HAL_UART_IRQHandler+0x5a8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d053      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a9a      	ldr	r2, [pc, #616]	@ (8007c30 <HAL_UART_IRQHandler+0x5ac>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d04c      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a97      	ldr	r2, [pc, #604]	@ (8007c34 <HAL_UART_IRQHandler+0x5b0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d045      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a95      	ldr	r2, [pc, #596]	@ (8007c38 <HAL_UART_IRQHandler+0x5b4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d03e      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a92      	ldr	r2, [pc, #584]	@ (8007c3c <HAL_UART_IRQHandler+0x5b8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d037      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a90      	ldr	r2, [pc, #576]	@ (8007c40 <HAL_UART_IRQHandler+0x5bc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d030      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a8d      	ldr	r2, [pc, #564]	@ (8007c44 <HAL_UART_IRQHandler+0x5c0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d029      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a8b      	ldr	r2, [pc, #556]	@ (8007c48 <HAL_UART_IRQHandler+0x5c4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d022      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a88      	ldr	r2, [pc, #544]	@ (8007c4c <HAL_UART_IRQHandler+0x5c8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01b      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a86      	ldr	r2, [pc, #536]	@ (8007c50 <HAL_UART_IRQHandler+0x5cc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d014      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a83      	ldr	r2, [pc, #524]	@ (8007c54 <HAL_UART_IRQHandler+0x5d0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00d      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a81      	ldr	r2, [pc, #516]	@ (8007c58 <HAL_UART_IRQHandler+0x5d4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d006      	beq.n	8007a66 <HAL_UART_IRQHandler+0x3e2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a7e      	ldr	r2, [pc, #504]	@ (8007c5c <HAL_UART_IRQHandler+0x5d8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d106      	bne.n	8007a74 <HAL_UART_IRQHandler+0x3f0>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	e005      	b.n	8007a80 <HAL_UART_IRQHandler+0x3fc>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 80ad 	beq.w	8007be8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	f080 80a5 	bcs.w	8007be8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab4:	f000 8087 	beq.w	8007bc6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ae6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1da      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e1      	bne.n	8007b02 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e3      	bne.n	8007b3e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b94:	f023 0310 	bic.w	r3, r3, #16
 8007b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ba8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e4      	bne.n	8007b84 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fa fbe7 	bl	8002394 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f943 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007be6:	e119      	b.n	8007e1c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	f040 8112 	bne.w	8007e1c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c04:	f040 810a 	bne.w	8007e1c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f928 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
      return;
 8007c1c:	e0fe      	b.n	8007e1c <HAL_UART_IRQHandler+0x798>
 8007c1e:	bf00      	nop
 8007c20:	40020010 	.word	0x40020010
 8007c24:	40020028 	.word	0x40020028
 8007c28:	40020040 	.word	0x40020040
 8007c2c:	40020058 	.word	0x40020058
 8007c30:	40020070 	.word	0x40020070
 8007c34:	40020088 	.word	0x40020088
 8007c38:	400200a0 	.word	0x400200a0
 8007c3c:	400200b8 	.word	0x400200b8
 8007c40:	40020410 	.word	0x40020410
 8007c44:	40020428 	.word	0x40020428
 8007c48:	40020440 	.word	0x40020440
 8007c4c:	40020458 	.word	0x40020458
 8007c50:	40020470 	.word	0x40020470
 8007c54:	40020488 	.word	0x40020488
 8007c58:	400204a0 	.word	0x400204a0
 8007c5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80cf 	beq.w	8007e20 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80ca 	beq.w	8007e20 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e4      	bne.n	8007c8c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	4b55      	ldr	r3, [pc, #340]	@ (8007e2c <HAL_UART_IRQHandler+0x7a8>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ce6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e3      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69b9      	ldr	r1, [r7, #24]
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e4      	bne.n	8007d0e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f88b 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d56:	e063      	b.n	8007e20 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00e      	beq.n	8007d82 <HAL_UART_IRQHandler+0x6fe>
 8007d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 fb7f 	bl	800947e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d80:	e051      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d014      	beq.n	8007db8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d03a      	beq.n	8007e24 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
    }
    return;
 8007db6:	e035      	b.n	8007e24 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x754>
 8007dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fb29 	bl	8009428 <UART_EndTransmit_IT>
    return;
 8007dd6:	e026      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d009      	beq.n	8007df8 <HAL_UART_IRQHandler+0x774>
 8007de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fb58 	bl	80094a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007df6:	e016      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d010      	beq.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	da0c      	bge.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fb40 	bl	8009492 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e12:	e008      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007e14:	bf00      	nop
 8007e16:	e006      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007e18:	bf00      	nop
 8007e1a:	e004      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007e1c:	bf00      	nop
 8007e1e:	e002      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007e20:	bf00      	nop
 8007e22:	e000      	b.n	8007e26 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007e24:	bf00      	nop
  }
}
 8007e26:	37e8      	adds	r7, #232	@ 0xe8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	effffffe 	.word	0xeffffffe

08007e30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e88:	b092      	sub	sp, #72	@ 0x48
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4bbe      	ldr	r3, [pc, #760]	@ (80081ac <UART_SetConfig+0x328>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4ab3      	ldr	r2, [pc, #716]	@ (80081b0 <UART_SetConfig+0x32c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d004      	beq.n	8007ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eec:	4313      	orrs	r3, r2
 8007eee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	4baf      	ldr	r3, [pc, #700]	@ (80081b4 <UART_SetConfig+0x330>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	6812      	ldr	r2, [r2, #0]
 8007efe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	f023 010f 	bic.w	r1, r3, #15
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4aa6      	ldr	r2, [pc, #664]	@ (80081b8 <UART_SetConfig+0x334>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d177      	bne.n	8008014 <UART_SetConfig+0x190>
 8007f24:	4ba5      	ldr	r3, [pc, #660]	@ (80081bc <UART_SetConfig+0x338>)
 8007f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f2c:	2b28      	cmp	r3, #40	@ 0x28
 8007f2e:	d86d      	bhi.n	800800c <UART_SetConfig+0x188>
 8007f30:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <UART_SetConfig+0xb4>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007fdd 	.word	0x08007fdd
 8007f3c:	0800800d 	.word	0x0800800d
 8007f40:	0800800d 	.word	0x0800800d
 8007f44:	0800800d 	.word	0x0800800d
 8007f48:	0800800d 	.word	0x0800800d
 8007f4c:	0800800d 	.word	0x0800800d
 8007f50:	0800800d 	.word	0x0800800d
 8007f54:	0800800d 	.word	0x0800800d
 8007f58:	08007fe5 	.word	0x08007fe5
 8007f5c:	0800800d 	.word	0x0800800d
 8007f60:	0800800d 	.word	0x0800800d
 8007f64:	0800800d 	.word	0x0800800d
 8007f68:	0800800d 	.word	0x0800800d
 8007f6c:	0800800d 	.word	0x0800800d
 8007f70:	0800800d 	.word	0x0800800d
 8007f74:	0800800d 	.word	0x0800800d
 8007f78:	08007fed 	.word	0x08007fed
 8007f7c:	0800800d 	.word	0x0800800d
 8007f80:	0800800d 	.word	0x0800800d
 8007f84:	0800800d 	.word	0x0800800d
 8007f88:	0800800d 	.word	0x0800800d
 8007f8c:	0800800d 	.word	0x0800800d
 8007f90:	0800800d 	.word	0x0800800d
 8007f94:	0800800d 	.word	0x0800800d
 8007f98:	08007ff5 	.word	0x08007ff5
 8007f9c:	0800800d 	.word	0x0800800d
 8007fa0:	0800800d 	.word	0x0800800d
 8007fa4:	0800800d 	.word	0x0800800d
 8007fa8:	0800800d 	.word	0x0800800d
 8007fac:	0800800d 	.word	0x0800800d
 8007fb0:	0800800d 	.word	0x0800800d
 8007fb4:	0800800d 	.word	0x0800800d
 8007fb8:	08007ffd 	.word	0x08007ffd
 8007fbc:	0800800d 	.word	0x0800800d
 8007fc0:	0800800d 	.word	0x0800800d
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	0800800d 	.word	0x0800800d
 8007fcc:	0800800d 	.word	0x0800800d
 8007fd0:	0800800d 	.word	0x0800800d
 8007fd4:	0800800d 	.word	0x0800800d
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e326      	b.n	8008632 <UART_SetConfig+0x7ae>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e322      	b.n	8008632 <UART_SetConfig+0x7ae>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e31e      	b.n	8008632 <UART_SetConfig+0x7ae>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e31a      	b.n	8008632 <UART_SetConfig+0x7ae>
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e316      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008004:	2340      	movs	r3, #64	@ 0x40
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e312      	b.n	8008632 <UART_SetConfig+0x7ae>
 800800c:	2380      	movs	r3, #128	@ 0x80
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e30e      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a69      	ldr	r2, [pc, #420]	@ (80081c0 <UART_SetConfig+0x33c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d130      	bne.n	8008080 <UART_SetConfig+0x1fc>
 800801e:	4b67      	ldr	r3, [pc, #412]	@ (80081bc <UART_SetConfig+0x338>)
 8008020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b05      	cmp	r3, #5
 8008028:	d826      	bhi.n	8008078 <UART_SetConfig+0x1f4>
 800802a:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0x1ac>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008049 	.word	0x08008049
 8008034:	08008051 	.word	0x08008051
 8008038:	08008059 	.word	0x08008059
 800803c:	08008061 	.word	0x08008061
 8008040:	08008069 	.word	0x08008069
 8008044:	08008071 	.word	0x08008071
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804e:	e2f0      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e2ec      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e2e8      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e2e4      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008068:	2320      	movs	r3, #32
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e2e0      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008070:	2340      	movs	r3, #64	@ 0x40
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e2dc      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008078:	2380      	movs	r3, #128	@ 0x80
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807e:	e2d8      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a4f      	ldr	r2, [pc, #316]	@ (80081c4 <UART_SetConfig+0x340>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d130      	bne.n	80080ec <UART_SetConfig+0x268>
 800808a:	4b4c      	ldr	r3, [pc, #304]	@ (80081bc <UART_SetConfig+0x338>)
 800808c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	2b05      	cmp	r3, #5
 8008094:	d826      	bhi.n	80080e4 <UART_SetConfig+0x260>
 8008096:	a201      	add	r2, pc, #4	@ (adr r2, 800809c <UART_SetConfig+0x218>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080b5 	.word	0x080080b5
 80080a0:	080080bd 	.word	0x080080bd
 80080a4:	080080c5 	.word	0x080080c5
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e2ba      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080bc:	2304      	movs	r3, #4
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e2b6      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080c4:	2308      	movs	r3, #8
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e2b2      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080cc:	2310      	movs	r3, #16
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d2:	e2ae      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080d4:	2320      	movs	r3, #32
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e2aa      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080dc:	2340      	movs	r3, #64	@ 0x40
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e2a6      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080e4:	2380      	movs	r3, #128	@ 0x80
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ea:	e2a2      	b.n	8008632 <UART_SetConfig+0x7ae>
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a35      	ldr	r2, [pc, #212]	@ (80081c8 <UART_SetConfig+0x344>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d130      	bne.n	8008158 <UART_SetConfig+0x2d4>
 80080f6:	4b31      	ldr	r3, [pc, #196]	@ (80081bc <UART_SetConfig+0x338>)
 80080f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d826      	bhi.n	8008150 <UART_SetConfig+0x2cc>
 8008102:	a201      	add	r2, pc, #4	@ (adr r2, 8008108 <UART_SetConfig+0x284>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	08008121 	.word	0x08008121
 800810c:	08008129 	.word	0x08008129
 8008110:	08008131 	.word	0x08008131
 8008114:	08008139 	.word	0x08008139
 8008118:	08008141 	.word	0x08008141
 800811c:	08008149 	.word	0x08008149
 8008120:	2300      	movs	r3, #0
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008126:	e284      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812e:	e280      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008136:	e27c      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813e:	e278      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008140:	2320      	movs	r3, #32
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008146:	e274      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008148:	2340      	movs	r3, #64	@ 0x40
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814e:	e270      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008150:	2380      	movs	r3, #128	@ 0x80
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008156:	e26c      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1b      	ldr	r2, [pc, #108]	@ (80081cc <UART_SetConfig+0x348>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d142      	bne.n	80081e8 <UART_SetConfig+0x364>
 8008162:	4b16      	ldr	r3, [pc, #88]	@ (80081bc <UART_SetConfig+0x338>)
 8008164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b05      	cmp	r3, #5
 800816c:	d838      	bhi.n	80081e0 <UART_SetConfig+0x35c>
 800816e:	a201      	add	r2, pc, #4	@ (adr r2, 8008174 <UART_SetConfig+0x2f0>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	0800818d 	.word	0x0800818d
 8008178:	08008195 	.word	0x08008195
 800817c:	0800819d 	.word	0x0800819d
 8008180:	080081a5 	.word	0x080081a5
 8008184:	080081d1 	.word	0x080081d1
 8008188:	080081d9 	.word	0x080081d9
 800818c:	2300      	movs	r3, #0
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e24e      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008194:	2304      	movs	r3, #4
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819a:	e24a      	b.n	8008632 <UART_SetConfig+0x7ae>
 800819c:	2308      	movs	r3, #8
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a2:	e246      	b.n	8008632 <UART_SetConfig+0x7ae>
 80081a4:	2310      	movs	r3, #16
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081aa:	e242      	b.n	8008632 <UART_SetConfig+0x7ae>
 80081ac:	cfff69f3 	.word	0xcfff69f3
 80081b0:	58000c00 	.word	0x58000c00
 80081b4:	11fff4ff 	.word	0x11fff4ff
 80081b8:	40011000 	.word	0x40011000
 80081bc:	58024400 	.word	0x58024400
 80081c0:	40004400 	.word	0x40004400
 80081c4:	40004800 	.word	0x40004800
 80081c8:	40004c00 	.word	0x40004c00
 80081cc:	40005000 	.word	0x40005000
 80081d0:	2320      	movs	r3, #32
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e22c      	b.n	8008632 <UART_SetConfig+0x7ae>
 80081d8:	2340      	movs	r3, #64	@ 0x40
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e228      	b.n	8008632 <UART_SetConfig+0x7ae>
 80081e0:	2380      	movs	r3, #128	@ 0x80
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e224      	b.n	8008632 <UART_SetConfig+0x7ae>
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4ab1      	ldr	r2, [pc, #708]	@ (80084b4 <UART_SetConfig+0x630>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d176      	bne.n	80082e0 <UART_SetConfig+0x45c>
 80081f2:	4bb1      	ldr	r3, [pc, #708]	@ (80084b8 <UART_SetConfig+0x634>)
 80081f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081fa:	2b28      	cmp	r3, #40	@ 0x28
 80081fc:	d86c      	bhi.n	80082d8 <UART_SetConfig+0x454>
 80081fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <UART_SetConfig+0x380>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	080082a9 	.word	0x080082a9
 8008208:	080082d9 	.word	0x080082d9
 800820c:	080082d9 	.word	0x080082d9
 8008210:	080082d9 	.word	0x080082d9
 8008214:	080082d9 	.word	0x080082d9
 8008218:	080082d9 	.word	0x080082d9
 800821c:	080082d9 	.word	0x080082d9
 8008220:	080082d9 	.word	0x080082d9
 8008224:	080082b1 	.word	0x080082b1
 8008228:	080082d9 	.word	0x080082d9
 800822c:	080082d9 	.word	0x080082d9
 8008230:	080082d9 	.word	0x080082d9
 8008234:	080082d9 	.word	0x080082d9
 8008238:	080082d9 	.word	0x080082d9
 800823c:	080082d9 	.word	0x080082d9
 8008240:	080082d9 	.word	0x080082d9
 8008244:	080082b9 	.word	0x080082b9
 8008248:	080082d9 	.word	0x080082d9
 800824c:	080082d9 	.word	0x080082d9
 8008250:	080082d9 	.word	0x080082d9
 8008254:	080082d9 	.word	0x080082d9
 8008258:	080082d9 	.word	0x080082d9
 800825c:	080082d9 	.word	0x080082d9
 8008260:	080082d9 	.word	0x080082d9
 8008264:	080082c1 	.word	0x080082c1
 8008268:	080082d9 	.word	0x080082d9
 800826c:	080082d9 	.word	0x080082d9
 8008270:	080082d9 	.word	0x080082d9
 8008274:	080082d9 	.word	0x080082d9
 8008278:	080082d9 	.word	0x080082d9
 800827c:	080082d9 	.word	0x080082d9
 8008280:	080082d9 	.word	0x080082d9
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082d9 	.word	0x080082d9
 800828c:	080082d9 	.word	0x080082d9
 8008290:	080082d9 	.word	0x080082d9
 8008294:	080082d9 	.word	0x080082d9
 8008298:	080082d9 	.word	0x080082d9
 800829c:	080082d9 	.word	0x080082d9
 80082a0:	080082d9 	.word	0x080082d9
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e1c0      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e1bc      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e1b8      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e1b4      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082c8:	2320      	movs	r3, #32
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e1b0      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082d0:	2340      	movs	r3, #64	@ 0x40
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e1ac      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e1a8      	b.n	8008632 <UART_SetConfig+0x7ae>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a75      	ldr	r2, [pc, #468]	@ (80084bc <UART_SetConfig+0x638>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d130      	bne.n	800834c <UART_SetConfig+0x4c8>
 80082ea:	4b73      	ldr	r3, [pc, #460]	@ (80084b8 <UART_SetConfig+0x634>)
 80082ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d826      	bhi.n	8008344 <UART_SetConfig+0x4c0>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x478>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008315 	.word	0x08008315
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008325 	.word	0x08008325
 8008308:	0800832d 	.word	0x0800832d
 800830c:	08008335 	.word	0x08008335
 8008310:	0800833d 	.word	0x0800833d
 8008314:	2300      	movs	r3, #0
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831a:	e18a      	b.n	8008632 <UART_SetConfig+0x7ae>
 800831c:	2304      	movs	r3, #4
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008322:	e186      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008324:	2308      	movs	r3, #8
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e182      	b.n	8008632 <UART_SetConfig+0x7ae>
 800832c:	2310      	movs	r3, #16
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e17e      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008334:	2320      	movs	r3, #32
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e17a      	b.n	8008632 <UART_SetConfig+0x7ae>
 800833c:	2340      	movs	r3, #64	@ 0x40
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e176      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008344:	2380      	movs	r3, #128	@ 0x80
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834a:	e172      	b.n	8008632 <UART_SetConfig+0x7ae>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a5b      	ldr	r2, [pc, #364]	@ (80084c0 <UART_SetConfig+0x63c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d130      	bne.n	80083b8 <UART_SetConfig+0x534>
 8008356:	4b58      	ldr	r3, [pc, #352]	@ (80084b8 <UART_SetConfig+0x634>)
 8008358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b05      	cmp	r3, #5
 8008360:	d826      	bhi.n	80083b0 <UART_SetConfig+0x52c>
 8008362:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <UART_SetConfig+0x4e4>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008381 	.word	0x08008381
 800836c:	08008389 	.word	0x08008389
 8008370:	08008391 	.word	0x08008391
 8008374:	08008399 	.word	0x08008399
 8008378:	080083a1 	.word	0x080083a1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	2300      	movs	r3, #0
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e154      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838e:	e150      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e14c      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e148      	b.n	8008632 <UART_SetConfig+0x7ae>
 80083a0:	2320      	movs	r3, #32
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e144      	b.n	8008632 <UART_SetConfig+0x7ae>
 80083a8:	2340      	movs	r3, #64	@ 0x40
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e140      	b.n	8008632 <UART_SetConfig+0x7ae>
 80083b0:	2380      	movs	r3, #128	@ 0x80
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e13c      	b.n	8008632 <UART_SetConfig+0x7ae>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a41      	ldr	r2, [pc, #260]	@ (80084c4 <UART_SetConfig+0x640>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	f040 8082 	bne.w	80084c8 <UART_SetConfig+0x644>
 80083c4:	4b3c      	ldr	r3, [pc, #240]	@ (80084b8 <UART_SetConfig+0x634>)
 80083c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083cc:	2b28      	cmp	r3, #40	@ 0x28
 80083ce:	d86d      	bhi.n	80084ac <UART_SetConfig+0x628>
 80083d0:	a201      	add	r2, pc, #4	@ (adr r2, 80083d8 <UART_SetConfig+0x554>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	0800847d 	.word	0x0800847d
 80083dc:	080084ad 	.word	0x080084ad
 80083e0:	080084ad 	.word	0x080084ad
 80083e4:	080084ad 	.word	0x080084ad
 80083e8:	080084ad 	.word	0x080084ad
 80083ec:	080084ad 	.word	0x080084ad
 80083f0:	080084ad 	.word	0x080084ad
 80083f4:	080084ad 	.word	0x080084ad
 80083f8:	08008485 	.word	0x08008485
 80083fc:	080084ad 	.word	0x080084ad
 8008400:	080084ad 	.word	0x080084ad
 8008404:	080084ad 	.word	0x080084ad
 8008408:	080084ad 	.word	0x080084ad
 800840c:	080084ad 	.word	0x080084ad
 8008410:	080084ad 	.word	0x080084ad
 8008414:	080084ad 	.word	0x080084ad
 8008418:	0800848d 	.word	0x0800848d
 800841c:	080084ad 	.word	0x080084ad
 8008420:	080084ad 	.word	0x080084ad
 8008424:	080084ad 	.word	0x080084ad
 8008428:	080084ad 	.word	0x080084ad
 800842c:	080084ad 	.word	0x080084ad
 8008430:	080084ad 	.word	0x080084ad
 8008434:	080084ad 	.word	0x080084ad
 8008438:	08008495 	.word	0x08008495
 800843c:	080084ad 	.word	0x080084ad
 8008440:	080084ad 	.word	0x080084ad
 8008444:	080084ad 	.word	0x080084ad
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084ad 	.word	0x080084ad
 8008450:	080084ad 	.word	0x080084ad
 8008454:	080084ad 	.word	0x080084ad
 8008458:	0800849d 	.word	0x0800849d
 800845c:	080084ad 	.word	0x080084ad
 8008460:	080084ad 	.word	0x080084ad
 8008464:	080084ad 	.word	0x080084ad
 8008468:	080084ad 	.word	0x080084ad
 800846c:	080084ad 	.word	0x080084ad
 8008470:	080084ad 	.word	0x080084ad
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084a5 	.word	0x080084a5
 800847c:	2301      	movs	r3, #1
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e0d6      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e0d2      	b.n	8008632 <UART_SetConfig+0x7ae>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e0ce      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e0ca      	b.n	8008632 <UART_SetConfig+0x7ae>
 800849c:	2320      	movs	r3, #32
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e0c6      	b.n	8008632 <UART_SetConfig+0x7ae>
 80084a4:	2340      	movs	r3, #64	@ 0x40
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e0c2      	b.n	8008632 <UART_SetConfig+0x7ae>
 80084ac:	2380      	movs	r3, #128	@ 0x80
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e0be      	b.n	8008632 <UART_SetConfig+0x7ae>
 80084b4:	40011400 	.word	0x40011400
 80084b8:	58024400 	.word	0x58024400
 80084bc:	40007800 	.word	0x40007800
 80084c0:	40007c00 	.word	0x40007c00
 80084c4:	40011800 	.word	0x40011800
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4aad      	ldr	r2, [pc, #692]	@ (8008784 <UART_SetConfig+0x900>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d176      	bne.n	80085c0 <UART_SetConfig+0x73c>
 80084d2:	4bad      	ldr	r3, [pc, #692]	@ (8008788 <UART_SetConfig+0x904>)
 80084d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084da:	2b28      	cmp	r3, #40	@ 0x28
 80084dc:	d86c      	bhi.n	80085b8 <UART_SetConfig+0x734>
 80084de:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <UART_SetConfig+0x660>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008589 	.word	0x08008589
 80084e8:	080085b9 	.word	0x080085b9
 80084ec:	080085b9 	.word	0x080085b9
 80084f0:	080085b9 	.word	0x080085b9
 80084f4:	080085b9 	.word	0x080085b9
 80084f8:	080085b9 	.word	0x080085b9
 80084fc:	080085b9 	.word	0x080085b9
 8008500:	080085b9 	.word	0x080085b9
 8008504:	08008591 	.word	0x08008591
 8008508:	080085b9 	.word	0x080085b9
 800850c:	080085b9 	.word	0x080085b9
 8008510:	080085b9 	.word	0x080085b9
 8008514:	080085b9 	.word	0x080085b9
 8008518:	080085b9 	.word	0x080085b9
 800851c:	080085b9 	.word	0x080085b9
 8008520:	080085b9 	.word	0x080085b9
 8008524:	08008599 	.word	0x08008599
 8008528:	080085b9 	.word	0x080085b9
 800852c:	080085b9 	.word	0x080085b9
 8008530:	080085b9 	.word	0x080085b9
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080085b9 	.word	0x080085b9
 800853c:	080085b9 	.word	0x080085b9
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085a1 	.word	0x080085a1
 8008548:	080085b9 	.word	0x080085b9
 800854c:	080085b9 	.word	0x080085b9
 8008550:	080085b9 	.word	0x080085b9
 8008554:	080085b9 	.word	0x080085b9
 8008558:	080085b9 	.word	0x080085b9
 800855c:	080085b9 	.word	0x080085b9
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085b9 	.word	0x080085b9
 800856c:	080085b9 	.word	0x080085b9
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085b9 	.word	0x080085b9
 800857c:	080085b9 	.word	0x080085b9
 8008580:	080085b9 	.word	0x080085b9
 8008584:	080085b1 	.word	0x080085b1
 8008588:	2301      	movs	r3, #1
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e050      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008590:	2304      	movs	r3, #4
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e04c      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008598:	2308      	movs	r3, #8
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e048      	b.n	8008632 <UART_SetConfig+0x7ae>
 80085a0:	2310      	movs	r3, #16
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e044      	b.n	8008632 <UART_SetConfig+0x7ae>
 80085a8:	2320      	movs	r3, #32
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e040      	b.n	8008632 <UART_SetConfig+0x7ae>
 80085b0:	2340      	movs	r3, #64	@ 0x40
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e03c      	b.n	8008632 <UART_SetConfig+0x7ae>
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e038      	b.n	8008632 <UART_SetConfig+0x7ae>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a71      	ldr	r2, [pc, #452]	@ (800878c <UART_SetConfig+0x908>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d130      	bne.n	800862c <UART_SetConfig+0x7a8>
 80085ca:	4b6f      	ldr	r3, [pc, #444]	@ (8008788 <UART_SetConfig+0x904>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d826      	bhi.n	8008624 <UART_SetConfig+0x7a0>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <UART_SetConfig+0x758>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	080085f5 	.word	0x080085f5
 80085e0:	080085fd 	.word	0x080085fd
 80085e4:	08008605 	.word	0x08008605
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	08008615 	.word	0x08008615
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	2302      	movs	r3, #2
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e01a      	b.n	8008632 <UART_SetConfig+0x7ae>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e016      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e012      	b.n	8008632 <UART_SetConfig+0x7ae>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e00e      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008614:	2320      	movs	r3, #32
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e00a      	b.n	8008632 <UART_SetConfig+0x7ae>
 800861c:	2340      	movs	r3, #64	@ 0x40
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e006      	b.n	8008632 <UART_SetConfig+0x7ae>
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e002      	b.n	8008632 <UART_SetConfig+0x7ae>
 800862c:	2380      	movs	r3, #128	@ 0x80
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a55      	ldr	r2, [pc, #340]	@ (800878c <UART_SetConfig+0x908>)
 8008638:	4293      	cmp	r3, r2
 800863a:	f040 80f8 	bne.w	800882e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800863e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008642:	2b20      	cmp	r3, #32
 8008644:	dc46      	bgt.n	80086d4 <UART_SetConfig+0x850>
 8008646:	2b02      	cmp	r3, #2
 8008648:	db75      	blt.n	8008736 <UART_SetConfig+0x8b2>
 800864a:	3b02      	subs	r3, #2
 800864c:	2b1e      	cmp	r3, #30
 800864e:	d872      	bhi.n	8008736 <UART_SetConfig+0x8b2>
 8008650:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <UART_SetConfig+0x7d4>)
 8008652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008656:	bf00      	nop
 8008658:	080086db 	.word	0x080086db
 800865c:	08008737 	.word	0x08008737
 8008660:	080086e3 	.word	0x080086e3
 8008664:	08008737 	.word	0x08008737
 8008668:	08008737 	.word	0x08008737
 800866c:	08008737 	.word	0x08008737
 8008670:	080086f3 	.word	0x080086f3
 8008674:	08008737 	.word	0x08008737
 8008678:	08008737 	.word	0x08008737
 800867c:	08008737 	.word	0x08008737
 8008680:	08008737 	.word	0x08008737
 8008684:	08008737 	.word	0x08008737
 8008688:	08008737 	.word	0x08008737
 800868c:	08008737 	.word	0x08008737
 8008690:	08008703 	.word	0x08008703
 8008694:	08008737 	.word	0x08008737
 8008698:	08008737 	.word	0x08008737
 800869c:	08008737 	.word	0x08008737
 80086a0:	08008737 	.word	0x08008737
 80086a4:	08008737 	.word	0x08008737
 80086a8:	08008737 	.word	0x08008737
 80086ac:	08008737 	.word	0x08008737
 80086b0:	08008737 	.word	0x08008737
 80086b4:	08008737 	.word	0x08008737
 80086b8:	08008737 	.word	0x08008737
 80086bc:	08008737 	.word	0x08008737
 80086c0:	08008737 	.word	0x08008737
 80086c4:	08008737 	.word	0x08008737
 80086c8:	08008737 	.word	0x08008737
 80086cc:	08008737 	.word	0x08008737
 80086d0:	08008729 	.word	0x08008729
 80086d4:	2b40      	cmp	r3, #64	@ 0x40
 80086d6:	d02a      	beq.n	800872e <UART_SetConfig+0x8aa>
 80086d8:	e02d      	b.n	8008736 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80086da:	f7fe fa07 	bl	8006aec <HAL_RCCEx_GetD3PCLK1Freq>
 80086de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086e0:	e02f      	b.n	8008742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe fa16 	bl	8006b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f0:	e027      	b.n	8008742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086f2:	f107 0318 	add.w	r3, r7, #24
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fb62 	bl	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008700:	e01f      	b.n	8008742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008702:	4b21      	ldr	r3, [pc, #132]	@ (8008788 <UART_SetConfig+0x904>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800870e:	4b1e      	ldr	r3, [pc, #120]	@ (8008788 <UART_SetConfig+0x904>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	08db      	lsrs	r3, r3, #3
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	4a1d      	ldr	r2, [pc, #116]	@ (8008790 <UART_SetConfig+0x90c>)
 800871a:	fa22 f303 	lsr.w	r3, r2, r3
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008720:	e00f      	b.n	8008742 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008722:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <UART_SetConfig+0x90c>)
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008726:	e00c      	b.n	8008742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008728:	4b1a      	ldr	r3, [pc, #104]	@ (8008794 <UART_SetConfig+0x910>)
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872c:	e009      	b.n	8008742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800872e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008734:	e005      	b.n	8008742 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008740:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 81ee 	beq.w	8008b26 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	4a12      	ldr	r2, [pc, #72]	@ (8008798 <UART_SetConfig+0x914>)
 8008750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008754:	461a      	mov	r2, r3
 8008756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008758:	fbb3 f3f2 	udiv	r3, r3, r2
 800875c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4413      	add	r3, r2
 8008768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876a:	429a      	cmp	r2, r3
 800876c:	d305      	bcc.n	800877a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008776:	429a      	cmp	r2, r3
 8008778:	d910      	bls.n	800879c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008780:	e1d1      	b.n	8008b26 <UART_SetConfig+0xca2>
 8008782:	bf00      	nop
 8008784:	40011c00 	.word	0x40011c00
 8008788:	58024400 	.word	0x58024400
 800878c:	58000c00 	.word	0x58000c00
 8008790:	03d09000 	.word	0x03d09000
 8008794:	003d0900 	.word	0x003d0900
 8008798:	0800c0cc 	.word	0x0800c0cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800879c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800879e:	2200      	movs	r2, #0
 80087a0:	60bb      	str	r3, [r7, #8]
 80087a2:	60fa      	str	r2, [r7, #12]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a8:	4ac0      	ldr	r2, [pc, #768]	@ (8008aac <UART_SetConfig+0xc28>)
 80087aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2200      	movs	r2, #0
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	607a      	str	r2, [r7, #4]
 80087b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087be:	f7f7 fe0f 	bl	80003e0 <__aeabi_uldivmod>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	f04f 0200 	mov.w	r2, #0
 80087ce:	f04f 0300 	mov.w	r3, #0
 80087d2:	020b      	lsls	r3, r1, #8
 80087d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087d8:	0202      	lsls	r2, r0, #8
 80087da:	6979      	ldr	r1, [r7, #20]
 80087dc:	6849      	ldr	r1, [r1, #4]
 80087de:	0849      	lsrs	r1, r1, #1
 80087e0:	2000      	movs	r0, #0
 80087e2:	460c      	mov	r4, r1
 80087e4:	4605      	mov	r5, r0
 80087e6:	eb12 0804 	adds.w	r8, r2, r4
 80087ea:	eb43 0905 	adc.w	r9, r3, r5
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	469a      	mov	sl, r3
 80087f6:	4693      	mov	fp, r2
 80087f8:	4652      	mov	r2, sl
 80087fa:	465b      	mov	r3, fp
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fdee 	bl	80003e0 <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4613      	mov	r3, r2
 800880a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800880c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008812:	d308      	bcc.n	8008826 <UART_SetConfig+0x9a2>
 8008814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800881a:	d204      	bcs.n	8008826 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008822:	60da      	str	r2, [r3, #12]
 8008824:	e17f      	b.n	8008b26 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800882c:	e17b      	b.n	8008b26 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008836:	f040 80bd 	bne.w	80089b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800883a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800883e:	2b20      	cmp	r3, #32
 8008840:	dc48      	bgt.n	80088d4 <UART_SetConfig+0xa50>
 8008842:	2b00      	cmp	r3, #0
 8008844:	db7b      	blt.n	800893e <UART_SetConfig+0xaba>
 8008846:	2b20      	cmp	r3, #32
 8008848:	d879      	bhi.n	800893e <UART_SetConfig+0xaba>
 800884a:	a201      	add	r2, pc, #4	@ (adr r2, 8008850 <UART_SetConfig+0x9cc>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	080088db 	.word	0x080088db
 8008854:	080088e3 	.word	0x080088e3
 8008858:	0800893f 	.word	0x0800893f
 800885c:	0800893f 	.word	0x0800893f
 8008860:	080088eb 	.word	0x080088eb
 8008864:	0800893f 	.word	0x0800893f
 8008868:	0800893f 	.word	0x0800893f
 800886c:	0800893f 	.word	0x0800893f
 8008870:	080088fb 	.word	0x080088fb
 8008874:	0800893f 	.word	0x0800893f
 8008878:	0800893f 	.word	0x0800893f
 800887c:	0800893f 	.word	0x0800893f
 8008880:	0800893f 	.word	0x0800893f
 8008884:	0800893f 	.word	0x0800893f
 8008888:	0800893f 	.word	0x0800893f
 800888c:	0800893f 	.word	0x0800893f
 8008890:	0800890b 	.word	0x0800890b
 8008894:	0800893f 	.word	0x0800893f
 8008898:	0800893f 	.word	0x0800893f
 800889c:	0800893f 	.word	0x0800893f
 80088a0:	0800893f 	.word	0x0800893f
 80088a4:	0800893f 	.word	0x0800893f
 80088a8:	0800893f 	.word	0x0800893f
 80088ac:	0800893f 	.word	0x0800893f
 80088b0:	0800893f 	.word	0x0800893f
 80088b4:	0800893f 	.word	0x0800893f
 80088b8:	0800893f 	.word	0x0800893f
 80088bc:	0800893f 	.word	0x0800893f
 80088c0:	0800893f 	.word	0x0800893f
 80088c4:	0800893f 	.word	0x0800893f
 80088c8:	0800893f 	.word	0x0800893f
 80088cc:	0800893f 	.word	0x0800893f
 80088d0:	08008931 	.word	0x08008931
 80088d4:	2b40      	cmp	r3, #64	@ 0x40
 80088d6:	d02e      	beq.n	8008936 <UART_SetConfig+0xab2>
 80088d8:	e031      	b.n	800893e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088da:	f7fc ff3b 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
 80088de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088e0:	e033      	b.n	800894a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088e2:	f7fc ff4d 	bl	8005780 <HAL_RCC_GetPCLK2Freq>
 80088e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088e8:	e02f      	b.n	800894a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe f912 	bl	8006b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f8:	e027      	b.n	800894a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088fa:	f107 0318 	add.w	r3, r7, #24
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fa5e 	bl	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008908:	e01f      	b.n	800894a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800890a:	4b69      	ldr	r3, [pc, #420]	@ (8008ab0 <UART_SetConfig+0xc2c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008916:	4b66      	ldr	r3, [pc, #408]	@ (8008ab0 <UART_SetConfig+0xc2c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a64      	ldr	r2, [pc, #400]	@ (8008ab4 <UART_SetConfig+0xc30>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008928:	e00f      	b.n	800894a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800892a:	4b62      	ldr	r3, [pc, #392]	@ (8008ab4 <UART_SetConfig+0xc30>)
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892e:	e00c      	b.n	800894a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008930:	4b61      	ldr	r3, [pc, #388]	@ (8008ab8 <UART_SetConfig+0xc34>)
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	e009      	b.n	800894a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893c:	e005      	b.n	800894a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800894a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 80ea 	beq.w	8008b26 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008956:	4a55      	ldr	r2, [pc, #340]	@ (8008aac <UART_SetConfig+0xc28>)
 8008958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895c:	461a      	mov	r2, r3
 800895e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008960:	fbb3 f3f2 	udiv	r3, r3, r2
 8008964:	005a      	lsls	r2, r3, #1
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	441a      	add	r2, r3
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	fbb2 f3f3 	udiv	r3, r2, r3
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	2b0f      	cmp	r3, #15
 800897c:	d916      	bls.n	80089ac <UART_SetConfig+0xb28>
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008984:	d212      	bcs.n	80089ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	b29b      	uxth	r3, r3
 800898a:	f023 030f 	bic.w	r3, r3, #15
 800898e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	b29b      	uxth	r3, r3
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	b29a      	uxth	r2, r3
 800899c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800899e:	4313      	orrs	r3, r2
 80089a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	e0bc      	b.n	8008b26 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089b2:	e0b8      	b.n	8008b26 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	dc4b      	bgt.n	8008a54 <UART_SetConfig+0xbd0>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f2c0 8087 	blt.w	8008ad0 <UART_SetConfig+0xc4c>
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	f200 8084 	bhi.w	8008ad0 <UART_SetConfig+0xc4c>
 80089c8:	a201      	add	r2, pc, #4	@ (adr r2, 80089d0 <UART_SetConfig+0xb4c>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	08008a5b 	.word	0x08008a5b
 80089d4:	08008a63 	.word	0x08008a63
 80089d8:	08008ad1 	.word	0x08008ad1
 80089dc:	08008ad1 	.word	0x08008ad1
 80089e0:	08008a6b 	.word	0x08008a6b
 80089e4:	08008ad1 	.word	0x08008ad1
 80089e8:	08008ad1 	.word	0x08008ad1
 80089ec:	08008ad1 	.word	0x08008ad1
 80089f0:	08008a7b 	.word	0x08008a7b
 80089f4:	08008ad1 	.word	0x08008ad1
 80089f8:	08008ad1 	.word	0x08008ad1
 80089fc:	08008ad1 	.word	0x08008ad1
 8008a00:	08008ad1 	.word	0x08008ad1
 8008a04:	08008ad1 	.word	0x08008ad1
 8008a08:	08008ad1 	.word	0x08008ad1
 8008a0c:	08008ad1 	.word	0x08008ad1
 8008a10:	08008a8b 	.word	0x08008a8b
 8008a14:	08008ad1 	.word	0x08008ad1
 8008a18:	08008ad1 	.word	0x08008ad1
 8008a1c:	08008ad1 	.word	0x08008ad1
 8008a20:	08008ad1 	.word	0x08008ad1
 8008a24:	08008ad1 	.word	0x08008ad1
 8008a28:	08008ad1 	.word	0x08008ad1
 8008a2c:	08008ad1 	.word	0x08008ad1
 8008a30:	08008ad1 	.word	0x08008ad1
 8008a34:	08008ad1 	.word	0x08008ad1
 8008a38:	08008ad1 	.word	0x08008ad1
 8008a3c:	08008ad1 	.word	0x08008ad1
 8008a40:	08008ad1 	.word	0x08008ad1
 8008a44:	08008ad1 	.word	0x08008ad1
 8008a48:	08008ad1 	.word	0x08008ad1
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008ac3 	.word	0x08008ac3
 8008a54:	2b40      	cmp	r3, #64	@ 0x40
 8008a56:	d037      	beq.n	8008ac8 <UART_SetConfig+0xc44>
 8008a58:	e03a      	b.n	8008ad0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a5a:	f7fc fe7b 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
 8008a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a60:	e03c      	b.n	8008adc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a62:	f7fc fe8d 	bl	8005780 <HAL_RCC_GetPCLK2Freq>
 8008a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a68:	e038      	b.n	8008adc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe f852 	bl	8006b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a78:	e030      	b.n	8008adc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7a:	f107 0318 	add.w	r3, r7, #24
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe f99e 	bl	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a88:	e028      	b.n	8008adc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a8a:	4b09      	ldr	r3, [pc, #36]	@ (8008ab0 <UART_SetConfig+0xc2c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d012      	beq.n	8008abc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a96:	4b06      	ldr	r3, [pc, #24]	@ (8008ab0 <UART_SetConfig+0xc2c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	4a04      	ldr	r2, [pc, #16]	@ (8008ab4 <UART_SetConfig+0xc30>)
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008aa8:	e018      	b.n	8008adc <UART_SetConfig+0xc58>
 8008aaa:	bf00      	nop
 8008aac:	0800c0cc 	.word	0x0800c0cc
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008abc:	4b24      	ldr	r3, [pc, #144]	@ (8008b50 <UART_SetConfig+0xccc>)
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e00c      	b.n	8008adc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ac2:	4b24      	ldr	r3, [pc, #144]	@ (8008b54 <UART_SetConfig+0xcd0>)
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac6:	e009      	b.n	8008adc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ace:	e005      	b.n	8008adc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008ada:	bf00      	nop
    }

    if (pclk != 0U)
 8008adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d021      	beq.n	8008b26 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8008b58 <UART_SetConfig+0xcd4>)
 8008ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	085b      	lsrs	r3, r3, #1
 8008afa:	441a      	add	r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b04:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b08:	2b0f      	cmp	r3, #15
 8008b0a:	d909      	bls.n	8008b20 <UART_SetConfig+0xc9c>
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b12:	d205      	bcs.n	8008b20 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60da      	str	r2, [r3, #12]
 8008b1e:	e002      	b.n	8008b26 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b42:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3748      	adds	r7, #72	@ 0x48
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b50:	03d09000 	.word	0x03d09000
 8008b54:	003d0900 	.word	0x003d0900
 8008b58:	0800c0cc 	.word	0x0800c0cc

08008b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01a      	beq.n	8008c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c5a:	d10a      	bne.n	8008c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	605a      	str	r2, [r3, #4]
  }
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b098      	sub	sp, #96	@ 0x60
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cb0:	f7f8 fbf6 	bl	80014a0 <HAL_GetTick>
 8008cb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d12f      	bne.n	8008d24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f88e 	bl	8008df4 <UART_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d022      	beq.n	8008d24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e6      	bne.n	8008cde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e063      	b.n	8008dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d149      	bne.n	8008dc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f857 	bl	8008df4 <UART_WaitOnFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d03c      	beq.n	8008dc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	623b      	str	r3, [r7, #32]
   return(result);
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e6      	bne.n	8008d4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3308      	adds	r3, #8
 8008d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f023 0301 	bic.w	r3, r3, #1
 8008d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d9e:	61fa      	str	r2, [r7, #28]
 8008da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	69b9      	ldr	r1, [r7, #24]
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	617b      	str	r3, [r7, #20]
   return(result);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e5      	bne.n	8008d7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e012      	b.n	8008dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3758      	adds	r7, #88	@ 0x58
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	4613      	mov	r3, r2
 8008e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e04:	e04f      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d04b      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0e:	f7f8 fb47 	bl	80014a0 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e04e      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d037      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b80      	cmp	r3, #128	@ 0x80
 8008e3a:	d034      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b40      	cmp	r3, #64	@ 0x40
 8008e40:	d031      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d110      	bne.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2208      	movs	r2, #8
 8008e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 f921 	bl	80090a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2208      	movs	r2, #8
 8008e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e029      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e80:	d111      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f907 	bl	80090a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e00f      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69da      	ldr	r2, [r3, #28]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	bf0c      	ite	eq
 8008eb6:	2301      	moveq	r3, #1
 8008eb8:	2300      	movne	r3, #0
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d0a0      	beq.n	8008e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b096      	sub	sp, #88	@ 0x58
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	88fa      	ldrh	r2, [r7, #6]
 8008ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2222      	movs	r2, #34	@ 0x22
 8008ef8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d02d      	beq.n	8008f62 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0c:	4a40      	ldr	r2, [pc, #256]	@ (8009010 <UART_Start_Receive_DMA+0x140>)
 8008f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f16:	4a3f      	ldr	r2, [pc, #252]	@ (8009014 <UART_Start_Receive_DMA+0x144>)
 8008f18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f20:	4a3d      	ldr	r2, [pc, #244]	@ (8009018 <UART_Start_Receive_DMA+0x148>)
 8008f22:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3324      	adds	r3, #36	@ 0x24
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f40:	461a      	mov	r2, r3
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	f7f8 ffbc 	bl	8001ec0 <HAL_DMA_Start_IT>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2210      	movs	r2, #16
 8008f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e051      	b.n	8009006 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d018      	beq.n	8008f9c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f8a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008fbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8008fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e5      	bne.n	8008f9c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3308      	adds	r3, #8
 8008fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ff0:	623a      	str	r2, [r7, #32]
 8008ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	69f9      	ldr	r1, [r7, #28]
 8008ff6:	6a3a      	ldr	r2, [r7, #32]
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e5      	bne.n	8008fd0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3758      	adds	r7, #88	@ 0x58
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	0800921f 	.word	0x0800921f
 8009014:	08009347 	.word	0x08009347
 8009018:	08009385 	.word	0x08009385

0800901c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b08f      	sub	sp, #60	@ 0x3c
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	61fb      	str	r3, [r7, #28]
   return(result);
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009044:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e6      	bne.n	8009024 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	60bb      	str	r3, [r7, #8]
   return(result);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800906c:	633b      	str	r3, [r7, #48]	@ 0x30
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009076:	61ba      	str	r2, [r7, #24]
 8009078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	6979      	ldr	r1, [r7, #20]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	613b      	str	r3, [r7, #16]
   return(result);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e5      	bne.n	8009056 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009092:	bf00      	nop
 8009094:	373c      	adds	r7, #60	@ 0x3c
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b095      	sub	sp, #84	@ 0x54
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e6      	bne.n	80090a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3308      	adds	r3, #8
 80090e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009168 <UART_EndRxTransfer+0xc8>)
 80090ee:	4013      	ands	r3, r2
 80090f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3308      	adds	r3, #8
 80090f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009112:	2b01      	cmp	r3, #1
 8009114:	d118      	bne.n	8009148 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	60bb      	str	r3, [r7, #8]
   return(result);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f023 0310 	bic.w	r3, r3, #16
 800912a:	647b      	str	r3, [r7, #68]	@ 0x44
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009134:	61bb      	str	r3, [r7, #24]
 8009136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6979      	ldr	r1, [r7, #20]
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	613b      	str	r3, [r7, #16]
   return(result);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e6      	bne.n	8009116 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800915c:	bf00      	nop
 800915e:	3754      	adds	r7, #84	@ 0x54
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	effffffe 	.word	0xeffffffe

0800916c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b090      	sub	sp, #64	@ 0x40
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009178:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009182:	d037      	beq.n	80091f4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009186:	2200      	movs	r2, #0
 8009188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800918c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	623b      	str	r3, [r7, #32]
   return(result);
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80091ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	61fb      	str	r3, [r7, #28]
 80091e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	69b9      	ldr	r1, [r7, #24]
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	617b      	str	r3, [r7, #20]
   return(result);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e6      	bne.n	80091c0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091f2:	e002      	b.n	80091fa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80091f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80091f6:	f7f7 fd01 	bl	8000bfc <HAL_UART_TxCpltCallback>
}
 80091fa:	bf00      	nop
 80091fc:	3740      	adds	r7, #64	@ 0x40
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7fe fe0d 	bl	8007e30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b09c      	sub	sp, #112	@ 0x70
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009234:	d071      	beq.n	800931a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009238:	2200      	movs	r2, #0
 800923a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800923e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800924c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800924e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800925c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800925e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800926a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e6      	bne.n	800923e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3308      	adds	r3, #8
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	667b      	str	r3, [r7, #100]	@ 0x64
 8009288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3308      	adds	r3, #8
 800928e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009290:	647a      	str	r2, [r7, #68]	@ 0x44
 8009292:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800929e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e5      	bne.n	8009270 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	623b      	str	r3, [r7, #32]
   return(result);
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80092bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80092c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e5      	bne.n	80092a4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092da:	2220      	movs	r2, #32
 80092dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d118      	bne.n	800931a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 0310 	bic.w	r3, r3, #16
 80092fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	69b9      	ldr	r1, [r7, #24]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	617b      	str	r3, [r7, #20]
   return(result);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800931a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800931c:	2200      	movs	r2, #0
 800931e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009324:	2b01      	cmp	r3, #1
 8009326:	d107      	bne.n	8009338 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800932a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800932e:	4619      	mov	r1, r3
 8009330:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009332:	f7fe fd9b 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009336:	e002      	b.n	800933e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009338:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800933a:	f7f7 f9e7 	bl	800070c <HAL_UART_RxCpltCallback>
}
 800933e:	bf00      	nop
 8009340:	3770      	adds	r7, #112	@ 0x70
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009352:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d109      	bne.n	8009376 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	b29b      	uxth	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7fe fd7c 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009374:	e002      	b.n	800937c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7fe fd64 	bl	8007e44 <HAL_UART_RxHalfCpltCallback>
}
 800937c:	bf00      	nop
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009390:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009398:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ac:	2b80      	cmp	r3, #128	@ 0x80
 80093ae:	d109      	bne.n	80093c4 <UART_DMAError+0x40>
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b21      	cmp	r3, #33	@ 0x21
 80093b4:	d106      	bne.n	80093c4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093be:	6978      	ldr	r0, [r7, #20]
 80093c0:	f7ff fe2c 	bl	800901c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ce:	2b40      	cmp	r3, #64	@ 0x40
 80093d0:	d109      	bne.n	80093e6 <UART_DMAError+0x62>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b22      	cmp	r3, #34	@ 0x22
 80093d6:	d106      	bne.n	80093e6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093e0:	6978      	ldr	r0, [r7, #20]
 80093e2:	f7ff fe5d 	bl	80090a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f043 0210 	orr.w	r2, r3, #16
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093f6:	6978      	ldr	r0, [r7, #20]
 80093f8:	f7fe fd2e 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093fc:	bf00      	nop
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7fe fd1c 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	60bb      	str	r3, [r7, #8]
   return(result);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	613b      	str	r3, [r7, #16]
   return(result);
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7f7 fbc3 	bl	8000bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009476:	bf00      	nop
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e027      	b.n	8009520 <HAL_UARTEx_DisableFifoMode+0x66>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	@ 0x24
 80094dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009540:	2302      	movs	r3, #2
 8009542:	e02d      	b.n	80095a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2224      	movs	r2, #36	@ 0x24
 8009550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0201 	bic.w	r2, r2, #1
 800956a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f84f 	bl	8009624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095bc:	2302      	movs	r3, #2
 80095be:	e02d      	b.n	800961c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2224      	movs	r2, #36	@ 0x24
 80095cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f811 	bl	8009624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009644:	e031      	b.n	80096aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009646:	2310      	movs	r3, #16
 8009648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800964a:	2310      	movs	r3, #16
 800964c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	0e5b      	lsrs	r3, r3, #25
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	0f5b      	lsrs	r3, r3, #29
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	7b3a      	ldrb	r2, [r7, #12]
 8009672:	4911      	ldr	r1, [pc, #68]	@ (80096b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009674:	5c8a      	ldrb	r2, [r1, r2]
 8009676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800967a:	7b3a      	ldrb	r2, [r7, #12]
 800967c:	490f      	ldr	r1, [pc, #60]	@ (80096bc <UARTEx_SetNbDataToProcess+0x98>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009680:	fb93 f3f2 	sdiv	r3, r3, r2
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	7b7a      	ldrb	r2, [r7, #13]
 8009690:	4909      	ldr	r1, [pc, #36]	@ (80096b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009692:	5c8a      	ldrb	r2, [r1, r2]
 8009694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009698:	7b7a      	ldrb	r2, [r7, #13]
 800969a:	4908      	ldr	r1, [pc, #32]	@ (80096bc <UARTEx_SetNbDataToProcess+0x98>)
 800969c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800969e:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	0800c0e4 	.word	0x0800c0e4
 80096bc:	0800c0ec 	.word	0x0800c0ec

080096c0 <__cvt>:
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c2:	ed2d 8b02 	vpush	{d8}
 80096c6:	eeb0 8b40 	vmov.f64	d8, d0
 80096ca:	b085      	sub	sp, #20
 80096cc:	4617      	mov	r7, r2
 80096ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80096d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096d2:	ee18 2a90 	vmov	r2, s17
 80096d6:	f025 0520 	bic.w	r5, r5, #32
 80096da:	2a00      	cmp	r2, #0
 80096dc:	bfb6      	itet	lt
 80096de:	222d      	movlt	r2, #45	@ 0x2d
 80096e0:	2200      	movge	r2, #0
 80096e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80096e6:	2d46      	cmp	r5, #70	@ 0x46
 80096e8:	460c      	mov	r4, r1
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	d004      	beq.n	80096f8 <__cvt+0x38>
 80096ee:	2d45      	cmp	r5, #69	@ 0x45
 80096f0:	d100      	bne.n	80096f4 <__cvt+0x34>
 80096f2:	3401      	adds	r4, #1
 80096f4:	2102      	movs	r1, #2
 80096f6:	e000      	b.n	80096fa <__cvt+0x3a>
 80096f8:	2103      	movs	r1, #3
 80096fa:	ab03      	add	r3, sp, #12
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	ab02      	add	r3, sp, #8
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	4622      	mov	r2, r4
 8009704:	4633      	mov	r3, r6
 8009706:	eeb0 0b48 	vmov.f64	d0, d8
 800970a:	f000 ff21 	bl	800a550 <_dtoa_r>
 800970e:	2d47      	cmp	r5, #71	@ 0x47
 8009710:	d114      	bne.n	800973c <__cvt+0x7c>
 8009712:	07fb      	lsls	r3, r7, #31
 8009714:	d50a      	bpl.n	800972c <__cvt+0x6c>
 8009716:	1902      	adds	r2, r0, r4
 8009718:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800971c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009720:	bf08      	it	eq
 8009722:	9203      	streq	r2, [sp, #12]
 8009724:	2130      	movs	r1, #48	@ 0x30
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	4293      	cmp	r3, r2
 800972a:	d319      	bcc.n	8009760 <__cvt+0xa0>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009730:	1a1b      	subs	r3, r3, r0
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	b005      	add	sp, #20
 8009736:	ecbd 8b02 	vpop	{d8}
 800973a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800973c:	2d46      	cmp	r5, #70	@ 0x46
 800973e:	eb00 0204 	add.w	r2, r0, r4
 8009742:	d1e9      	bne.n	8009718 <__cvt+0x58>
 8009744:	7803      	ldrb	r3, [r0, #0]
 8009746:	2b30      	cmp	r3, #48	@ 0x30
 8009748:	d107      	bne.n	800975a <__cvt+0x9a>
 800974a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800974e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009752:	bf1c      	itt	ne
 8009754:	f1c4 0401 	rsbne	r4, r4, #1
 8009758:	6034      	strne	r4, [r6, #0]
 800975a:	6833      	ldr	r3, [r6, #0]
 800975c:	441a      	add	r2, r3
 800975e:	e7db      	b.n	8009718 <__cvt+0x58>
 8009760:	1c5c      	adds	r4, r3, #1
 8009762:	9403      	str	r4, [sp, #12]
 8009764:	7019      	strb	r1, [r3, #0]
 8009766:	e7de      	b.n	8009726 <__cvt+0x66>

08009768 <__exponent>:
 8009768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800976a:	2900      	cmp	r1, #0
 800976c:	bfba      	itte	lt
 800976e:	4249      	neglt	r1, r1
 8009770:	232d      	movlt	r3, #45	@ 0x2d
 8009772:	232b      	movge	r3, #43	@ 0x2b
 8009774:	2909      	cmp	r1, #9
 8009776:	7002      	strb	r2, [r0, #0]
 8009778:	7043      	strb	r3, [r0, #1]
 800977a:	dd29      	ble.n	80097d0 <__exponent+0x68>
 800977c:	f10d 0307 	add.w	r3, sp, #7
 8009780:	461d      	mov	r5, r3
 8009782:	270a      	movs	r7, #10
 8009784:	461a      	mov	r2, r3
 8009786:	fbb1 f6f7 	udiv	r6, r1, r7
 800978a:	fb07 1416 	mls	r4, r7, r6, r1
 800978e:	3430      	adds	r4, #48	@ 0x30
 8009790:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009794:	460c      	mov	r4, r1
 8009796:	2c63      	cmp	r4, #99	@ 0x63
 8009798:	f103 33ff 	add.w	r3, r3, #4294967295
 800979c:	4631      	mov	r1, r6
 800979e:	dcf1      	bgt.n	8009784 <__exponent+0x1c>
 80097a0:	3130      	adds	r1, #48	@ 0x30
 80097a2:	1e94      	subs	r4, r2, #2
 80097a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097a8:	1c41      	adds	r1, r0, #1
 80097aa:	4623      	mov	r3, r4
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	d30a      	bcc.n	80097c6 <__exponent+0x5e>
 80097b0:	f10d 0309 	add.w	r3, sp, #9
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	42ac      	cmp	r4, r5
 80097b8:	bf88      	it	hi
 80097ba:	2300      	movhi	r3, #0
 80097bc:	3302      	adds	r3, #2
 80097be:	4403      	add	r3, r0
 80097c0:	1a18      	subs	r0, r3, r0
 80097c2:	b003      	add	sp, #12
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097ce:	e7ed      	b.n	80097ac <__exponent+0x44>
 80097d0:	2330      	movs	r3, #48	@ 0x30
 80097d2:	3130      	adds	r1, #48	@ 0x30
 80097d4:	7083      	strb	r3, [r0, #2]
 80097d6:	70c1      	strb	r1, [r0, #3]
 80097d8:	1d03      	adds	r3, r0, #4
 80097da:	e7f1      	b.n	80097c0 <__exponent+0x58>
 80097dc:	0000      	movs	r0, r0
	...

080097e0 <_printf_float>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	b08d      	sub	sp, #52	@ 0x34
 80097e6:	460c      	mov	r4, r1
 80097e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80097ec:	4616      	mov	r6, r2
 80097ee:	461f      	mov	r7, r3
 80097f0:	4605      	mov	r5, r0
 80097f2:	f000 fdad 	bl	800a350 <_localeconv_r>
 80097f6:	f8d0 b000 	ldr.w	fp, [r0]
 80097fa:	4658      	mov	r0, fp
 80097fc:	f7f6 fde8 	bl	80003d0 <strlen>
 8009800:	2300      	movs	r3, #0
 8009802:	930a      	str	r3, [sp, #40]	@ 0x28
 8009804:	f8d8 3000 	ldr.w	r3, [r8]
 8009808:	f894 9018 	ldrb.w	r9, [r4, #24]
 800980c:	6822      	ldr	r2, [r4, #0]
 800980e:	9005      	str	r0, [sp, #20]
 8009810:	3307      	adds	r3, #7
 8009812:	f023 0307 	bic.w	r3, r3, #7
 8009816:	f103 0108 	add.w	r1, r3, #8
 800981a:	f8c8 1000 	str.w	r1, [r8]
 800981e:	ed93 0b00 	vldr	d0, [r3]
 8009822:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009a80 <_printf_float+0x2a0>
 8009826:	eeb0 7bc0 	vabs.f64	d7, d0
 800982a:	eeb4 7b46 	vcmp.f64	d7, d6
 800982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009832:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009836:	dd24      	ble.n	8009882 <_printf_float+0xa2>
 8009838:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009840:	d502      	bpl.n	8009848 <_printf_float+0x68>
 8009842:	232d      	movs	r3, #45	@ 0x2d
 8009844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009848:	498f      	ldr	r1, [pc, #572]	@ (8009a88 <_printf_float+0x2a8>)
 800984a:	4b90      	ldr	r3, [pc, #576]	@ (8009a8c <_printf_float+0x2ac>)
 800984c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009850:	bf8c      	ite	hi
 8009852:	4688      	movhi	r8, r1
 8009854:	4698      	movls	r8, r3
 8009856:	f022 0204 	bic.w	r2, r2, #4
 800985a:	2303      	movs	r3, #3
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	6022      	str	r2, [r4, #0]
 8009860:	f04f 0a00 	mov.w	sl, #0
 8009864:	9700      	str	r7, [sp, #0]
 8009866:	4633      	mov	r3, r6
 8009868:	aa0b      	add	r2, sp, #44	@ 0x2c
 800986a:	4621      	mov	r1, r4
 800986c:	4628      	mov	r0, r5
 800986e:	f000 f9d1 	bl	8009c14 <_printf_common>
 8009872:	3001      	adds	r0, #1
 8009874:	f040 8089 	bne.w	800998a <_printf_float+0x1aa>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	b00d      	add	sp, #52	@ 0x34
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	eeb4 0b40 	vcmp.f64	d0, d0
 8009886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988a:	d709      	bvc.n	80098a0 <_printf_float+0xc0>
 800988c:	ee10 3a90 	vmov	r3, s1
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfbc      	itt	lt
 8009894:	232d      	movlt	r3, #45	@ 0x2d
 8009896:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800989a:	497d      	ldr	r1, [pc, #500]	@ (8009a90 <_printf_float+0x2b0>)
 800989c:	4b7d      	ldr	r3, [pc, #500]	@ (8009a94 <_printf_float+0x2b4>)
 800989e:	e7d5      	b.n	800984c <_printf_float+0x6c>
 80098a0:	6863      	ldr	r3, [r4, #4]
 80098a2:	1c59      	adds	r1, r3, #1
 80098a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80098a8:	d139      	bne.n	800991e <_printf_float+0x13e>
 80098aa:	2306      	movs	r3, #6
 80098ac:	6063      	str	r3, [r4, #4]
 80098ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098b2:	2300      	movs	r3, #0
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80098ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80098be:	ab09      	add	r3, sp, #36	@ 0x24
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	6861      	ldr	r1, [r4, #4]
 80098c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80098c8:	4628      	mov	r0, r5
 80098ca:	f7ff fef9 	bl	80096c0 <__cvt>
 80098ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80098d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098d4:	4680      	mov	r8, r0
 80098d6:	d129      	bne.n	800992c <_printf_float+0x14c>
 80098d8:	1cc8      	adds	r0, r1, #3
 80098da:	db02      	blt.n	80098e2 <_printf_float+0x102>
 80098dc:	6863      	ldr	r3, [r4, #4]
 80098de:	4299      	cmp	r1, r3
 80098e0:	dd41      	ble.n	8009966 <_printf_float+0x186>
 80098e2:	f1a9 0902 	sub.w	r9, r9, #2
 80098e6:	fa5f f989 	uxtb.w	r9, r9
 80098ea:	3901      	subs	r1, #1
 80098ec:	464a      	mov	r2, r9
 80098ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80098f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80098f4:	f7ff ff38 	bl	8009768 <__exponent>
 80098f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098fa:	1813      	adds	r3, r2, r0
 80098fc:	2a01      	cmp	r2, #1
 80098fe:	4682      	mov	sl, r0
 8009900:	6123      	str	r3, [r4, #16]
 8009902:	dc02      	bgt.n	800990a <_printf_float+0x12a>
 8009904:	6822      	ldr	r2, [r4, #0]
 8009906:	07d2      	lsls	r2, r2, #31
 8009908:	d501      	bpl.n	800990e <_printf_float+0x12e>
 800990a:	3301      	adds	r3, #1
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0a6      	beq.n	8009864 <_printf_float+0x84>
 8009916:	232d      	movs	r3, #45	@ 0x2d
 8009918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800991c:	e7a2      	b.n	8009864 <_printf_float+0x84>
 800991e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009922:	d1c4      	bne.n	80098ae <_printf_float+0xce>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1c2      	bne.n	80098ae <_printf_float+0xce>
 8009928:	2301      	movs	r3, #1
 800992a:	e7bf      	b.n	80098ac <_printf_float+0xcc>
 800992c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009930:	d9db      	bls.n	80098ea <_printf_float+0x10a>
 8009932:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009936:	d118      	bne.n	800996a <_printf_float+0x18a>
 8009938:	2900      	cmp	r1, #0
 800993a:	6863      	ldr	r3, [r4, #4]
 800993c:	dd0b      	ble.n	8009956 <_printf_float+0x176>
 800993e:	6121      	str	r1, [r4, #16]
 8009940:	b913      	cbnz	r3, 8009948 <_printf_float+0x168>
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	07d0      	lsls	r0, r2, #31
 8009946:	d502      	bpl.n	800994e <_printf_float+0x16e>
 8009948:	3301      	adds	r3, #1
 800994a:	440b      	add	r3, r1
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009950:	f04f 0a00 	mov.w	sl, #0
 8009954:	e7db      	b.n	800990e <_printf_float+0x12e>
 8009956:	b913      	cbnz	r3, 800995e <_printf_float+0x17e>
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	07d2      	lsls	r2, r2, #31
 800995c:	d501      	bpl.n	8009962 <_printf_float+0x182>
 800995e:	3302      	adds	r3, #2
 8009960:	e7f4      	b.n	800994c <_printf_float+0x16c>
 8009962:	2301      	movs	r3, #1
 8009964:	e7f2      	b.n	800994c <_printf_float+0x16c>
 8009966:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800996a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996c:	4299      	cmp	r1, r3
 800996e:	db05      	blt.n	800997c <_printf_float+0x19c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	6121      	str	r1, [r4, #16]
 8009974:	07d8      	lsls	r0, r3, #31
 8009976:	d5ea      	bpl.n	800994e <_printf_float+0x16e>
 8009978:	1c4b      	adds	r3, r1, #1
 800997a:	e7e7      	b.n	800994c <_printf_float+0x16c>
 800997c:	2900      	cmp	r1, #0
 800997e:	bfd4      	ite	le
 8009980:	f1c1 0202 	rsble	r2, r1, #2
 8009984:	2201      	movgt	r2, #1
 8009986:	4413      	add	r3, r2
 8009988:	e7e0      	b.n	800994c <_printf_float+0x16c>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	055a      	lsls	r2, r3, #21
 800998e:	d407      	bmi.n	80099a0 <_printf_float+0x1c0>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	4642      	mov	r2, r8
 8009994:	4631      	mov	r1, r6
 8009996:	4628      	mov	r0, r5
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	d12a      	bne.n	80099f4 <_printf_float+0x214>
 800999e:	e76b      	b.n	8009878 <_printf_float+0x98>
 80099a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80099a4:	f240 80e0 	bls.w	8009b68 <_printf_float+0x388>
 80099a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80099ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	d133      	bne.n	8009a1e <_printf_float+0x23e>
 80099b6:	4a38      	ldr	r2, [pc, #224]	@ (8009a98 <_printf_float+0x2b8>)
 80099b8:	2301      	movs	r3, #1
 80099ba:	4631      	mov	r1, r6
 80099bc:	4628      	mov	r0, r5
 80099be:	47b8      	blx	r7
 80099c0:	3001      	adds	r0, #1
 80099c2:	f43f af59 	beq.w	8009878 <_printf_float+0x98>
 80099c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80099ca:	4543      	cmp	r3, r8
 80099cc:	db02      	blt.n	80099d4 <_printf_float+0x1f4>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	07d8      	lsls	r0, r3, #31
 80099d2:	d50f      	bpl.n	80099f4 <_printf_float+0x214>
 80099d4:	9b05      	ldr	r3, [sp, #20]
 80099d6:	465a      	mov	r2, fp
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	f43f af4a 	beq.w	8009878 <_printf_float+0x98>
 80099e4:	f04f 0900 	mov.w	r9, #0
 80099e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80099ec:	f104 0a1a 	add.w	sl, r4, #26
 80099f0:	45c8      	cmp	r8, r9
 80099f2:	dc09      	bgt.n	8009a08 <_printf_float+0x228>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	079b      	lsls	r3, r3, #30
 80099f8:	f100 8107 	bmi.w	8009c0a <_printf_float+0x42a>
 80099fc:	68e0      	ldr	r0, [r4, #12]
 80099fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a00:	4298      	cmp	r0, r3
 8009a02:	bfb8      	it	lt
 8009a04:	4618      	movlt	r0, r3
 8009a06:	e739      	b.n	800987c <_printf_float+0x9c>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4652      	mov	r2, sl
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	f43f af30 	beq.w	8009878 <_printf_float+0x98>
 8009a18:	f109 0901 	add.w	r9, r9, #1
 8009a1c:	e7e8      	b.n	80099f0 <_printf_float+0x210>
 8009a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dc3b      	bgt.n	8009a9c <_printf_float+0x2bc>
 8009a24:	4a1c      	ldr	r2, [pc, #112]	@ (8009a98 <_printf_float+0x2b8>)
 8009a26:	2301      	movs	r3, #1
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	f43f af22 	beq.w	8009878 <_printf_float+0x98>
 8009a34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a38:	ea59 0303 	orrs.w	r3, r9, r3
 8009a3c:	d102      	bne.n	8009a44 <_printf_float+0x264>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	07d9      	lsls	r1, r3, #31
 8009a42:	d5d7      	bpl.n	80099f4 <_printf_float+0x214>
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	465a      	mov	r2, fp
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f43f af12 	beq.w	8009878 <_printf_float+0x98>
 8009a54:	f04f 0a00 	mov.w	sl, #0
 8009a58:	f104 0b1a 	add.w	fp, r4, #26
 8009a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5e:	425b      	negs	r3, r3
 8009a60:	4553      	cmp	r3, sl
 8009a62:	dc01      	bgt.n	8009a68 <_printf_float+0x288>
 8009a64:	464b      	mov	r3, r9
 8009a66:	e794      	b.n	8009992 <_printf_float+0x1b2>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	465a      	mov	r2, fp
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	47b8      	blx	r7
 8009a72:	3001      	adds	r0, #1
 8009a74:	f43f af00 	beq.w	8009878 <_printf_float+0x98>
 8009a78:	f10a 0a01 	add.w	sl, sl, #1
 8009a7c:	e7ee      	b.n	8009a5c <_printf_float+0x27c>
 8009a7e:	bf00      	nop
 8009a80:	ffffffff 	.word	0xffffffff
 8009a84:	7fefffff 	.word	0x7fefffff
 8009a88:	0800c0f8 	.word	0x0800c0f8
 8009a8c:	0800c0f4 	.word	0x0800c0f4
 8009a90:	0800c100 	.word	0x0800c100
 8009a94:	0800c0fc 	.word	0x0800c0fc
 8009a98:	0800c104 	.word	0x0800c104
 8009a9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aa2:	4553      	cmp	r3, sl
 8009aa4:	bfa8      	it	ge
 8009aa6:	4653      	movge	r3, sl
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	4699      	mov	r9, r3
 8009aac:	dc37      	bgt.n	8009b1e <_printf_float+0x33e>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9307      	str	r3, [sp, #28]
 8009ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab6:	f104 021a 	add.w	r2, r4, #26
 8009aba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009abc:	9907      	ldr	r1, [sp, #28]
 8009abe:	9306      	str	r3, [sp, #24]
 8009ac0:	eba3 0309 	sub.w	r3, r3, r9
 8009ac4:	428b      	cmp	r3, r1
 8009ac6:	dc31      	bgt.n	8009b2c <_printf_float+0x34c>
 8009ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aca:	459a      	cmp	sl, r3
 8009acc:	dc3b      	bgt.n	8009b46 <_printf_float+0x366>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	07da      	lsls	r2, r3, #31
 8009ad2:	d438      	bmi.n	8009b46 <_printf_float+0x366>
 8009ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad6:	ebaa 0903 	sub.w	r9, sl, r3
 8009ada:	9b06      	ldr	r3, [sp, #24]
 8009adc:	ebaa 0303 	sub.w	r3, sl, r3
 8009ae0:	4599      	cmp	r9, r3
 8009ae2:	bfa8      	it	ge
 8009ae4:	4699      	movge	r9, r3
 8009ae6:	f1b9 0f00 	cmp.w	r9, #0
 8009aea:	dc34      	bgt.n	8009b56 <_printf_float+0x376>
 8009aec:	f04f 0800 	mov.w	r8, #0
 8009af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009af4:	f104 0b1a 	add.w	fp, r4, #26
 8009af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afa:	ebaa 0303 	sub.w	r3, sl, r3
 8009afe:	eba3 0309 	sub.w	r3, r3, r9
 8009b02:	4543      	cmp	r3, r8
 8009b04:	f77f af76 	ble.w	80099f4 <_printf_float+0x214>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	465a      	mov	r2, fp
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f aeb0 	beq.w	8009878 <_printf_float+0x98>
 8009b18:	f108 0801 	add.w	r8, r8, #1
 8009b1c:	e7ec      	b.n	8009af8 <_printf_float+0x318>
 8009b1e:	4642      	mov	r2, r8
 8009b20:	4631      	mov	r1, r6
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	d1c1      	bne.n	8009aae <_printf_float+0x2ce>
 8009b2a:	e6a5      	b.n	8009878 <_printf_float+0x98>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	9206      	str	r2, [sp, #24]
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	f43f ae9e 	beq.w	8009878 <_printf_float+0x98>
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	9a06      	ldr	r2, [sp, #24]
 8009b40:	3301      	adds	r3, #1
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	e7b9      	b.n	8009aba <_printf_float+0x2da>
 8009b46:	9b05      	ldr	r3, [sp, #20]
 8009b48:	465a      	mov	r2, fp
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	d1bf      	bne.n	8009ad4 <_printf_float+0x2f4>
 8009b54:	e690      	b.n	8009878 <_printf_float+0x98>
 8009b56:	9a06      	ldr	r2, [sp, #24]
 8009b58:	464b      	mov	r3, r9
 8009b5a:	4442      	add	r2, r8
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b8      	blx	r7
 8009b62:	3001      	adds	r0, #1
 8009b64:	d1c2      	bne.n	8009aec <_printf_float+0x30c>
 8009b66:	e687      	b.n	8009878 <_printf_float+0x98>
 8009b68:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009b6c:	f1b9 0f01 	cmp.w	r9, #1
 8009b70:	dc01      	bgt.n	8009b76 <_printf_float+0x396>
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d536      	bpl.n	8009be4 <_printf_float+0x404>
 8009b76:	2301      	movs	r3, #1
 8009b78:	4642      	mov	r2, r8
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	47b8      	blx	r7
 8009b80:	3001      	adds	r0, #1
 8009b82:	f43f ae79 	beq.w	8009878 <_printf_float+0x98>
 8009b86:	9b05      	ldr	r3, [sp, #20]
 8009b88:	465a      	mov	r2, fp
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f ae71 	beq.w	8009878 <_printf_float+0x98>
 8009b96:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009b9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ba6:	d018      	beq.n	8009bda <_printf_float+0x3fa>
 8009ba8:	464b      	mov	r3, r9
 8009baa:	f108 0201 	add.w	r2, r8, #1
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b8      	blx	r7
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d10c      	bne.n	8009bd2 <_printf_float+0x3f2>
 8009bb8:	e65e      	b.n	8009878 <_printf_float+0x98>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	465a      	mov	r2, fp
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f43f ae57 	beq.w	8009878 <_printf_float+0x98>
 8009bca:	f108 0801 	add.w	r8, r8, #1
 8009bce:	45c8      	cmp	r8, r9
 8009bd0:	dbf3      	blt.n	8009bba <_printf_float+0x3da>
 8009bd2:	4653      	mov	r3, sl
 8009bd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009bd8:	e6dc      	b.n	8009994 <_printf_float+0x1b4>
 8009bda:	f04f 0800 	mov.w	r8, #0
 8009bde:	f104 0b1a 	add.w	fp, r4, #26
 8009be2:	e7f4      	b.n	8009bce <_printf_float+0x3ee>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4642      	mov	r2, r8
 8009be8:	e7e1      	b.n	8009bae <_printf_float+0x3ce>
 8009bea:	2301      	movs	r3, #1
 8009bec:	464a      	mov	r2, r9
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f ae3f 	beq.w	8009878 <_printf_float+0x98>
 8009bfa:	f108 0801 	add.w	r8, r8, #1
 8009bfe:	68e3      	ldr	r3, [r4, #12]
 8009c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c02:	1a5b      	subs	r3, r3, r1
 8009c04:	4543      	cmp	r3, r8
 8009c06:	dcf0      	bgt.n	8009bea <_printf_float+0x40a>
 8009c08:	e6f8      	b.n	80099fc <_printf_float+0x21c>
 8009c0a:	f04f 0800 	mov.w	r8, #0
 8009c0e:	f104 0919 	add.w	r9, r4, #25
 8009c12:	e7f4      	b.n	8009bfe <_printf_float+0x41e>

08009c14 <_printf_common>:
 8009c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	4616      	mov	r6, r2
 8009c1a:	4698      	mov	r8, r3
 8009c1c:	688a      	ldr	r2, [r1, #8]
 8009c1e:	690b      	ldr	r3, [r1, #16]
 8009c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c24:	4293      	cmp	r3, r2
 8009c26:	bfb8      	it	lt
 8009c28:	4613      	movlt	r3, r2
 8009c2a:	6033      	str	r3, [r6, #0]
 8009c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c30:	4607      	mov	r7, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	b10a      	cbz	r2, 8009c3a <_printf_common+0x26>
 8009c36:	3301      	adds	r3, #1
 8009c38:	6033      	str	r3, [r6, #0]
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	0699      	lsls	r1, r3, #26
 8009c3e:	bf42      	ittt	mi
 8009c40:	6833      	ldrmi	r3, [r6, #0]
 8009c42:	3302      	addmi	r3, #2
 8009c44:	6033      	strmi	r3, [r6, #0]
 8009c46:	6825      	ldr	r5, [r4, #0]
 8009c48:	f015 0506 	ands.w	r5, r5, #6
 8009c4c:	d106      	bne.n	8009c5c <_printf_common+0x48>
 8009c4e:	f104 0a19 	add.w	sl, r4, #25
 8009c52:	68e3      	ldr	r3, [r4, #12]
 8009c54:	6832      	ldr	r2, [r6, #0]
 8009c56:	1a9b      	subs	r3, r3, r2
 8009c58:	42ab      	cmp	r3, r5
 8009c5a:	dc26      	bgt.n	8009caa <_printf_common+0x96>
 8009c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	3b00      	subs	r3, #0
 8009c64:	bf18      	it	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	0692      	lsls	r2, r2, #26
 8009c6a:	d42b      	bmi.n	8009cc4 <_printf_common+0xb0>
 8009c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c70:	4641      	mov	r1, r8
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c8      	blx	r9
 8009c76:	3001      	adds	r0, #1
 8009c78:	d01e      	beq.n	8009cb8 <_printf_common+0xa4>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	f003 0306 	and.w	r3, r3, #6
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	bf02      	ittt	eq
 8009c86:	68e5      	ldreq	r5, [r4, #12]
 8009c88:	6833      	ldreq	r3, [r6, #0]
 8009c8a:	1aed      	subeq	r5, r5, r3
 8009c8c:	68a3      	ldr	r3, [r4, #8]
 8009c8e:	bf0c      	ite	eq
 8009c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c94:	2500      	movne	r5, #0
 8009c96:	4293      	cmp	r3, r2
 8009c98:	bfc4      	itt	gt
 8009c9a:	1a9b      	subgt	r3, r3, r2
 8009c9c:	18ed      	addgt	r5, r5, r3
 8009c9e:	2600      	movs	r6, #0
 8009ca0:	341a      	adds	r4, #26
 8009ca2:	42b5      	cmp	r5, r6
 8009ca4:	d11a      	bne.n	8009cdc <_printf_common+0xc8>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e008      	b.n	8009cbc <_printf_common+0xa8>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4652      	mov	r2, sl
 8009cae:	4641      	mov	r1, r8
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	47c8      	blx	r9
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d103      	bne.n	8009cc0 <_printf_common+0xac>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc0:	3501      	adds	r5, #1
 8009cc2:	e7c6      	b.n	8009c52 <_printf_common+0x3e>
 8009cc4:	18e1      	adds	r1, r4, r3
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	2030      	movs	r0, #48	@ 0x30
 8009cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cce:	4422      	add	r2, r4
 8009cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cd8:	3302      	adds	r3, #2
 8009cda:	e7c7      	b.n	8009c6c <_printf_common+0x58>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4641      	mov	r1, r8
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	47c8      	blx	r9
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d0e6      	beq.n	8009cb8 <_printf_common+0xa4>
 8009cea:	3601      	adds	r6, #1
 8009cec:	e7d9      	b.n	8009ca2 <_printf_common+0x8e>
	...

08009cf0 <_printf_i>:
 8009cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf4:	7e0f      	ldrb	r7, [r1, #24]
 8009cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cf8:	2f78      	cmp	r7, #120	@ 0x78
 8009cfa:	4691      	mov	r9, r2
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	469a      	mov	sl, r3
 8009d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d06:	d807      	bhi.n	8009d18 <_printf_i+0x28>
 8009d08:	2f62      	cmp	r7, #98	@ 0x62
 8009d0a:	d80a      	bhi.n	8009d22 <_printf_i+0x32>
 8009d0c:	2f00      	cmp	r7, #0
 8009d0e:	f000 80d1 	beq.w	8009eb4 <_printf_i+0x1c4>
 8009d12:	2f58      	cmp	r7, #88	@ 0x58
 8009d14:	f000 80b8 	beq.w	8009e88 <_printf_i+0x198>
 8009d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d20:	e03a      	b.n	8009d98 <_printf_i+0xa8>
 8009d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d26:	2b15      	cmp	r3, #21
 8009d28:	d8f6      	bhi.n	8009d18 <_printf_i+0x28>
 8009d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d30 <_printf_i+0x40>)
 8009d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d30:	08009d89 	.word	0x08009d89
 8009d34:	08009d9d 	.word	0x08009d9d
 8009d38:	08009d19 	.word	0x08009d19
 8009d3c:	08009d19 	.word	0x08009d19
 8009d40:	08009d19 	.word	0x08009d19
 8009d44:	08009d19 	.word	0x08009d19
 8009d48:	08009d9d 	.word	0x08009d9d
 8009d4c:	08009d19 	.word	0x08009d19
 8009d50:	08009d19 	.word	0x08009d19
 8009d54:	08009d19 	.word	0x08009d19
 8009d58:	08009d19 	.word	0x08009d19
 8009d5c:	08009e9b 	.word	0x08009e9b
 8009d60:	08009dc7 	.word	0x08009dc7
 8009d64:	08009e55 	.word	0x08009e55
 8009d68:	08009d19 	.word	0x08009d19
 8009d6c:	08009d19 	.word	0x08009d19
 8009d70:	08009ebd 	.word	0x08009ebd
 8009d74:	08009d19 	.word	0x08009d19
 8009d78:	08009dc7 	.word	0x08009dc7
 8009d7c:	08009d19 	.word	0x08009d19
 8009d80:	08009d19 	.word	0x08009d19
 8009d84:	08009e5d 	.word	0x08009e5d
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6032      	str	r2, [r6, #0]
 8009d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e09c      	b.n	8009ed6 <_printf_i+0x1e6>
 8009d9c:	6833      	ldr	r3, [r6, #0]
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	1d19      	adds	r1, r3, #4
 8009da2:	6031      	str	r1, [r6, #0]
 8009da4:	0606      	lsls	r6, r0, #24
 8009da6:	d501      	bpl.n	8009dac <_printf_i+0xbc>
 8009da8:	681d      	ldr	r5, [r3, #0]
 8009daa:	e003      	b.n	8009db4 <_printf_i+0xc4>
 8009dac:	0645      	lsls	r5, r0, #25
 8009dae:	d5fb      	bpl.n	8009da8 <_printf_i+0xb8>
 8009db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	da03      	bge.n	8009dc0 <_printf_i+0xd0>
 8009db8:	232d      	movs	r3, #45	@ 0x2d
 8009dba:	426d      	negs	r5, r5
 8009dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dc0:	4858      	ldr	r0, [pc, #352]	@ (8009f24 <_printf_i+0x234>)
 8009dc2:	230a      	movs	r3, #10
 8009dc4:	e011      	b.n	8009dea <_printf_i+0xfa>
 8009dc6:	6821      	ldr	r1, [r4, #0]
 8009dc8:	6833      	ldr	r3, [r6, #0]
 8009dca:	0608      	lsls	r0, r1, #24
 8009dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dd0:	d402      	bmi.n	8009dd8 <_printf_i+0xe8>
 8009dd2:	0649      	lsls	r1, r1, #25
 8009dd4:	bf48      	it	mi
 8009dd6:	b2ad      	uxthmi	r5, r5
 8009dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dda:	4852      	ldr	r0, [pc, #328]	@ (8009f24 <_printf_i+0x234>)
 8009ddc:	6033      	str	r3, [r6, #0]
 8009dde:	bf14      	ite	ne
 8009de0:	230a      	movne	r3, #10
 8009de2:	2308      	moveq	r3, #8
 8009de4:	2100      	movs	r1, #0
 8009de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dea:	6866      	ldr	r6, [r4, #4]
 8009dec:	60a6      	str	r6, [r4, #8]
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	db05      	blt.n	8009dfe <_printf_i+0x10e>
 8009df2:	6821      	ldr	r1, [r4, #0]
 8009df4:	432e      	orrs	r6, r5
 8009df6:	f021 0104 	bic.w	r1, r1, #4
 8009dfa:	6021      	str	r1, [r4, #0]
 8009dfc:	d04b      	beq.n	8009e96 <_printf_i+0x1a6>
 8009dfe:	4616      	mov	r6, r2
 8009e00:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e04:	fb03 5711 	mls	r7, r3, r1, r5
 8009e08:	5dc7      	ldrb	r7, [r0, r7]
 8009e0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e0e:	462f      	mov	r7, r5
 8009e10:	42bb      	cmp	r3, r7
 8009e12:	460d      	mov	r5, r1
 8009e14:	d9f4      	bls.n	8009e00 <_printf_i+0x110>
 8009e16:	2b08      	cmp	r3, #8
 8009e18:	d10b      	bne.n	8009e32 <_printf_i+0x142>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	07df      	lsls	r7, r3, #31
 8009e1e:	d508      	bpl.n	8009e32 <_printf_i+0x142>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	6861      	ldr	r1, [r4, #4]
 8009e24:	4299      	cmp	r1, r3
 8009e26:	bfde      	ittt	le
 8009e28:	2330      	movle	r3, #48	@ 0x30
 8009e2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e32:	1b92      	subs	r2, r2, r6
 8009e34:	6122      	str	r2, [r4, #16]
 8009e36:	f8cd a000 	str.w	sl, [sp]
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	aa03      	add	r2, sp, #12
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4640      	mov	r0, r8
 8009e42:	f7ff fee7 	bl	8009c14 <_printf_common>
 8009e46:	3001      	adds	r0, #1
 8009e48:	d14a      	bne.n	8009ee0 <_printf_i+0x1f0>
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	b004      	add	sp, #16
 8009e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	f043 0320 	orr.w	r3, r3, #32
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	4832      	ldr	r0, [pc, #200]	@ (8009f28 <_printf_i+0x238>)
 8009e5e:	2778      	movs	r7, #120	@ 0x78
 8009e60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	6831      	ldr	r1, [r6, #0]
 8009e68:	061f      	lsls	r7, r3, #24
 8009e6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e6e:	d402      	bmi.n	8009e76 <_printf_i+0x186>
 8009e70:	065f      	lsls	r7, r3, #25
 8009e72:	bf48      	it	mi
 8009e74:	b2ad      	uxthmi	r5, r5
 8009e76:	6031      	str	r1, [r6, #0]
 8009e78:	07d9      	lsls	r1, r3, #31
 8009e7a:	bf44      	itt	mi
 8009e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e80:	6023      	strmi	r3, [r4, #0]
 8009e82:	b11d      	cbz	r5, 8009e8c <_printf_i+0x19c>
 8009e84:	2310      	movs	r3, #16
 8009e86:	e7ad      	b.n	8009de4 <_printf_i+0xf4>
 8009e88:	4826      	ldr	r0, [pc, #152]	@ (8009f24 <_printf_i+0x234>)
 8009e8a:	e7e9      	b.n	8009e60 <_printf_i+0x170>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	f023 0320 	bic.w	r3, r3, #32
 8009e92:	6023      	str	r3, [r4, #0]
 8009e94:	e7f6      	b.n	8009e84 <_printf_i+0x194>
 8009e96:	4616      	mov	r6, r2
 8009e98:	e7bd      	b.n	8009e16 <_printf_i+0x126>
 8009e9a:	6833      	ldr	r3, [r6, #0]
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	6961      	ldr	r1, [r4, #20]
 8009ea0:	1d18      	adds	r0, r3, #4
 8009ea2:	6030      	str	r0, [r6, #0]
 8009ea4:	062e      	lsls	r6, r5, #24
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	d501      	bpl.n	8009eae <_printf_i+0x1be>
 8009eaa:	6019      	str	r1, [r3, #0]
 8009eac:	e002      	b.n	8009eb4 <_printf_i+0x1c4>
 8009eae:	0668      	lsls	r0, r5, #25
 8009eb0:	d5fb      	bpl.n	8009eaa <_printf_i+0x1ba>
 8009eb2:	8019      	strh	r1, [r3, #0]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	6123      	str	r3, [r4, #16]
 8009eb8:	4616      	mov	r6, r2
 8009eba:	e7bc      	b.n	8009e36 <_printf_i+0x146>
 8009ebc:	6833      	ldr	r3, [r6, #0]
 8009ebe:	1d1a      	adds	r2, r3, #4
 8009ec0:	6032      	str	r2, [r6, #0]
 8009ec2:	681e      	ldr	r6, [r3, #0]
 8009ec4:	6862      	ldr	r2, [r4, #4]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f7f6 fa31 	bl	8000330 <memchr>
 8009ece:	b108      	cbz	r0, 8009ed4 <_printf_i+0x1e4>
 8009ed0:	1b80      	subs	r0, r0, r6
 8009ed2:	6060      	str	r0, [r4, #4]
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	6123      	str	r3, [r4, #16]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ede:	e7aa      	b.n	8009e36 <_printf_i+0x146>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	4632      	mov	r2, r6
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	47d0      	blx	sl
 8009eea:	3001      	adds	r0, #1
 8009eec:	d0ad      	beq.n	8009e4a <_printf_i+0x15a>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	079b      	lsls	r3, r3, #30
 8009ef2:	d413      	bmi.n	8009f1c <_printf_i+0x22c>
 8009ef4:	68e0      	ldr	r0, [r4, #12]
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	4298      	cmp	r0, r3
 8009efa:	bfb8      	it	lt
 8009efc:	4618      	movlt	r0, r3
 8009efe:	e7a6      	b.n	8009e4e <_printf_i+0x15e>
 8009f00:	2301      	movs	r3, #1
 8009f02:	4632      	mov	r2, r6
 8009f04:	4649      	mov	r1, r9
 8009f06:	4640      	mov	r0, r8
 8009f08:	47d0      	blx	sl
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d09d      	beq.n	8009e4a <_printf_i+0x15a>
 8009f0e:	3501      	adds	r5, #1
 8009f10:	68e3      	ldr	r3, [r4, #12]
 8009f12:	9903      	ldr	r1, [sp, #12]
 8009f14:	1a5b      	subs	r3, r3, r1
 8009f16:	42ab      	cmp	r3, r5
 8009f18:	dcf2      	bgt.n	8009f00 <_printf_i+0x210>
 8009f1a:	e7eb      	b.n	8009ef4 <_printf_i+0x204>
 8009f1c:	2500      	movs	r5, #0
 8009f1e:	f104 0619 	add.w	r6, r4, #25
 8009f22:	e7f5      	b.n	8009f10 <_printf_i+0x220>
 8009f24:	0800c106 	.word	0x0800c106
 8009f28:	0800c117 	.word	0x0800c117

08009f2c <std>:
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	4604      	mov	r4, r0
 8009f32:	e9c0 3300 	strd	r3, r3, [r0]
 8009f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f3a:	6083      	str	r3, [r0, #8]
 8009f3c:	8181      	strh	r1, [r0, #12]
 8009f3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f40:	81c2      	strh	r2, [r0, #14]
 8009f42:	6183      	str	r3, [r0, #24]
 8009f44:	4619      	mov	r1, r3
 8009f46:	2208      	movs	r2, #8
 8009f48:	305c      	adds	r0, #92	@ 0x5c
 8009f4a:	f000 f9f9 	bl	800a340 <memset>
 8009f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f84 <std+0x58>)
 8009f50:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f52:	4b0d      	ldr	r3, [pc, #52]	@ (8009f88 <std+0x5c>)
 8009f54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f56:	4b0d      	ldr	r3, [pc, #52]	@ (8009f8c <std+0x60>)
 8009f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f90 <std+0x64>)
 8009f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f94 <std+0x68>)
 8009f60:	6224      	str	r4, [r4, #32]
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d006      	beq.n	8009f74 <std+0x48>
 8009f66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f6a:	4294      	cmp	r4, r2
 8009f6c:	d002      	beq.n	8009f74 <std+0x48>
 8009f6e:	33d0      	adds	r3, #208	@ 0xd0
 8009f70:	429c      	cmp	r4, r3
 8009f72:	d105      	bne.n	8009f80 <std+0x54>
 8009f74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f7c:	f000 ba5c 	b.w	800a438 <__retarget_lock_init_recursive>
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	bf00      	nop
 8009f84:	0800a191 	.word	0x0800a191
 8009f88:	0800a1b3 	.word	0x0800a1b3
 8009f8c:	0800a1eb 	.word	0x0800a1eb
 8009f90:	0800a20f 	.word	0x0800a20f
 8009f94:	240004a4 	.word	0x240004a4

08009f98 <stdio_exit_handler>:
 8009f98:	4a02      	ldr	r2, [pc, #8]	@ (8009fa4 <stdio_exit_handler+0xc>)
 8009f9a:	4903      	ldr	r1, [pc, #12]	@ (8009fa8 <stdio_exit_handler+0x10>)
 8009f9c:	4803      	ldr	r0, [pc, #12]	@ (8009fac <stdio_exit_handler+0x14>)
 8009f9e:	f000 b869 	b.w	800a074 <_fwalk_sglue>
 8009fa2:	bf00      	nop
 8009fa4:	24000010 	.word	0x24000010
 8009fa8:	0800bc8d 	.word	0x0800bc8d
 8009fac:	24000020 	.word	0x24000020

08009fb0 <cleanup_stdio>:
 8009fb0:	6841      	ldr	r1, [r0, #4]
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe4 <cleanup_stdio+0x34>)
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	b510      	push	{r4, lr}
 8009fb8:	4604      	mov	r4, r0
 8009fba:	d001      	beq.n	8009fc0 <cleanup_stdio+0x10>
 8009fbc:	f001 fe66 	bl	800bc8c <_fflush_r>
 8009fc0:	68a1      	ldr	r1, [r4, #8]
 8009fc2:	4b09      	ldr	r3, [pc, #36]	@ (8009fe8 <cleanup_stdio+0x38>)
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	d002      	beq.n	8009fce <cleanup_stdio+0x1e>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f001 fe5f 	bl	800bc8c <_fflush_r>
 8009fce:	68e1      	ldr	r1, [r4, #12]
 8009fd0:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <cleanup_stdio+0x3c>)
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	d004      	beq.n	8009fe0 <cleanup_stdio+0x30>
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fdc:	f001 be56 	b.w	800bc8c <_fflush_r>
 8009fe0:	bd10      	pop	{r4, pc}
 8009fe2:	bf00      	nop
 8009fe4:	240004a4 	.word	0x240004a4
 8009fe8:	2400050c 	.word	0x2400050c
 8009fec:	24000574 	.word	0x24000574

08009ff0 <global_stdio_init.part.0>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	4b0b      	ldr	r3, [pc, #44]	@ (800a020 <global_stdio_init.part.0+0x30>)
 8009ff4:	4c0b      	ldr	r4, [pc, #44]	@ (800a024 <global_stdio_init.part.0+0x34>)
 8009ff6:	4a0c      	ldr	r2, [pc, #48]	@ (800a028 <global_stdio_init.part.0+0x38>)
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2104      	movs	r1, #4
 800a000:	f7ff ff94 	bl	8009f2c <std>
 800a004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a008:	2201      	movs	r2, #1
 800a00a:	2109      	movs	r1, #9
 800a00c:	f7ff ff8e 	bl	8009f2c <std>
 800a010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a014:	2202      	movs	r2, #2
 800a016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a01a:	2112      	movs	r1, #18
 800a01c:	f7ff bf86 	b.w	8009f2c <std>
 800a020:	240005dc 	.word	0x240005dc
 800a024:	240004a4 	.word	0x240004a4
 800a028:	08009f99 	.word	0x08009f99

0800a02c <__sfp_lock_acquire>:
 800a02c:	4801      	ldr	r0, [pc, #4]	@ (800a034 <__sfp_lock_acquire+0x8>)
 800a02e:	f000 ba04 	b.w	800a43a <__retarget_lock_acquire_recursive>
 800a032:	bf00      	nop
 800a034:	240005e5 	.word	0x240005e5

0800a038 <__sfp_lock_release>:
 800a038:	4801      	ldr	r0, [pc, #4]	@ (800a040 <__sfp_lock_release+0x8>)
 800a03a:	f000 b9ff 	b.w	800a43c <__retarget_lock_release_recursive>
 800a03e:	bf00      	nop
 800a040:	240005e5 	.word	0x240005e5

0800a044 <__sinit>:
 800a044:	b510      	push	{r4, lr}
 800a046:	4604      	mov	r4, r0
 800a048:	f7ff fff0 	bl	800a02c <__sfp_lock_acquire>
 800a04c:	6a23      	ldr	r3, [r4, #32]
 800a04e:	b11b      	cbz	r3, 800a058 <__sinit+0x14>
 800a050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a054:	f7ff bff0 	b.w	800a038 <__sfp_lock_release>
 800a058:	4b04      	ldr	r3, [pc, #16]	@ (800a06c <__sinit+0x28>)
 800a05a:	6223      	str	r3, [r4, #32]
 800a05c:	4b04      	ldr	r3, [pc, #16]	@ (800a070 <__sinit+0x2c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f5      	bne.n	800a050 <__sinit+0xc>
 800a064:	f7ff ffc4 	bl	8009ff0 <global_stdio_init.part.0>
 800a068:	e7f2      	b.n	800a050 <__sinit+0xc>
 800a06a:	bf00      	nop
 800a06c:	08009fb1 	.word	0x08009fb1
 800a070:	240005dc 	.word	0x240005dc

0800a074 <_fwalk_sglue>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	4607      	mov	r7, r0
 800a07a:	4688      	mov	r8, r1
 800a07c:	4614      	mov	r4, r2
 800a07e:	2600      	movs	r6, #0
 800a080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a084:	f1b9 0901 	subs.w	r9, r9, #1
 800a088:	d505      	bpl.n	800a096 <_fwalk_sglue+0x22>
 800a08a:	6824      	ldr	r4, [r4, #0]
 800a08c:	2c00      	cmp	r4, #0
 800a08e:	d1f7      	bne.n	800a080 <_fwalk_sglue+0xc>
 800a090:	4630      	mov	r0, r6
 800a092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a096:	89ab      	ldrh	r3, [r5, #12]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d907      	bls.n	800a0ac <_fwalk_sglue+0x38>
 800a09c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	d003      	beq.n	800a0ac <_fwalk_sglue+0x38>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	47c0      	blx	r8
 800a0aa:	4306      	orrs	r6, r0
 800a0ac:	3568      	adds	r5, #104	@ 0x68
 800a0ae:	e7e9      	b.n	800a084 <_fwalk_sglue+0x10>

0800a0b0 <iprintf>:
 800a0b0:	b40f      	push	{r0, r1, r2, r3}
 800a0b2:	b507      	push	{r0, r1, r2, lr}
 800a0b4:	4906      	ldr	r1, [pc, #24]	@ (800a0d0 <iprintf+0x20>)
 800a0b6:	ab04      	add	r3, sp, #16
 800a0b8:	6808      	ldr	r0, [r1, #0]
 800a0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0be:	6881      	ldr	r1, [r0, #8]
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	f001 fc47 	bl	800b954 <_vfiprintf_r>
 800a0c6:	b003      	add	sp, #12
 800a0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0cc:	b004      	add	sp, #16
 800a0ce:	4770      	bx	lr
 800a0d0:	2400001c 	.word	0x2400001c

0800a0d4 <_puts_r>:
 800a0d4:	6a03      	ldr	r3, [r0, #32]
 800a0d6:	b570      	push	{r4, r5, r6, lr}
 800a0d8:	6884      	ldr	r4, [r0, #8]
 800a0da:	4605      	mov	r5, r0
 800a0dc:	460e      	mov	r6, r1
 800a0de:	b90b      	cbnz	r3, 800a0e4 <_puts_r+0x10>
 800a0e0:	f7ff ffb0 	bl	800a044 <__sinit>
 800a0e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0e6:	07db      	lsls	r3, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_puts_r+0x22>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	0598      	lsls	r0, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_puts_r+0x22>
 800a0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0f2:	f000 f9a2 	bl	800a43a <__retarget_lock_acquire_recursive>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	0719      	lsls	r1, r3, #28
 800a0fa:	d502      	bpl.n	800a102 <_puts_r+0x2e>
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d135      	bne.n	800a16e <_puts_r+0x9a>
 800a102:	4621      	mov	r1, r4
 800a104:	4628      	mov	r0, r5
 800a106:	f000 f8c5 	bl	800a294 <__swsetup_r>
 800a10a:	b380      	cbz	r0, 800a16e <_puts_r+0x9a>
 800a10c:	f04f 35ff 	mov.w	r5, #4294967295
 800a110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a112:	07da      	lsls	r2, r3, #31
 800a114:	d405      	bmi.n	800a122 <_puts_r+0x4e>
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	059b      	lsls	r3, r3, #22
 800a11a:	d402      	bmi.n	800a122 <_puts_r+0x4e>
 800a11c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a11e:	f000 f98d 	bl	800a43c <__retarget_lock_release_recursive>
 800a122:	4628      	mov	r0, r5
 800a124:	bd70      	pop	{r4, r5, r6, pc}
 800a126:	2b00      	cmp	r3, #0
 800a128:	da04      	bge.n	800a134 <_puts_r+0x60>
 800a12a:	69a2      	ldr	r2, [r4, #24]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	dc17      	bgt.n	800a160 <_puts_r+0x8c>
 800a130:	290a      	cmp	r1, #10
 800a132:	d015      	beq.n	800a160 <_puts_r+0x8c>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	6022      	str	r2, [r4, #0]
 800a13a:	7019      	strb	r1, [r3, #0]
 800a13c:	68a3      	ldr	r3, [r4, #8]
 800a13e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a142:	3b01      	subs	r3, #1
 800a144:	60a3      	str	r3, [r4, #8]
 800a146:	2900      	cmp	r1, #0
 800a148:	d1ed      	bne.n	800a126 <_puts_r+0x52>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da11      	bge.n	800a172 <_puts_r+0x9e>
 800a14e:	4622      	mov	r2, r4
 800a150:	210a      	movs	r1, #10
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f85f 	bl	800a216 <__swbuf_r>
 800a158:	3001      	adds	r0, #1
 800a15a:	d0d7      	beq.n	800a10c <_puts_r+0x38>
 800a15c:	250a      	movs	r5, #10
 800a15e:	e7d7      	b.n	800a110 <_puts_r+0x3c>
 800a160:	4622      	mov	r2, r4
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f857 	bl	800a216 <__swbuf_r>
 800a168:	3001      	adds	r0, #1
 800a16a:	d1e7      	bne.n	800a13c <_puts_r+0x68>
 800a16c:	e7ce      	b.n	800a10c <_puts_r+0x38>
 800a16e:	3e01      	subs	r6, #1
 800a170:	e7e4      	b.n	800a13c <_puts_r+0x68>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	6022      	str	r2, [r4, #0]
 800a178:	220a      	movs	r2, #10
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	e7ee      	b.n	800a15c <_puts_r+0x88>
	...

0800a180 <puts>:
 800a180:	4b02      	ldr	r3, [pc, #8]	@ (800a18c <puts+0xc>)
 800a182:	4601      	mov	r1, r0
 800a184:	6818      	ldr	r0, [r3, #0]
 800a186:	f7ff bfa5 	b.w	800a0d4 <_puts_r>
 800a18a:	bf00      	nop
 800a18c:	2400001c 	.word	0x2400001c

0800a190 <__sread>:
 800a190:	b510      	push	{r4, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a198:	f000 f900 	bl	800a39c <_read_r>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	bfab      	itete	ge
 800a1a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1a4:	181b      	addge	r3, r3, r0
 800a1a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1aa:	bfac      	ite	ge
 800a1ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1ae:	81a3      	strhlt	r3, [r4, #12]
 800a1b0:	bd10      	pop	{r4, pc}

0800a1b2 <__swrite>:
 800a1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	898b      	ldrh	r3, [r1, #12]
 800a1ba:	05db      	lsls	r3, r3, #23
 800a1bc:	4605      	mov	r5, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	4616      	mov	r6, r2
 800a1c2:	d505      	bpl.n	800a1d0 <__swrite+0x1e>
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f000 f8d4 	bl	800a378 <_lseek_r>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	f000 b8eb 	b.w	800a3c0 <_write_r>

0800a1ea <__sseek>:
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f2:	f000 f8c1 	bl	800a378 <_lseek_r>
 800a1f6:	1c43      	adds	r3, r0, #1
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	bf15      	itete	ne
 800a1fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a206:	81a3      	strheq	r3, [r4, #12]
 800a208:	bf18      	it	ne
 800a20a:	81a3      	strhne	r3, [r4, #12]
 800a20c:	bd10      	pop	{r4, pc}

0800a20e <__sclose>:
 800a20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a212:	f000 b8a1 	b.w	800a358 <_close_r>

0800a216 <__swbuf_r>:
 800a216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a218:	460e      	mov	r6, r1
 800a21a:	4614      	mov	r4, r2
 800a21c:	4605      	mov	r5, r0
 800a21e:	b118      	cbz	r0, 800a228 <__swbuf_r+0x12>
 800a220:	6a03      	ldr	r3, [r0, #32]
 800a222:	b90b      	cbnz	r3, 800a228 <__swbuf_r+0x12>
 800a224:	f7ff ff0e 	bl	800a044 <__sinit>
 800a228:	69a3      	ldr	r3, [r4, #24]
 800a22a:	60a3      	str	r3, [r4, #8]
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	071a      	lsls	r2, r3, #28
 800a230:	d501      	bpl.n	800a236 <__swbuf_r+0x20>
 800a232:	6923      	ldr	r3, [r4, #16]
 800a234:	b943      	cbnz	r3, 800a248 <__swbuf_r+0x32>
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 f82b 	bl	800a294 <__swsetup_r>
 800a23e:	b118      	cbz	r0, 800a248 <__swbuf_r+0x32>
 800a240:	f04f 37ff 	mov.w	r7, #4294967295
 800a244:	4638      	mov	r0, r7
 800a246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	6922      	ldr	r2, [r4, #16]
 800a24c:	1a98      	subs	r0, r3, r2
 800a24e:	6963      	ldr	r3, [r4, #20]
 800a250:	b2f6      	uxtb	r6, r6
 800a252:	4283      	cmp	r3, r0
 800a254:	4637      	mov	r7, r6
 800a256:	dc05      	bgt.n	800a264 <__swbuf_r+0x4e>
 800a258:	4621      	mov	r1, r4
 800a25a:	4628      	mov	r0, r5
 800a25c:	f001 fd16 	bl	800bc8c <_fflush_r>
 800a260:	2800      	cmp	r0, #0
 800a262:	d1ed      	bne.n	800a240 <__swbuf_r+0x2a>
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	3b01      	subs	r3, #1
 800a268:	60a3      	str	r3, [r4, #8]
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	6022      	str	r2, [r4, #0]
 800a270:	701e      	strb	r6, [r3, #0]
 800a272:	6962      	ldr	r2, [r4, #20]
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	429a      	cmp	r2, r3
 800a278:	d004      	beq.n	800a284 <__swbuf_r+0x6e>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	07db      	lsls	r3, r3, #31
 800a27e:	d5e1      	bpl.n	800a244 <__swbuf_r+0x2e>
 800a280:	2e0a      	cmp	r6, #10
 800a282:	d1df      	bne.n	800a244 <__swbuf_r+0x2e>
 800a284:	4621      	mov	r1, r4
 800a286:	4628      	mov	r0, r5
 800a288:	f001 fd00 	bl	800bc8c <_fflush_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d0d9      	beq.n	800a244 <__swbuf_r+0x2e>
 800a290:	e7d6      	b.n	800a240 <__swbuf_r+0x2a>
	...

0800a294 <__swsetup_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4b29      	ldr	r3, [pc, #164]	@ (800a33c <__swsetup_r+0xa8>)
 800a298:	4605      	mov	r5, r0
 800a29a:	6818      	ldr	r0, [r3, #0]
 800a29c:	460c      	mov	r4, r1
 800a29e:	b118      	cbz	r0, 800a2a8 <__swsetup_r+0x14>
 800a2a0:	6a03      	ldr	r3, [r0, #32]
 800a2a2:	b90b      	cbnz	r3, 800a2a8 <__swsetup_r+0x14>
 800a2a4:	f7ff fece 	bl	800a044 <__sinit>
 800a2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ac:	0719      	lsls	r1, r3, #28
 800a2ae:	d422      	bmi.n	800a2f6 <__swsetup_r+0x62>
 800a2b0:	06da      	lsls	r2, r3, #27
 800a2b2:	d407      	bmi.n	800a2c4 <__swsetup_r+0x30>
 800a2b4:	2209      	movs	r2, #9
 800a2b6:	602a      	str	r2, [r5, #0]
 800a2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c2:	e033      	b.n	800a32c <__swsetup_r+0x98>
 800a2c4:	0758      	lsls	r0, r3, #29
 800a2c6:	d512      	bpl.n	800a2ee <__swsetup_r+0x5a>
 800a2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2ca:	b141      	cbz	r1, 800a2de <__swsetup_r+0x4a>
 800a2cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	d002      	beq.n	800a2da <__swsetup_r+0x46>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 fe99 	bl	800b00c <_free_r>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6063      	str	r3, [r4, #4]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0308 	orr.w	r3, r3, #8
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	b94b      	cbnz	r3, 800a30e <__swsetup_r+0x7a>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a304:	d003      	beq.n	800a30e <__swsetup_r+0x7a>
 800a306:	4621      	mov	r1, r4
 800a308:	4628      	mov	r0, r5
 800a30a:	f001 fd0d 	bl	800bd28 <__smakebuf_r>
 800a30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a312:	f013 0201 	ands.w	r2, r3, #1
 800a316:	d00a      	beq.n	800a32e <__swsetup_r+0x9a>
 800a318:	2200      	movs	r2, #0
 800a31a:	60a2      	str	r2, [r4, #8]
 800a31c:	6962      	ldr	r2, [r4, #20]
 800a31e:	4252      	negs	r2, r2
 800a320:	61a2      	str	r2, [r4, #24]
 800a322:	6922      	ldr	r2, [r4, #16]
 800a324:	b942      	cbnz	r2, 800a338 <__swsetup_r+0xa4>
 800a326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a32a:	d1c5      	bne.n	800a2b8 <__swsetup_r+0x24>
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	0799      	lsls	r1, r3, #30
 800a330:	bf58      	it	pl
 800a332:	6962      	ldrpl	r2, [r4, #20]
 800a334:	60a2      	str	r2, [r4, #8]
 800a336:	e7f4      	b.n	800a322 <__swsetup_r+0x8e>
 800a338:	2000      	movs	r0, #0
 800a33a:	e7f7      	b.n	800a32c <__swsetup_r+0x98>
 800a33c:	2400001c 	.word	0x2400001c

0800a340 <memset>:
 800a340:	4402      	add	r2, r0
 800a342:	4603      	mov	r3, r0
 800a344:	4293      	cmp	r3, r2
 800a346:	d100      	bne.n	800a34a <memset+0xa>
 800a348:	4770      	bx	lr
 800a34a:	f803 1b01 	strb.w	r1, [r3], #1
 800a34e:	e7f9      	b.n	800a344 <memset+0x4>

0800a350 <_localeconv_r>:
 800a350:	4800      	ldr	r0, [pc, #0]	@ (800a354 <_localeconv_r+0x4>)
 800a352:	4770      	bx	lr
 800a354:	2400015c 	.word	0x2400015c

0800a358 <_close_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4d06      	ldr	r5, [pc, #24]	@ (800a374 <_close_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4604      	mov	r4, r0
 800a360:	4608      	mov	r0, r1
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	f7f6 fed8 	bl	8001118 <_close>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_close_r+0x1a>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_close_r+0x1a>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	240005e0 	.word	0x240005e0

0800a378 <_lseek_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	@ (800a398 <_lseek_r+0x20>)
 800a37c:	4604      	mov	r4, r0
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	2200      	movs	r2, #0
 800a384:	602a      	str	r2, [r5, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	f7f6 feed 	bl	8001166 <_lseek>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_lseek_r+0x1e>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_lseek_r+0x1e>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	240005e0 	.word	0x240005e0

0800a39c <_read_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d07      	ldr	r5, [pc, #28]	@ (800a3bc <_read_r+0x20>)
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	4608      	mov	r0, r1
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	602a      	str	r2, [r5, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f7f6 fe97 	bl	80010de <_read>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_read_r+0x1e>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_read_r+0x1e>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	240005e0 	.word	0x240005e0

0800a3c0 <_write_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	@ (800a3e0 <_write_r+0x20>)
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	602a      	str	r2, [r5, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f7f6 fc80 	bl	8000cd4 <_write>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_write_r+0x1e>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_write_r+0x1e>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	240005e0 	.word	0x240005e0

0800a3e4 <__errno>:
 800a3e4:	4b01      	ldr	r3, [pc, #4]	@ (800a3ec <__errno+0x8>)
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2400001c 	.word	0x2400001c

0800a3f0 <__libc_init_array>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	4d0d      	ldr	r5, [pc, #52]	@ (800a428 <__libc_init_array+0x38>)
 800a3f4:	4c0d      	ldr	r4, [pc, #52]	@ (800a42c <__libc_init_array+0x3c>)
 800a3f6:	1b64      	subs	r4, r4, r5
 800a3f8:	10a4      	asrs	r4, r4, #2
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	42a6      	cmp	r6, r4
 800a3fe:	d109      	bne.n	800a414 <__libc_init_array+0x24>
 800a400:	4d0b      	ldr	r5, [pc, #44]	@ (800a430 <__libc_init_array+0x40>)
 800a402:	4c0c      	ldr	r4, [pc, #48]	@ (800a434 <__libc_init_array+0x44>)
 800a404:	f001 fdbc 	bl	800bf80 <_init>
 800a408:	1b64      	subs	r4, r4, r5
 800a40a:	10a4      	asrs	r4, r4, #2
 800a40c:	2600      	movs	r6, #0
 800a40e:	42a6      	cmp	r6, r4
 800a410:	d105      	bne.n	800a41e <__libc_init_array+0x2e>
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	f855 3b04 	ldr.w	r3, [r5], #4
 800a418:	4798      	blx	r3
 800a41a:	3601      	adds	r6, #1
 800a41c:	e7ee      	b.n	800a3fc <__libc_init_array+0xc>
 800a41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a422:	4798      	blx	r3
 800a424:	3601      	adds	r6, #1
 800a426:	e7f2      	b.n	800a40e <__libc_init_array+0x1e>
 800a428:	0800c474 	.word	0x0800c474
 800a42c:	0800c474 	.word	0x0800c474
 800a430:	0800c474 	.word	0x0800c474
 800a434:	0800c478 	.word	0x0800c478

0800a438 <__retarget_lock_init_recursive>:
 800a438:	4770      	bx	lr

0800a43a <__retarget_lock_acquire_recursive>:
 800a43a:	4770      	bx	lr

0800a43c <__retarget_lock_release_recursive>:
 800a43c:	4770      	bx	lr

0800a43e <quorem>:
 800a43e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a442:	6903      	ldr	r3, [r0, #16]
 800a444:	690c      	ldr	r4, [r1, #16]
 800a446:	42a3      	cmp	r3, r4
 800a448:	4607      	mov	r7, r0
 800a44a:	db7e      	blt.n	800a54a <quorem+0x10c>
 800a44c:	3c01      	subs	r4, #1
 800a44e:	f101 0814 	add.w	r8, r1, #20
 800a452:	00a3      	lsls	r3, r4, #2
 800a454:	f100 0514 	add.w	r5, r0, #20
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a468:	3301      	adds	r3, #1
 800a46a:	429a      	cmp	r2, r3
 800a46c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a470:	fbb2 f6f3 	udiv	r6, r2, r3
 800a474:	d32e      	bcc.n	800a4d4 <quorem+0x96>
 800a476:	f04f 0a00 	mov.w	sl, #0
 800a47a:	46c4      	mov	ip, r8
 800a47c:	46ae      	mov	lr, r5
 800a47e:	46d3      	mov	fp, sl
 800a480:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a484:	b298      	uxth	r0, r3
 800a486:	fb06 a000 	mla	r0, r6, r0, sl
 800a48a:	0c02      	lsrs	r2, r0, #16
 800a48c:	0c1b      	lsrs	r3, r3, #16
 800a48e:	fb06 2303 	mla	r3, r6, r3, r2
 800a492:	f8de 2000 	ldr.w	r2, [lr]
 800a496:	b280      	uxth	r0, r0
 800a498:	b292      	uxth	r2, r2
 800a49a:	1a12      	subs	r2, r2, r0
 800a49c:	445a      	add	r2, fp
 800a49e:	f8de 0000 	ldr.w	r0, [lr]
 800a4a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a4ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4b6:	45e1      	cmp	r9, ip
 800a4b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a4bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a4c0:	d2de      	bcs.n	800a480 <quorem+0x42>
 800a4c2:	9b00      	ldr	r3, [sp, #0]
 800a4c4:	58eb      	ldr	r3, [r5, r3]
 800a4c6:	b92b      	cbnz	r3, 800a4d4 <quorem+0x96>
 800a4c8:	9b01      	ldr	r3, [sp, #4]
 800a4ca:	3b04      	subs	r3, #4
 800a4cc:	429d      	cmp	r5, r3
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	d32f      	bcc.n	800a532 <quorem+0xf4>
 800a4d2:	613c      	str	r4, [r7, #16]
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f001 f90b 	bl	800b6f0 <__mcmp>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	db25      	blt.n	800a52a <quorem+0xec>
 800a4de:	4629      	mov	r1, r5
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4e6:	f8d1 c000 	ldr.w	ip, [r1]
 800a4ea:	fa1f fe82 	uxth.w	lr, r2
 800a4ee:	fa1f f38c 	uxth.w	r3, ip
 800a4f2:	eba3 030e 	sub.w	r3, r3, lr
 800a4f6:	4403      	add	r3, r0
 800a4f8:	0c12      	lsrs	r2, r2, #16
 800a4fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a4fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a502:	b29b      	uxth	r3, r3
 800a504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a508:	45c1      	cmp	r9, r8
 800a50a:	f841 3b04 	str.w	r3, [r1], #4
 800a50e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a512:	d2e6      	bcs.n	800a4e2 <quorem+0xa4>
 800a514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a51c:	b922      	cbnz	r2, 800a528 <quorem+0xea>
 800a51e:	3b04      	subs	r3, #4
 800a520:	429d      	cmp	r5, r3
 800a522:	461a      	mov	r2, r3
 800a524:	d30b      	bcc.n	800a53e <quorem+0x100>
 800a526:	613c      	str	r4, [r7, #16]
 800a528:	3601      	adds	r6, #1
 800a52a:	4630      	mov	r0, r6
 800a52c:	b003      	add	sp, #12
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	6812      	ldr	r2, [r2, #0]
 800a534:	3b04      	subs	r3, #4
 800a536:	2a00      	cmp	r2, #0
 800a538:	d1cb      	bne.n	800a4d2 <quorem+0x94>
 800a53a:	3c01      	subs	r4, #1
 800a53c:	e7c6      	b.n	800a4cc <quorem+0x8e>
 800a53e:	6812      	ldr	r2, [r2, #0]
 800a540:	3b04      	subs	r3, #4
 800a542:	2a00      	cmp	r2, #0
 800a544:	d1ef      	bne.n	800a526 <quorem+0xe8>
 800a546:	3c01      	subs	r4, #1
 800a548:	e7ea      	b.n	800a520 <quorem+0xe2>
 800a54a:	2000      	movs	r0, #0
 800a54c:	e7ee      	b.n	800a52c <quorem+0xee>
	...

0800a550 <_dtoa_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	ed2d 8b02 	vpush	{d8}
 800a558:	69c7      	ldr	r7, [r0, #28]
 800a55a:	b091      	sub	sp, #68	@ 0x44
 800a55c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a560:	ec55 4b10 	vmov	r4, r5, d0
 800a564:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a566:	9107      	str	r1, [sp, #28]
 800a568:	4681      	mov	r9, r0
 800a56a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a56c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a56e:	b97f      	cbnz	r7, 800a590 <_dtoa_r+0x40>
 800a570:	2010      	movs	r0, #16
 800a572:	f000 fd95 	bl	800b0a0 <malloc>
 800a576:	4602      	mov	r2, r0
 800a578:	f8c9 001c 	str.w	r0, [r9, #28]
 800a57c:	b920      	cbnz	r0, 800a588 <_dtoa_r+0x38>
 800a57e:	4ba0      	ldr	r3, [pc, #640]	@ (800a800 <_dtoa_r+0x2b0>)
 800a580:	21ef      	movs	r1, #239	@ 0xef
 800a582:	48a0      	ldr	r0, [pc, #640]	@ (800a804 <_dtoa_r+0x2b4>)
 800a584:	f001 fc4c 	bl	800be20 <__assert_func>
 800a588:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a58c:	6007      	str	r7, [r0, #0]
 800a58e:	60c7      	str	r7, [r0, #12]
 800a590:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a594:	6819      	ldr	r1, [r3, #0]
 800a596:	b159      	cbz	r1, 800a5b0 <_dtoa_r+0x60>
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	604a      	str	r2, [r1, #4]
 800a59c:	2301      	movs	r3, #1
 800a59e:	4093      	lsls	r3, r2
 800a5a0:	608b      	str	r3, [r1, #8]
 800a5a2:	4648      	mov	r0, r9
 800a5a4:	f000 fe72 	bl	800b28c <_Bfree>
 800a5a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	1e2b      	subs	r3, r5, #0
 800a5b2:	bfbb      	ittet	lt
 800a5b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a5b8:	9303      	strlt	r3, [sp, #12]
 800a5ba:	2300      	movge	r3, #0
 800a5bc:	2201      	movlt	r2, #1
 800a5be:	bfac      	ite	ge
 800a5c0:	6033      	strge	r3, [r6, #0]
 800a5c2:	6032      	strlt	r2, [r6, #0]
 800a5c4:	4b90      	ldr	r3, [pc, #576]	@ (800a808 <_dtoa_r+0x2b8>)
 800a5c6:	9e03      	ldr	r6, [sp, #12]
 800a5c8:	43b3      	bics	r3, r6
 800a5ca:	d110      	bne.n	800a5ee <_dtoa_r+0x9e>
 800a5cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a5d8:	4323      	orrs	r3, r4
 800a5da:	f000 84e6 	beq.w	800afaa <_dtoa_r+0xa5a>
 800a5de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a5e0:	4f8a      	ldr	r7, [pc, #552]	@ (800a80c <_dtoa_r+0x2bc>)
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 84e8 	beq.w	800afb8 <_dtoa_r+0xa68>
 800a5e8:	1cfb      	adds	r3, r7, #3
 800a5ea:	f000 bce3 	b.w	800afb4 <_dtoa_r+0xa64>
 800a5ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a5f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fa:	d10a      	bne.n	800a612 <_dtoa_r+0xc2>
 800a5fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5fe:	2301      	movs	r3, #1
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a604:	b113      	cbz	r3, 800a60c <_dtoa_r+0xbc>
 800a606:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a608:	4b81      	ldr	r3, [pc, #516]	@ (800a810 <_dtoa_r+0x2c0>)
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	4f81      	ldr	r7, [pc, #516]	@ (800a814 <_dtoa_r+0x2c4>)
 800a60e:	f000 bcd3 	b.w	800afb8 <_dtoa_r+0xa68>
 800a612:	aa0e      	add	r2, sp, #56	@ 0x38
 800a614:	a90f      	add	r1, sp, #60	@ 0x3c
 800a616:	4648      	mov	r0, r9
 800a618:	eeb0 0b48 	vmov.f64	d0, d8
 800a61c:	f001 f918 	bl	800b850 <__d2b>
 800a620:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a626:	9001      	str	r0, [sp, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d045      	beq.n	800a6b8 <_dtoa_r+0x168>
 800a62c:	eeb0 7b48 	vmov.f64	d7, d8
 800a630:	ee18 1a90 	vmov	r1, s17
 800a634:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a638:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a63c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a640:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a644:	2500      	movs	r5, #0
 800a646:	ee07 1a90 	vmov	s15, r1
 800a64a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a64e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a7e8 <_dtoa_r+0x298>
 800a652:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a656:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a7f0 <_dtoa_r+0x2a0>
 800a65a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a65e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a7f8 <_dtoa_r+0x2a8>
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a66a:	eeb0 7b46 	vmov.f64	d7, d6
 800a66e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a672:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a676:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67e:	ee16 8a90 	vmov	r8, s13
 800a682:	d508      	bpl.n	800a696 <_dtoa_r+0x146>
 800a684:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a688:	eeb4 6b47 	vcmp.f64	d6, d7
 800a68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a690:	bf18      	it	ne
 800a692:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a696:	f1b8 0f16 	cmp.w	r8, #22
 800a69a:	d82b      	bhi.n	800a6f4 <_dtoa_r+0x1a4>
 800a69c:	495e      	ldr	r1, [pc, #376]	@ (800a818 <_dtoa_r+0x2c8>)
 800a69e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a6a2:	ed91 7b00 	vldr	d7, [r1]
 800a6a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ae:	d501      	bpl.n	800a6b4 <_dtoa_r+0x164>
 800a6b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	e01e      	b.n	800a6f6 <_dtoa_r+0x1a6>
 800a6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a6c0:	2920      	cmp	r1, #32
 800a6c2:	bfc1      	itttt	gt
 800a6c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a6c8:	408e      	lslgt	r6, r1
 800a6ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a6ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a6d2:	bfd6      	itet	le
 800a6d4:	f1c1 0120 	rsble	r1, r1, #32
 800a6d8:	4331      	orrgt	r1, r6
 800a6da:	fa04 f101 	lslle.w	r1, r4, r1
 800a6de:	ee07 1a90 	vmov	s15, r1
 800a6e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	ee17 1a90 	vmov	r1, s15
 800a6ec:	2501      	movs	r5, #1
 800a6ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a6f2:	e7a8      	b.n	800a646 <_dtoa_r+0xf6>
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	1e53      	subs	r3, r2, #1
 800a6fa:	9306      	str	r3, [sp, #24]
 800a6fc:	bf45      	ittet	mi
 800a6fe:	f1c2 0301 	rsbmi	r3, r2, #1
 800a702:	9304      	strmi	r3, [sp, #16]
 800a704:	2300      	movpl	r3, #0
 800a706:	2300      	movmi	r3, #0
 800a708:	bf4c      	ite	mi
 800a70a:	9306      	strmi	r3, [sp, #24]
 800a70c:	9304      	strpl	r3, [sp, #16]
 800a70e:	f1b8 0f00 	cmp.w	r8, #0
 800a712:	910c      	str	r1, [sp, #48]	@ 0x30
 800a714:	db18      	blt.n	800a748 <_dtoa_r+0x1f8>
 800a716:	9b06      	ldr	r3, [sp, #24]
 800a718:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a71c:	4443      	add	r3, r8
 800a71e:	9306      	str	r3, [sp, #24]
 800a720:	2300      	movs	r3, #0
 800a722:	9a07      	ldr	r2, [sp, #28]
 800a724:	2a09      	cmp	r2, #9
 800a726:	d845      	bhi.n	800a7b4 <_dtoa_r+0x264>
 800a728:	2a05      	cmp	r2, #5
 800a72a:	bfc4      	itt	gt
 800a72c:	3a04      	subgt	r2, #4
 800a72e:	9207      	strgt	r2, [sp, #28]
 800a730:	9a07      	ldr	r2, [sp, #28]
 800a732:	f1a2 0202 	sub.w	r2, r2, #2
 800a736:	bfcc      	ite	gt
 800a738:	2400      	movgt	r4, #0
 800a73a:	2401      	movle	r4, #1
 800a73c:	2a03      	cmp	r2, #3
 800a73e:	d844      	bhi.n	800a7ca <_dtoa_r+0x27a>
 800a740:	e8df f002 	tbb	[pc, r2]
 800a744:	0b173634 	.word	0x0b173634
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	2200      	movs	r2, #0
 800a74c:	eba3 0308 	sub.w	r3, r3, r8
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	920a      	str	r2, [sp, #40]	@ 0x28
 800a754:	f1c8 0300 	rsb	r3, r8, #0
 800a758:	e7e3      	b.n	800a722 <_dtoa_r+0x1d2>
 800a75a:	2201      	movs	r2, #1
 800a75c:	9208      	str	r2, [sp, #32]
 800a75e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a760:	eb08 0b02 	add.w	fp, r8, r2
 800a764:	f10b 0a01 	add.w	sl, fp, #1
 800a768:	4652      	mov	r2, sl
 800a76a:	2a01      	cmp	r2, #1
 800a76c:	bfb8      	it	lt
 800a76e:	2201      	movlt	r2, #1
 800a770:	e006      	b.n	800a780 <_dtoa_r+0x230>
 800a772:	2201      	movs	r2, #1
 800a774:	9208      	str	r2, [sp, #32]
 800a776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a778:	2a00      	cmp	r2, #0
 800a77a:	dd29      	ble.n	800a7d0 <_dtoa_r+0x280>
 800a77c:	4693      	mov	fp, r2
 800a77e:	4692      	mov	sl, r2
 800a780:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a784:	2100      	movs	r1, #0
 800a786:	2004      	movs	r0, #4
 800a788:	f100 0614 	add.w	r6, r0, #20
 800a78c:	4296      	cmp	r6, r2
 800a78e:	d926      	bls.n	800a7de <_dtoa_r+0x28e>
 800a790:	6079      	str	r1, [r7, #4]
 800a792:	4648      	mov	r0, r9
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	f000 fd39 	bl	800b20c <_Balloc>
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	4607      	mov	r7, r0
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d13e      	bne.n	800a820 <_dtoa_r+0x2d0>
 800a7a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a81c <_dtoa_r+0x2cc>)
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a7aa:	e6ea      	b.n	800a582 <_dtoa_r+0x32>
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	e7e1      	b.n	800a774 <_dtoa_r+0x224>
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	e7d3      	b.n	800a75c <_dtoa_r+0x20c>
 800a7b4:	2401      	movs	r4, #1
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a7bc:	f04f 3bff 	mov.w	fp, #4294967295
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	46da      	mov	sl, fp
 800a7c4:	2212      	movs	r2, #18
 800a7c6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7c8:	e7da      	b.n	800a780 <_dtoa_r+0x230>
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	9208      	str	r2, [sp, #32]
 800a7ce:	e7f5      	b.n	800a7bc <_dtoa_r+0x26c>
 800a7d0:	f04f 0b01 	mov.w	fp, #1
 800a7d4:	46da      	mov	sl, fp
 800a7d6:	465a      	mov	r2, fp
 800a7d8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a7dc:	e7d0      	b.n	800a780 <_dtoa_r+0x230>
 800a7de:	3101      	adds	r1, #1
 800a7e0:	0040      	lsls	r0, r0, #1
 800a7e2:	e7d1      	b.n	800a788 <_dtoa_r+0x238>
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	636f4361 	.word	0x636f4361
 800a7ec:	3fd287a7 	.word	0x3fd287a7
 800a7f0:	8b60c8b3 	.word	0x8b60c8b3
 800a7f4:	3fc68a28 	.word	0x3fc68a28
 800a7f8:	509f79fb 	.word	0x509f79fb
 800a7fc:	3fd34413 	.word	0x3fd34413
 800a800:	0800c135 	.word	0x0800c135
 800a804:	0800c14c 	.word	0x0800c14c
 800a808:	7ff00000 	.word	0x7ff00000
 800a80c:	0800c131 	.word	0x0800c131
 800a810:	0800c105 	.word	0x0800c105
 800a814:	0800c104 	.word	0x0800c104
 800a818:	0800c2a0 	.word	0x0800c2a0
 800a81c:	0800c1a4 	.word	0x0800c1a4
 800a820:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a824:	f1ba 0f0e 	cmp.w	sl, #14
 800a828:	6010      	str	r0, [r2, #0]
 800a82a:	d86e      	bhi.n	800a90a <_dtoa_r+0x3ba>
 800a82c:	2c00      	cmp	r4, #0
 800a82e:	d06c      	beq.n	800a90a <_dtoa_r+0x3ba>
 800a830:	f1b8 0f00 	cmp.w	r8, #0
 800a834:	f340 80b4 	ble.w	800a9a0 <_dtoa_r+0x450>
 800a838:	4ac8      	ldr	r2, [pc, #800]	@ (800ab5c <_dtoa_r+0x60c>)
 800a83a:	f008 010f 	and.w	r1, r8, #15
 800a83e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a842:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a846:	ed92 7b00 	vldr	d7, [r2]
 800a84a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a84e:	f000 809b 	beq.w	800a988 <_dtoa_r+0x438>
 800a852:	4ac3      	ldr	r2, [pc, #780]	@ (800ab60 <_dtoa_r+0x610>)
 800a854:	ed92 6b08 	vldr	d6, [r2, #32]
 800a858:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a85c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a860:	f001 010f 	and.w	r1, r1, #15
 800a864:	2203      	movs	r2, #3
 800a866:	48be      	ldr	r0, [pc, #760]	@ (800ab60 <_dtoa_r+0x610>)
 800a868:	2900      	cmp	r1, #0
 800a86a:	f040 808f 	bne.w	800a98c <_dtoa_r+0x43c>
 800a86e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a872:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a876:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a87a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a87c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a880:	2900      	cmp	r1, #0
 800a882:	f000 80b3 	beq.w	800a9ec <_dtoa_r+0x49c>
 800a886:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a88a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a892:	f140 80ab 	bpl.w	800a9ec <_dtoa_r+0x49c>
 800a896:	f1ba 0f00 	cmp.w	sl, #0
 800a89a:	f000 80a7 	beq.w	800a9ec <_dtoa_r+0x49c>
 800a89e:	f1bb 0f00 	cmp.w	fp, #0
 800a8a2:	dd30      	ble.n	800a906 <_dtoa_r+0x3b6>
 800a8a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a8a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8b0:	f108 31ff 	add.w	r1, r8, #4294967295
 800a8b4:	9105      	str	r1, [sp, #20]
 800a8b6:	3201      	adds	r2, #1
 800a8b8:	465c      	mov	r4, fp
 800a8ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a8be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a8c2:	ee07 2a90 	vmov	s15, r2
 800a8c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a8ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a8ce:	ee15 2a90 	vmov	r2, s11
 800a8d2:	ec51 0b15 	vmov	r0, r1, d5
 800a8d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a8da:	2c00      	cmp	r4, #0
 800a8dc:	f040 808a 	bne.w	800a9f4 <_dtoa_r+0x4a4>
 800a8e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a8e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a8e8:	ec41 0b17 	vmov	d7, r0, r1
 800a8ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f4:	f300 826a 	bgt.w	800adcc <_dtoa_r+0x87c>
 800a8f8:	eeb1 7b47 	vneg.f64	d7, d7
 800a8fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a904:	d423      	bmi.n	800a94e <_dtoa_r+0x3fe>
 800a906:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a90a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a90c:	2a00      	cmp	r2, #0
 800a90e:	f2c0 8129 	blt.w	800ab64 <_dtoa_r+0x614>
 800a912:	f1b8 0f0e 	cmp.w	r8, #14
 800a916:	f300 8125 	bgt.w	800ab64 <_dtoa_r+0x614>
 800a91a:	4b90      	ldr	r3, [pc, #576]	@ (800ab5c <_dtoa_r+0x60c>)
 800a91c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a920:	ed93 6b00 	vldr	d6, [r3]
 800a924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	f280 80c8 	bge.w	800aabc <_dtoa_r+0x56c>
 800a92c:	f1ba 0f00 	cmp.w	sl, #0
 800a930:	f300 80c4 	bgt.w	800aabc <_dtoa_r+0x56c>
 800a934:	d10b      	bne.n	800a94e <_dtoa_r+0x3fe>
 800a936:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a93a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a93e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a942:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	f2c0 823c 	blt.w	800adc6 <_dtoa_r+0x876>
 800a94e:	2400      	movs	r4, #0
 800a950:	4625      	mov	r5, r4
 800a952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a954:	43db      	mvns	r3, r3
 800a956:	9305      	str	r3, [sp, #20]
 800a958:	463e      	mov	r6, r7
 800a95a:	f04f 0800 	mov.w	r8, #0
 800a95e:	4621      	mov	r1, r4
 800a960:	4648      	mov	r0, r9
 800a962:	f000 fc93 	bl	800b28c <_Bfree>
 800a966:	2d00      	cmp	r5, #0
 800a968:	f000 80a2 	beq.w	800aab0 <_dtoa_r+0x560>
 800a96c:	f1b8 0f00 	cmp.w	r8, #0
 800a970:	d005      	beq.n	800a97e <_dtoa_r+0x42e>
 800a972:	45a8      	cmp	r8, r5
 800a974:	d003      	beq.n	800a97e <_dtoa_r+0x42e>
 800a976:	4641      	mov	r1, r8
 800a978:	4648      	mov	r0, r9
 800a97a:	f000 fc87 	bl	800b28c <_Bfree>
 800a97e:	4629      	mov	r1, r5
 800a980:	4648      	mov	r0, r9
 800a982:	f000 fc83 	bl	800b28c <_Bfree>
 800a986:	e093      	b.n	800aab0 <_dtoa_r+0x560>
 800a988:	2202      	movs	r2, #2
 800a98a:	e76c      	b.n	800a866 <_dtoa_r+0x316>
 800a98c:	07cc      	lsls	r4, r1, #31
 800a98e:	d504      	bpl.n	800a99a <_dtoa_r+0x44a>
 800a990:	ed90 6b00 	vldr	d6, [r0]
 800a994:	3201      	adds	r2, #1
 800a996:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a99a:	1049      	asrs	r1, r1, #1
 800a99c:	3008      	adds	r0, #8
 800a99e:	e763      	b.n	800a868 <_dtoa_r+0x318>
 800a9a0:	d022      	beq.n	800a9e8 <_dtoa_r+0x498>
 800a9a2:	f1c8 0100 	rsb	r1, r8, #0
 800a9a6:	4a6d      	ldr	r2, [pc, #436]	@ (800ab5c <_dtoa_r+0x60c>)
 800a9a8:	f001 000f 	and.w	r0, r1, #15
 800a9ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a9b0:	ed92 7b00 	vldr	d7, [r2]
 800a9b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a9b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9bc:	4868      	ldr	r0, [pc, #416]	@ (800ab60 <_dtoa_r+0x610>)
 800a9be:	1109      	asrs	r1, r1, #4
 800a9c0:	2400      	movs	r4, #0
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	b929      	cbnz	r1, 800a9d2 <_dtoa_r+0x482>
 800a9c6:	2c00      	cmp	r4, #0
 800a9c8:	f43f af57 	beq.w	800a87a <_dtoa_r+0x32a>
 800a9cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9d0:	e753      	b.n	800a87a <_dtoa_r+0x32a>
 800a9d2:	07ce      	lsls	r6, r1, #31
 800a9d4:	d505      	bpl.n	800a9e2 <_dtoa_r+0x492>
 800a9d6:	ed90 6b00 	vldr	d6, [r0]
 800a9da:	3201      	adds	r2, #1
 800a9dc:	2401      	movs	r4, #1
 800a9de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9e2:	1049      	asrs	r1, r1, #1
 800a9e4:	3008      	adds	r0, #8
 800a9e6:	e7ed      	b.n	800a9c4 <_dtoa_r+0x474>
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	e746      	b.n	800a87a <_dtoa_r+0x32a>
 800a9ec:	f8cd 8014 	str.w	r8, [sp, #20]
 800a9f0:	4654      	mov	r4, sl
 800a9f2:	e762      	b.n	800a8ba <_dtoa_r+0x36a>
 800a9f4:	4a59      	ldr	r2, [pc, #356]	@ (800ab5c <_dtoa_r+0x60c>)
 800a9f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a9fa:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a9fe:	9a08      	ldr	r2, [sp, #32]
 800aa00:	ec41 0b17 	vmov	d7, r0, r1
 800aa04:	443c      	add	r4, r7
 800aa06:	b34a      	cbz	r2, 800aa5c <_dtoa_r+0x50c>
 800aa08:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800aa0c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800aa10:	463e      	mov	r6, r7
 800aa12:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800aa16:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800aa1a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa22:	ee14 2a90 	vmov	r2, s9
 800aa26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa2a:	3230      	adds	r2, #48	@ 0x30
 800aa2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa38:	f806 2b01 	strb.w	r2, [r6], #1
 800aa3c:	d438      	bmi.n	800aab0 <_dtoa_r+0x560>
 800aa3e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800aa42:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aa46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4a:	d46e      	bmi.n	800ab2a <_dtoa_r+0x5da>
 800aa4c:	42a6      	cmp	r6, r4
 800aa4e:	f43f af5a 	beq.w	800a906 <_dtoa_r+0x3b6>
 800aa52:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aa56:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aa5a:	e7e0      	b.n	800aa1e <_dtoa_r+0x4ce>
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	463e      	mov	r6, r7
 800aa60:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa64:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800aa68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa6c:	ee14 2a90 	vmov	r2, s9
 800aa70:	3230      	adds	r2, #48	@ 0x30
 800aa72:	f806 2b01 	strb.w	r2, [r6], #1
 800aa76:	42a6      	cmp	r6, r4
 800aa78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa80:	d119      	bne.n	800aab6 <_dtoa_r+0x566>
 800aa82:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800aa86:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aa8a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	dc4a      	bgt.n	800ab2a <_dtoa_r+0x5da>
 800aa94:	ee35 5b47 	vsub.f64	d5, d5, d7
 800aa98:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800aa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa0:	f57f af31 	bpl.w	800a906 <_dtoa_r+0x3b6>
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	3901      	subs	r1, #1
 800aaa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aaac:	2b30      	cmp	r3, #48	@ 0x30
 800aaae:	d0f9      	beq.n	800aaa4 <_dtoa_r+0x554>
 800aab0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800aab4:	e027      	b.n	800ab06 <_dtoa_r+0x5b6>
 800aab6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aaba:	e7d5      	b.n	800aa68 <_dtoa_r+0x518>
 800aabc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aac0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800aac4:	463e      	mov	r6, r7
 800aac6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aaca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aace:	ee15 3a10 	vmov	r3, s10
 800aad2:	3330      	adds	r3, #48	@ 0x30
 800aad4:	f806 3b01 	strb.w	r3, [r6], #1
 800aad8:	1bf3      	subs	r3, r6, r7
 800aada:	459a      	cmp	sl, r3
 800aadc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aae0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aae4:	d132      	bne.n	800ab4c <_dtoa_r+0x5fc>
 800aae6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aaea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aaee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf2:	dc18      	bgt.n	800ab26 <_dtoa_r+0x5d6>
 800aaf4:	eeb4 7b46 	vcmp.f64	d7, d6
 800aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafc:	d103      	bne.n	800ab06 <_dtoa_r+0x5b6>
 800aafe:	ee15 3a10 	vmov	r3, s10
 800ab02:	07db      	lsls	r3, r3, #31
 800ab04:	d40f      	bmi.n	800ab26 <_dtoa_r+0x5d6>
 800ab06:	9901      	ldr	r1, [sp, #4]
 800ab08:	4648      	mov	r0, r9
 800ab0a:	f000 fbbf 	bl	800b28c <_Bfree>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab12:	7033      	strb	r3, [r6, #0]
 800ab14:	f108 0301 	add.w	r3, r8, #1
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 824b 	beq.w	800afb8 <_dtoa_r+0xa68>
 800ab22:	601e      	str	r6, [r3, #0]
 800ab24:	e248      	b.n	800afb8 <_dtoa_r+0xa68>
 800ab26:	f8cd 8014 	str.w	r8, [sp, #20]
 800ab2a:	4633      	mov	r3, r6
 800ab2c:	461e      	mov	r6, r3
 800ab2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab32:	2a39      	cmp	r2, #57	@ 0x39
 800ab34:	d106      	bne.n	800ab44 <_dtoa_r+0x5f4>
 800ab36:	429f      	cmp	r7, r3
 800ab38:	d1f8      	bne.n	800ab2c <_dtoa_r+0x5dc>
 800ab3a:	9a05      	ldr	r2, [sp, #20]
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	9205      	str	r2, [sp, #20]
 800ab40:	2230      	movs	r2, #48	@ 0x30
 800ab42:	703a      	strb	r2, [r7, #0]
 800ab44:	781a      	ldrb	r2, [r3, #0]
 800ab46:	3201      	adds	r2, #1
 800ab48:	701a      	strb	r2, [r3, #0]
 800ab4a:	e7b1      	b.n	800aab0 <_dtoa_r+0x560>
 800ab4c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab58:	d1b5      	bne.n	800aac6 <_dtoa_r+0x576>
 800ab5a:	e7d4      	b.n	800ab06 <_dtoa_r+0x5b6>
 800ab5c:	0800c2a0 	.word	0x0800c2a0
 800ab60:	0800c278 	.word	0x0800c278
 800ab64:	9908      	ldr	r1, [sp, #32]
 800ab66:	2900      	cmp	r1, #0
 800ab68:	f000 80e9 	beq.w	800ad3e <_dtoa_r+0x7ee>
 800ab6c:	9907      	ldr	r1, [sp, #28]
 800ab6e:	2901      	cmp	r1, #1
 800ab70:	f300 80cb 	bgt.w	800ad0a <_dtoa_r+0x7ba>
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	f000 80c4 	beq.w	800ad02 <_dtoa_r+0x7b2>
 800ab7a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab7e:	9e04      	ldr	r6, [sp, #16]
 800ab80:	461c      	mov	r4, r3
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	4413      	add	r3, r2
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4413      	add	r3, r2
 800ab90:	4648      	mov	r0, r9
 800ab92:	9306      	str	r3, [sp, #24]
 800ab94:	f000 fc2e 	bl	800b3f4 <__i2b>
 800ab98:	9b05      	ldr	r3, [sp, #20]
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	b166      	cbz	r6, 800abb8 <_dtoa_r+0x668>
 800ab9e:	9a06      	ldr	r2, [sp, #24]
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	dd09      	ble.n	800abb8 <_dtoa_r+0x668>
 800aba4:	42b2      	cmp	r2, r6
 800aba6:	9904      	ldr	r1, [sp, #16]
 800aba8:	bfa8      	it	ge
 800abaa:	4632      	movge	r2, r6
 800abac:	1a89      	subs	r1, r1, r2
 800abae:	9104      	str	r1, [sp, #16]
 800abb0:	9906      	ldr	r1, [sp, #24]
 800abb2:	1ab6      	subs	r6, r6, r2
 800abb4:	1a8a      	subs	r2, r1, r2
 800abb6:	9206      	str	r2, [sp, #24]
 800abb8:	b30b      	cbz	r3, 800abfe <_dtoa_r+0x6ae>
 800abba:	9a08      	ldr	r2, [sp, #32]
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	f000 80c5 	beq.w	800ad4c <_dtoa_r+0x7fc>
 800abc2:	2c00      	cmp	r4, #0
 800abc4:	f000 80bf 	beq.w	800ad46 <_dtoa_r+0x7f6>
 800abc8:	4629      	mov	r1, r5
 800abca:	4622      	mov	r2, r4
 800abcc:	4648      	mov	r0, r9
 800abce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abd0:	f000 fcc8 	bl	800b564 <__pow5mult>
 800abd4:	9a01      	ldr	r2, [sp, #4]
 800abd6:	4601      	mov	r1, r0
 800abd8:	4605      	mov	r5, r0
 800abda:	4648      	mov	r0, r9
 800abdc:	f000 fc20 	bl	800b420 <__multiply>
 800abe0:	9901      	ldr	r1, [sp, #4]
 800abe2:	9005      	str	r0, [sp, #20]
 800abe4:	4648      	mov	r0, r9
 800abe6:	f000 fb51 	bl	800b28c <_Bfree>
 800abea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abec:	1b1b      	subs	r3, r3, r4
 800abee:	f000 80b0 	beq.w	800ad52 <_dtoa_r+0x802>
 800abf2:	9905      	ldr	r1, [sp, #20]
 800abf4:	461a      	mov	r2, r3
 800abf6:	4648      	mov	r0, r9
 800abf8:	f000 fcb4 	bl	800b564 <__pow5mult>
 800abfc:	9001      	str	r0, [sp, #4]
 800abfe:	2101      	movs	r1, #1
 800ac00:	4648      	mov	r0, r9
 800ac02:	f000 fbf7 	bl	800b3f4 <__i2b>
 800ac06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac08:	4604      	mov	r4, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 81da 	beq.w	800afc4 <_dtoa_r+0xa74>
 800ac10:	461a      	mov	r2, r3
 800ac12:	4601      	mov	r1, r0
 800ac14:	4648      	mov	r0, r9
 800ac16:	f000 fca5 	bl	800b564 <__pow5mult>
 800ac1a:	9b07      	ldr	r3, [sp, #28]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	4604      	mov	r4, r0
 800ac20:	f300 80a0 	bgt.w	800ad64 <_dtoa_r+0x814>
 800ac24:	9b02      	ldr	r3, [sp, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f040 8096 	bne.w	800ad58 <_dtoa_r+0x808>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	f040 8092 	bne.w	800ad5c <_dtoa_r+0x80c>
 800ac38:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ac3c:	0d12      	lsrs	r2, r2, #20
 800ac3e:	0512      	lsls	r2, r2, #20
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	f000 808d 	beq.w	800ad60 <_dtoa_r+0x810>
 800ac46:	9b04      	ldr	r3, [sp, #16]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	9306      	str	r3, [sp, #24]
 800ac52:	2301      	movs	r3, #1
 800ac54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 81b9 	beq.w	800afd0 <_dtoa_r+0xa80>
 800ac5e:	6922      	ldr	r2, [r4, #16]
 800ac60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ac64:	6910      	ldr	r0, [r2, #16]
 800ac66:	f000 fb79 	bl	800b35c <__hi0bits>
 800ac6a:	f1c0 0020 	rsb	r0, r0, #32
 800ac6e:	9b06      	ldr	r3, [sp, #24]
 800ac70:	4418      	add	r0, r3
 800ac72:	f010 001f 	ands.w	r0, r0, #31
 800ac76:	f000 8081 	beq.w	800ad7c <_dtoa_r+0x82c>
 800ac7a:	f1c0 0220 	rsb	r2, r0, #32
 800ac7e:	2a04      	cmp	r2, #4
 800ac80:	dd73      	ble.n	800ad6a <_dtoa_r+0x81a>
 800ac82:	9b04      	ldr	r3, [sp, #16]
 800ac84:	f1c0 001c 	rsb	r0, r0, #28
 800ac88:	4403      	add	r3, r0
 800ac8a:	9304      	str	r3, [sp, #16]
 800ac8c:	9b06      	ldr	r3, [sp, #24]
 800ac8e:	4406      	add	r6, r0
 800ac90:	4403      	add	r3, r0
 800ac92:	9306      	str	r3, [sp, #24]
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	dd05      	ble.n	800aca6 <_dtoa_r+0x756>
 800ac9a:	9901      	ldr	r1, [sp, #4]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4648      	mov	r0, r9
 800aca0:	f000 fcba 	bl	800b618 <__lshift>
 800aca4:	9001      	str	r0, [sp, #4]
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dd05      	ble.n	800acb8 <_dtoa_r+0x768>
 800acac:	4621      	mov	r1, r4
 800acae:	461a      	mov	r2, r3
 800acb0:	4648      	mov	r0, r9
 800acb2:	f000 fcb1 	bl	800b618 <__lshift>
 800acb6:	4604      	mov	r4, r0
 800acb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d060      	beq.n	800ad80 <_dtoa_r+0x830>
 800acbe:	9801      	ldr	r0, [sp, #4]
 800acc0:	4621      	mov	r1, r4
 800acc2:	f000 fd15 	bl	800b6f0 <__mcmp>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	da5a      	bge.n	800ad80 <_dtoa_r+0x830>
 800acca:	f108 33ff 	add.w	r3, r8, #4294967295
 800acce:	9305      	str	r3, [sp, #20]
 800acd0:	9901      	ldr	r1, [sp, #4]
 800acd2:	2300      	movs	r3, #0
 800acd4:	220a      	movs	r2, #10
 800acd6:	4648      	mov	r0, r9
 800acd8:	f000 fafa 	bl	800b2d0 <__multadd>
 800acdc:	9b08      	ldr	r3, [sp, #32]
 800acde:	9001      	str	r0, [sp, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8177 	beq.w	800afd4 <_dtoa_r+0xa84>
 800ace6:	4629      	mov	r1, r5
 800ace8:	2300      	movs	r3, #0
 800acea:	220a      	movs	r2, #10
 800acec:	4648      	mov	r0, r9
 800acee:	f000 faef 	bl	800b2d0 <__multadd>
 800acf2:	f1bb 0f00 	cmp.w	fp, #0
 800acf6:	4605      	mov	r5, r0
 800acf8:	dc6e      	bgt.n	800add8 <_dtoa_r+0x888>
 800acfa:	9b07      	ldr	r3, [sp, #28]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	dc48      	bgt.n	800ad92 <_dtoa_r+0x842>
 800ad00:	e06a      	b.n	800add8 <_dtoa_r+0x888>
 800ad02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad08:	e739      	b.n	800ab7e <_dtoa_r+0x62e>
 800ad0a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ad0e:	42a3      	cmp	r3, r4
 800ad10:	db07      	blt.n	800ad22 <_dtoa_r+0x7d2>
 800ad12:	f1ba 0f00 	cmp.w	sl, #0
 800ad16:	eba3 0404 	sub.w	r4, r3, r4
 800ad1a:	db0b      	blt.n	800ad34 <_dtoa_r+0x7e4>
 800ad1c:	9e04      	ldr	r6, [sp, #16]
 800ad1e:	4652      	mov	r2, sl
 800ad20:	e72f      	b.n	800ab82 <_dtoa_r+0x632>
 800ad22:	1ae2      	subs	r2, r4, r3
 800ad24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad26:	9e04      	ldr	r6, [sp, #16]
 800ad28:	4413      	add	r3, r2
 800ad2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad2c:	4652      	mov	r2, sl
 800ad2e:	4623      	mov	r3, r4
 800ad30:	2400      	movs	r4, #0
 800ad32:	e726      	b.n	800ab82 <_dtoa_r+0x632>
 800ad34:	9a04      	ldr	r2, [sp, #16]
 800ad36:	eba2 060a 	sub.w	r6, r2, sl
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	e721      	b.n	800ab82 <_dtoa_r+0x632>
 800ad3e:	9e04      	ldr	r6, [sp, #16]
 800ad40:	9d08      	ldr	r5, [sp, #32]
 800ad42:	461c      	mov	r4, r3
 800ad44:	e72a      	b.n	800ab9c <_dtoa_r+0x64c>
 800ad46:	9a01      	ldr	r2, [sp, #4]
 800ad48:	9205      	str	r2, [sp, #20]
 800ad4a:	e752      	b.n	800abf2 <_dtoa_r+0x6a2>
 800ad4c:	9901      	ldr	r1, [sp, #4]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	e751      	b.n	800abf6 <_dtoa_r+0x6a6>
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	e752      	b.n	800abfe <_dtoa_r+0x6ae>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e77b      	b.n	800ac54 <_dtoa_r+0x704>
 800ad5c:	9b02      	ldr	r3, [sp, #8]
 800ad5e:	e779      	b.n	800ac54 <_dtoa_r+0x704>
 800ad60:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad62:	e778      	b.n	800ac56 <_dtoa_r+0x706>
 800ad64:	2300      	movs	r3, #0
 800ad66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad68:	e779      	b.n	800ac5e <_dtoa_r+0x70e>
 800ad6a:	d093      	beq.n	800ac94 <_dtoa_r+0x744>
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	321c      	adds	r2, #28
 800ad70:	4413      	add	r3, r2
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	9b06      	ldr	r3, [sp, #24]
 800ad76:	4416      	add	r6, r2
 800ad78:	4413      	add	r3, r2
 800ad7a:	e78a      	b.n	800ac92 <_dtoa_r+0x742>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	e7f5      	b.n	800ad6c <_dtoa_r+0x81c>
 800ad80:	f1ba 0f00 	cmp.w	sl, #0
 800ad84:	f8cd 8014 	str.w	r8, [sp, #20]
 800ad88:	46d3      	mov	fp, sl
 800ad8a:	dc21      	bgt.n	800add0 <_dtoa_r+0x880>
 800ad8c:	9b07      	ldr	r3, [sp, #28]
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	dd1e      	ble.n	800add0 <_dtoa_r+0x880>
 800ad92:	f1bb 0f00 	cmp.w	fp, #0
 800ad96:	f47f addc 	bne.w	800a952 <_dtoa_r+0x402>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	465b      	mov	r3, fp
 800ad9e:	2205      	movs	r2, #5
 800ada0:	4648      	mov	r0, r9
 800ada2:	f000 fa95 	bl	800b2d0 <__multadd>
 800ada6:	4601      	mov	r1, r0
 800ada8:	4604      	mov	r4, r0
 800adaa:	9801      	ldr	r0, [sp, #4]
 800adac:	f000 fca0 	bl	800b6f0 <__mcmp>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	f77f adce 	ble.w	800a952 <_dtoa_r+0x402>
 800adb6:	463e      	mov	r6, r7
 800adb8:	2331      	movs	r3, #49	@ 0x31
 800adba:	f806 3b01 	strb.w	r3, [r6], #1
 800adbe:	9b05      	ldr	r3, [sp, #20]
 800adc0:	3301      	adds	r3, #1
 800adc2:	9305      	str	r3, [sp, #20]
 800adc4:	e5c9      	b.n	800a95a <_dtoa_r+0x40a>
 800adc6:	f8cd 8014 	str.w	r8, [sp, #20]
 800adca:	4654      	mov	r4, sl
 800adcc:	4625      	mov	r5, r4
 800adce:	e7f2      	b.n	800adb6 <_dtoa_r+0x866>
 800add0:	9b08      	ldr	r3, [sp, #32]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8102 	beq.w	800afdc <_dtoa_r+0xa8c>
 800add8:	2e00      	cmp	r6, #0
 800adda:	dd05      	ble.n	800ade8 <_dtoa_r+0x898>
 800addc:	4629      	mov	r1, r5
 800adde:	4632      	mov	r2, r6
 800ade0:	4648      	mov	r0, r9
 800ade2:	f000 fc19 	bl	800b618 <__lshift>
 800ade6:	4605      	mov	r5, r0
 800ade8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d058      	beq.n	800aea0 <_dtoa_r+0x950>
 800adee:	6869      	ldr	r1, [r5, #4]
 800adf0:	4648      	mov	r0, r9
 800adf2:	f000 fa0b 	bl	800b20c <_Balloc>
 800adf6:	4606      	mov	r6, r0
 800adf8:	b928      	cbnz	r0, 800ae06 <_dtoa_r+0x8b6>
 800adfa:	4b82      	ldr	r3, [pc, #520]	@ (800b004 <_dtoa_r+0xab4>)
 800adfc:	4602      	mov	r2, r0
 800adfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae02:	f7ff bbbe 	b.w	800a582 <_dtoa_r+0x32>
 800ae06:	692a      	ldr	r2, [r5, #16]
 800ae08:	3202      	adds	r2, #2
 800ae0a:	0092      	lsls	r2, r2, #2
 800ae0c:	f105 010c 	add.w	r1, r5, #12
 800ae10:	300c      	adds	r0, #12
 800ae12:	f000 fff7 	bl	800be04 <memcpy>
 800ae16:	2201      	movs	r2, #1
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4648      	mov	r0, r9
 800ae1c:	f000 fbfc 	bl	800b618 <__lshift>
 800ae20:	1c7b      	adds	r3, r7, #1
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	eb07 030b 	add.w	r3, r7, fp
 800ae28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae2a:	9b02      	ldr	r3, [sp, #8]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	46a8      	mov	r8, r5
 800ae32:	9308      	str	r3, [sp, #32]
 800ae34:	4605      	mov	r5, r0
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	9801      	ldr	r0, [sp, #4]
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae40:	f7ff fafd 	bl	800a43e <quorem>
 800ae44:	4641      	mov	r1, r8
 800ae46:	9002      	str	r0, [sp, #8]
 800ae48:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ae4c:	9801      	ldr	r0, [sp, #4]
 800ae4e:	f000 fc4f 	bl	800b6f0 <__mcmp>
 800ae52:	462a      	mov	r2, r5
 800ae54:	9006      	str	r0, [sp, #24]
 800ae56:	4621      	mov	r1, r4
 800ae58:	4648      	mov	r0, r9
 800ae5a:	f000 fc65 	bl	800b728 <__mdiff>
 800ae5e:	68c2      	ldr	r2, [r0, #12]
 800ae60:	4606      	mov	r6, r0
 800ae62:	b9fa      	cbnz	r2, 800aea4 <_dtoa_r+0x954>
 800ae64:	4601      	mov	r1, r0
 800ae66:	9801      	ldr	r0, [sp, #4]
 800ae68:	f000 fc42 	bl	800b6f0 <__mcmp>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4648      	mov	r0, r9
 800ae72:	920a      	str	r2, [sp, #40]	@ 0x28
 800ae74:	f000 fa0a 	bl	800b28c <_Bfree>
 800ae78:	9b07      	ldr	r3, [sp, #28]
 800ae7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae7c:	9e04      	ldr	r6, [sp, #16]
 800ae7e:	ea42 0103 	orr.w	r1, r2, r3
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	4319      	orrs	r1, r3
 800ae86:	d10f      	bne.n	800aea8 <_dtoa_r+0x958>
 800ae88:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ae8c:	d028      	beq.n	800aee0 <_dtoa_r+0x990>
 800ae8e:	9b06      	ldr	r3, [sp, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dd02      	ble.n	800ae9a <_dtoa_r+0x94a>
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ae9a:	f88b a000 	strb.w	sl, [fp]
 800ae9e:	e55e      	b.n	800a95e <_dtoa_r+0x40e>
 800aea0:	4628      	mov	r0, r5
 800aea2:	e7bd      	b.n	800ae20 <_dtoa_r+0x8d0>
 800aea4:	2201      	movs	r2, #1
 800aea6:	e7e2      	b.n	800ae6e <_dtoa_r+0x91e>
 800aea8:	9b06      	ldr	r3, [sp, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	db04      	blt.n	800aeb8 <_dtoa_r+0x968>
 800aeae:	9907      	ldr	r1, [sp, #28]
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	9908      	ldr	r1, [sp, #32]
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	d120      	bne.n	800aefa <_dtoa_r+0x9aa>
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	ddee      	ble.n	800ae9a <_dtoa_r+0x94a>
 800aebc:	9901      	ldr	r1, [sp, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	4648      	mov	r0, r9
 800aec2:	f000 fba9 	bl	800b618 <__lshift>
 800aec6:	4621      	mov	r1, r4
 800aec8:	9001      	str	r0, [sp, #4]
 800aeca:	f000 fc11 	bl	800b6f0 <__mcmp>
 800aece:	2800      	cmp	r0, #0
 800aed0:	dc03      	bgt.n	800aeda <_dtoa_r+0x98a>
 800aed2:	d1e2      	bne.n	800ae9a <_dtoa_r+0x94a>
 800aed4:	f01a 0f01 	tst.w	sl, #1
 800aed8:	d0df      	beq.n	800ae9a <_dtoa_r+0x94a>
 800aeda:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aede:	d1d9      	bne.n	800ae94 <_dtoa_r+0x944>
 800aee0:	2339      	movs	r3, #57	@ 0x39
 800aee2:	f88b 3000 	strb.w	r3, [fp]
 800aee6:	4633      	mov	r3, r6
 800aee8:	461e      	mov	r6, r3
 800aeea:	3b01      	subs	r3, #1
 800aeec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aef0:	2a39      	cmp	r2, #57	@ 0x39
 800aef2:	d052      	beq.n	800af9a <_dtoa_r+0xa4a>
 800aef4:	3201      	adds	r2, #1
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	e531      	b.n	800a95e <_dtoa_r+0x40e>
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	dd07      	ble.n	800af0e <_dtoa_r+0x9be>
 800aefe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800af02:	d0ed      	beq.n	800aee0 <_dtoa_r+0x990>
 800af04:	f10a 0301 	add.w	r3, sl, #1
 800af08:	f88b 3000 	strb.w	r3, [fp]
 800af0c:	e527      	b.n	800a95e <_dtoa_r+0x40e>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af12:	f803 ac01 	strb.w	sl, [r3, #-1]
 800af16:	4293      	cmp	r3, r2
 800af18:	d029      	beq.n	800af6e <_dtoa_r+0xa1e>
 800af1a:	9901      	ldr	r1, [sp, #4]
 800af1c:	2300      	movs	r3, #0
 800af1e:	220a      	movs	r2, #10
 800af20:	4648      	mov	r0, r9
 800af22:	f000 f9d5 	bl	800b2d0 <__multadd>
 800af26:	45a8      	cmp	r8, r5
 800af28:	9001      	str	r0, [sp, #4]
 800af2a:	f04f 0300 	mov.w	r3, #0
 800af2e:	f04f 020a 	mov.w	r2, #10
 800af32:	4641      	mov	r1, r8
 800af34:	4648      	mov	r0, r9
 800af36:	d107      	bne.n	800af48 <_dtoa_r+0x9f8>
 800af38:	f000 f9ca 	bl	800b2d0 <__multadd>
 800af3c:	4680      	mov	r8, r0
 800af3e:	4605      	mov	r5, r0
 800af40:	9b04      	ldr	r3, [sp, #16]
 800af42:	3301      	adds	r3, #1
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	e776      	b.n	800ae36 <_dtoa_r+0x8e6>
 800af48:	f000 f9c2 	bl	800b2d0 <__multadd>
 800af4c:	4629      	mov	r1, r5
 800af4e:	4680      	mov	r8, r0
 800af50:	2300      	movs	r3, #0
 800af52:	220a      	movs	r2, #10
 800af54:	4648      	mov	r0, r9
 800af56:	f000 f9bb 	bl	800b2d0 <__multadd>
 800af5a:	4605      	mov	r5, r0
 800af5c:	e7f0      	b.n	800af40 <_dtoa_r+0x9f0>
 800af5e:	f1bb 0f00 	cmp.w	fp, #0
 800af62:	bfcc      	ite	gt
 800af64:	465e      	movgt	r6, fp
 800af66:	2601      	movle	r6, #1
 800af68:	443e      	add	r6, r7
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	9901      	ldr	r1, [sp, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	4648      	mov	r0, r9
 800af74:	f000 fb50 	bl	800b618 <__lshift>
 800af78:	4621      	mov	r1, r4
 800af7a:	9001      	str	r0, [sp, #4]
 800af7c:	f000 fbb8 	bl	800b6f0 <__mcmp>
 800af80:	2800      	cmp	r0, #0
 800af82:	dcb0      	bgt.n	800aee6 <_dtoa_r+0x996>
 800af84:	d102      	bne.n	800af8c <_dtoa_r+0xa3c>
 800af86:	f01a 0f01 	tst.w	sl, #1
 800af8a:	d1ac      	bne.n	800aee6 <_dtoa_r+0x996>
 800af8c:	4633      	mov	r3, r6
 800af8e:	461e      	mov	r6, r3
 800af90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af94:	2a30      	cmp	r2, #48	@ 0x30
 800af96:	d0fa      	beq.n	800af8e <_dtoa_r+0xa3e>
 800af98:	e4e1      	b.n	800a95e <_dtoa_r+0x40e>
 800af9a:	429f      	cmp	r7, r3
 800af9c:	d1a4      	bne.n	800aee8 <_dtoa_r+0x998>
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	3301      	adds	r3, #1
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	2331      	movs	r3, #49	@ 0x31
 800afa6:	703b      	strb	r3, [r7, #0]
 800afa8:	e4d9      	b.n	800a95e <_dtoa_r+0x40e>
 800afaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800afac:	4f16      	ldr	r7, [pc, #88]	@ (800b008 <_dtoa_r+0xab8>)
 800afae:	b11b      	cbz	r3, 800afb8 <_dtoa_r+0xa68>
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	4638      	mov	r0, r7
 800afba:	b011      	add	sp, #68	@ 0x44
 800afbc:	ecbd 8b02 	vpop	{d8}
 800afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	9b07      	ldr	r3, [sp, #28]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	f77f ae2c 	ble.w	800ac24 <_dtoa_r+0x6d4>
 800afcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afd0:	2001      	movs	r0, #1
 800afd2:	e64c      	b.n	800ac6e <_dtoa_r+0x71e>
 800afd4:	f1bb 0f00 	cmp.w	fp, #0
 800afd8:	f77f aed8 	ble.w	800ad8c <_dtoa_r+0x83c>
 800afdc:	463e      	mov	r6, r7
 800afde:	9801      	ldr	r0, [sp, #4]
 800afe0:	4621      	mov	r1, r4
 800afe2:	f7ff fa2c 	bl	800a43e <quorem>
 800afe6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800afea:	f806 ab01 	strb.w	sl, [r6], #1
 800afee:	1bf2      	subs	r2, r6, r7
 800aff0:	4593      	cmp	fp, r2
 800aff2:	ddb4      	ble.n	800af5e <_dtoa_r+0xa0e>
 800aff4:	9901      	ldr	r1, [sp, #4]
 800aff6:	2300      	movs	r3, #0
 800aff8:	220a      	movs	r2, #10
 800affa:	4648      	mov	r0, r9
 800affc:	f000 f968 	bl	800b2d0 <__multadd>
 800b000:	9001      	str	r0, [sp, #4]
 800b002:	e7ec      	b.n	800afde <_dtoa_r+0xa8e>
 800b004:	0800c1a4 	.word	0x0800c1a4
 800b008:	0800c128 	.word	0x0800c128

0800b00c <_free_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4605      	mov	r5, r0
 800b010:	2900      	cmp	r1, #0
 800b012:	d041      	beq.n	800b098 <_free_r+0x8c>
 800b014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b018:	1f0c      	subs	r4, r1, #4
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	bfb8      	it	lt
 800b01e:	18e4      	addlt	r4, r4, r3
 800b020:	f000 f8e8 	bl	800b1f4 <__malloc_lock>
 800b024:	4a1d      	ldr	r2, [pc, #116]	@ (800b09c <_free_r+0x90>)
 800b026:	6813      	ldr	r3, [r2, #0]
 800b028:	b933      	cbnz	r3, 800b038 <_free_r+0x2c>
 800b02a:	6063      	str	r3, [r4, #4]
 800b02c:	6014      	str	r4, [r2, #0]
 800b02e:	4628      	mov	r0, r5
 800b030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b034:	f000 b8e4 	b.w	800b200 <__malloc_unlock>
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d908      	bls.n	800b04e <_free_r+0x42>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	1821      	adds	r1, r4, r0
 800b040:	428b      	cmp	r3, r1
 800b042:	bf01      	itttt	eq
 800b044:	6819      	ldreq	r1, [r3, #0]
 800b046:	685b      	ldreq	r3, [r3, #4]
 800b048:	1809      	addeq	r1, r1, r0
 800b04a:	6021      	streq	r1, [r4, #0]
 800b04c:	e7ed      	b.n	800b02a <_free_r+0x1e>
 800b04e:	461a      	mov	r2, r3
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	b10b      	cbz	r3, 800b058 <_free_r+0x4c>
 800b054:	42a3      	cmp	r3, r4
 800b056:	d9fa      	bls.n	800b04e <_free_r+0x42>
 800b058:	6811      	ldr	r1, [r2, #0]
 800b05a:	1850      	adds	r0, r2, r1
 800b05c:	42a0      	cmp	r0, r4
 800b05e:	d10b      	bne.n	800b078 <_free_r+0x6c>
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	4401      	add	r1, r0
 800b064:	1850      	adds	r0, r2, r1
 800b066:	4283      	cmp	r3, r0
 800b068:	6011      	str	r1, [r2, #0]
 800b06a:	d1e0      	bne.n	800b02e <_free_r+0x22>
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	6053      	str	r3, [r2, #4]
 800b072:	4408      	add	r0, r1
 800b074:	6010      	str	r0, [r2, #0]
 800b076:	e7da      	b.n	800b02e <_free_r+0x22>
 800b078:	d902      	bls.n	800b080 <_free_r+0x74>
 800b07a:	230c      	movs	r3, #12
 800b07c:	602b      	str	r3, [r5, #0]
 800b07e:	e7d6      	b.n	800b02e <_free_r+0x22>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	1821      	adds	r1, r4, r0
 800b084:	428b      	cmp	r3, r1
 800b086:	bf04      	itt	eq
 800b088:	6819      	ldreq	r1, [r3, #0]
 800b08a:	685b      	ldreq	r3, [r3, #4]
 800b08c:	6063      	str	r3, [r4, #4]
 800b08e:	bf04      	itt	eq
 800b090:	1809      	addeq	r1, r1, r0
 800b092:	6021      	streq	r1, [r4, #0]
 800b094:	6054      	str	r4, [r2, #4]
 800b096:	e7ca      	b.n	800b02e <_free_r+0x22>
 800b098:	bd38      	pop	{r3, r4, r5, pc}
 800b09a:	bf00      	nop
 800b09c:	240005ec 	.word	0x240005ec

0800b0a0 <malloc>:
 800b0a0:	4b02      	ldr	r3, [pc, #8]	@ (800b0ac <malloc+0xc>)
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	6818      	ldr	r0, [r3, #0]
 800b0a6:	f000 b825 	b.w	800b0f4 <_malloc_r>
 800b0aa:	bf00      	nop
 800b0ac:	2400001c 	.word	0x2400001c

0800b0b0 <sbrk_aligned>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	4e0f      	ldr	r6, [pc, #60]	@ (800b0f0 <sbrk_aligned+0x40>)
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	6831      	ldr	r1, [r6, #0]
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	b911      	cbnz	r1, 800b0c2 <sbrk_aligned+0x12>
 800b0bc:	f000 fe92 	bl	800bde4 <_sbrk_r>
 800b0c0:	6030      	str	r0, [r6, #0]
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f000 fe8d 	bl	800bde4 <_sbrk_r>
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	d103      	bne.n	800b0d6 <sbrk_aligned+0x26>
 800b0ce:	f04f 34ff 	mov.w	r4, #4294967295
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	bd70      	pop	{r4, r5, r6, pc}
 800b0d6:	1cc4      	adds	r4, r0, #3
 800b0d8:	f024 0403 	bic.w	r4, r4, #3
 800b0dc:	42a0      	cmp	r0, r4
 800b0de:	d0f8      	beq.n	800b0d2 <sbrk_aligned+0x22>
 800b0e0:	1a21      	subs	r1, r4, r0
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f000 fe7e 	bl	800bde4 <_sbrk_r>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d1f2      	bne.n	800b0d2 <sbrk_aligned+0x22>
 800b0ec:	e7ef      	b.n	800b0ce <sbrk_aligned+0x1e>
 800b0ee:	bf00      	nop
 800b0f0:	240005e8 	.word	0x240005e8

0800b0f4 <_malloc_r>:
 800b0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f8:	1ccd      	adds	r5, r1, #3
 800b0fa:	f025 0503 	bic.w	r5, r5, #3
 800b0fe:	3508      	adds	r5, #8
 800b100:	2d0c      	cmp	r5, #12
 800b102:	bf38      	it	cc
 800b104:	250c      	movcc	r5, #12
 800b106:	2d00      	cmp	r5, #0
 800b108:	4606      	mov	r6, r0
 800b10a:	db01      	blt.n	800b110 <_malloc_r+0x1c>
 800b10c:	42a9      	cmp	r1, r5
 800b10e:	d904      	bls.n	800b11a <_malloc_r+0x26>
 800b110:	230c      	movs	r3, #12
 800b112:	6033      	str	r3, [r6, #0]
 800b114:	2000      	movs	r0, #0
 800b116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b11a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1f0 <_malloc_r+0xfc>
 800b11e:	f000 f869 	bl	800b1f4 <__malloc_lock>
 800b122:	f8d8 3000 	ldr.w	r3, [r8]
 800b126:	461c      	mov	r4, r3
 800b128:	bb44      	cbnz	r4, 800b17c <_malloc_r+0x88>
 800b12a:	4629      	mov	r1, r5
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ffbf 	bl	800b0b0 <sbrk_aligned>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	4604      	mov	r4, r0
 800b136:	d158      	bne.n	800b1ea <_malloc_r+0xf6>
 800b138:	f8d8 4000 	ldr.w	r4, [r8]
 800b13c:	4627      	mov	r7, r4
 800b13e:	2f00      	cmp	r7, #0
 800b140:	d143      	bne.n	800b1ca <_malloc_r+0xd6>
 800b142:	2c00      	cmp	r4, #0
 800b144:	d04b      	beq.n	800b1de <_malloc_r+0xea>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	4639      	mov	r1, r7
 800b14a:	4630      	mov	r0, r6
 800b14c:	eb04 0903 	add.w	r9, r4, r3
 800b150:	f000 fe48 	bl	800bde4 <_sbrk_r>
 800b154:	4581      	cmp	r9, r0
 800b156:	d142      	bne.n	800b1de <_malloc_r+0xea>
 800b158:	6821      	ldr	r1, [r4, #0]
 800b15a:	1a6d      	subs	r5, r5, r1
 800b15c:	4629      	mov	r1, r5
 800b15e:	4630      	mov	r0, r6
 800b160:	f7ff ffa6 	bl	800b0b0 <sbrk_aligned>
 800b164:	3001      	adds	r0, #1
 800b166:	d03a      	beq.n	800b1de <_malloc_r+0xea>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	442b      	add	r3, r5
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	f8d8 3000 	ldr.w	r3, [r8]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	bb62      	cbnz	r2, 800b1d0 <_malloc_r+0xdc>
 800b176:	f8c8 7000 	str.w	r7, [r8]
 800b17a:	e00f      	b.n	800b19c <_malloc_r+0xa8>
 800b17c:	6822      	ldr	r2, [r4, #0]
 800b17e:	1b52      	subs	r2, r2, r5
 800b180:	d420      	bmi.n	800b1c4 <_malloc_r+0xd0>
 800b182:	2a0b      	cmp	r2, #11
 800b184:	d917      	bls.n	800b1b6 <_malloc_r+0xc2>
 800b186:	1961      	adds	r1, r4, r5
 800b188:	42a3      	cmp	r3, r4
 800b18a:	6025      	str	r5, [r4, #0]
 800b18c:	bf18      	it	ne
 800b18e:	6059      	strne	r1, [r3, #4]
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	bf08      	it	eq
 800b194:	f8c8 1000 	streq.w	r1, [r8]
 800b198:	5162      	str	r2, [r4, r5]
 800b19a:	604b      	str	r3, [r1, #4]
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 f82f 	bl	800b200 <__malloc_unlock>
 800b1a2:	f104 000b 	add.w	r0, r4, #11
 800b1a6:	1d23      	adds	r3, r4, #4
 800b1a8:	f020 0007 	bic.w	r0, r0, #7
 800b1ac:	1ac2      	subs	r2, r0, r3
 800b1ae:	bf1c      	itt	ne
 800b1b0:	1a1b      	subne	r3, r3, r0
 800b1b2:	50a3      	strne	r3, [r4, r2]
 800b1b4:	e7af      	b.n	800b116 <_malloc_r+0x22>
 800b1b6:	6862      	ldr	r2, [r4, #4]
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	bf0c      	ite	eq
 800b1bc:	f8c8 2000 	streq.w	r2, [r8]
 800b1c0:	605a      	strne	r2, [r3, #4]
 800b1c2:	e7eb      	b.n	800b19c <_malloc_r+0xa8>
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	6864      	ldr	r4, [r4, #4]
 800b1c8:	e7ae      	b.n	800b128 <_malloc_r+0x34>
 800b1ca:	463c      	mov	r4, r7
 800b1cc:	687f      	ldr	r7, [r7, #4]
 800b1ce:	e7b6      	b.n	800b13e <_malloc_r+0x4a>
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	42a3      	cmp	r3, r4
 800b1d6:	d1fb      	bne.n	800b1d0 <_malloc_r+0xdc>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	6053      	str	r3, [r2, #4]
 800b1dc:	e7de      	b.n	800b19c <_malloc_r+0xa8>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	6033      	str	r3, [r6, #0]
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f000 f80c 	bl	800b200 <__malloc_unlock>
 800b1e8:	e794      	b.n	800b114 <_malloc_r+0x20>
 800b1ea:	6005      	str	r5, [r0, #0]
 800b1ec:	e7d6      	b.n	800b19c <_malloc_r+0xa8>
 800b1ee:	bf00      	nop
 800b1f0:	240005ec 	.word	0x240005ec

0800b1f4 <__malloc_lock>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	@ (800b1fc <__malloc_lock+0x8>)
 800b1f6:	f7ff b920 	b.w	800a43a <__retarget_lock_acquire_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	240005e4 	.word	0x240005e4

0800b200 <__malloc_unlock>:
 800b200:	4801      	ldr	r0, [pc, #4]	@ (800b208 <__malloc_unlock+0x8>)
 800b202:	f7ff b91b 	b.w	800a43c <__retarget_lock_release_recursive>
 800b206:	bf00      	nop
 800b208:	240005e4 	.word	0x240005e4

0800b20c <_Balloc>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	69c6      	ldr	r6, [r0, #28]
 800b210:	4604      	mov	r4, r0
 800b212:	460d      	mov	r5, r1
 800b214:	b976      	cbnz	r6, 800b234 <_Balloc+0x28>
 800b216:	2010      	movs	r0, #16
 800b218:	f7ff ff42 	bl	800b0a0 <malloc>
 800b21c:	4602      	mov	r2, r0
 800b21e:	61e0      	str	r0, [r4, #28]
 800b220:	b920      	cbnz	r0, 800b22c <_Balloc+0x20>
 800b222:	4b18      	ldr	r3, [pc, #96]	@ (800b284 <_Balloc+0x78>)
 800b224:	4818      	ldr	r0, [pc, #96]	@ (800b288 <_Balloc+0x7c>)
 800b226:	216b      	movs	r1, #107	@ 0x6b
 800b228:	f000 fdfa 	bl	800be20 <__assert_func>
 800b22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b230:	6006      	str	r6, [r0, #0]
 800b232:	60c6      	str	r6, [r0, #12]
 800b234:	69e6      	ldr	r6, [r4, #28]
 800b236:	68f3      	ldr	r3, [r6, #12]
 800b238:	b183      	cbz	r3, 800b25c <_Balloc+0x50>
 800b23a:	69e3      	ldr	r3, [r4, #28]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b242:	b9b8      	cbnz	r0, 800b274 <_Balloc+0x68>
 800b244:	2101      	movs	r1, #1
 800b246:	fa01 f605 	lsl.w	r6, r1, r5
 800b24a:	1d72      	adds	r2, r6, #5
 800b24c:	0092      	lsls	r2, r2, #2
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fe04 	bl	800be5c <_calloc_r>
 800b254:	b160      	cbz	r0, 800b270 <_Balloc+0x64>
 800b256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b25a:	e00e      	b.n	800b27a <_Balloc+0x6e>
 800b25c:	2221      	movs	r2, #33	@ 0x21
 800b25e:	2104      	movs	r1, #4
 800b260:	4620      	mov	r0, r4
 800b262:	f000 fdfb 	bl	800be5c <_calloc_r>
 800b266:	69e3      	ldr	r3, [r4, #28]
 800b268:	60f0      	str	r0, [r6, #12]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e4      	bne.n	800b23a <_Balloc+0x2e>
 800b270:	2000      	movs	r0, #0
 800b272:	bd70      	pop	{r4, r5, r6, pc}
 800b274:	6802      	ldr	r2, [r0, #0]
 800b276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b27a:	2300      	movs	r3, #0
 800b27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b280:	e7f7      	b.n	800b272 <_Balloc+0x66>
 800b282:	bf00      	nop
 800b284:	0800c135 	.word	0x0800c135
 800b288:	0800c1b5 	.word	0x0800c1b5

0800b28c <_Bfree>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	69c6      	ldr	r6, [r0, #28]
 800b290:	4605      	mov	r5, r0
 800b292:	460c      	mov	r4, r1
 800b294:	b976      	cbnz	r6, 800b2b4 <_Bfree+0x28>
 800b296:	2010      	movs	r0, #16
 800b298:	f7ff ff02 	bl	800b0a0 <malloc>
 800b29c:	4602      	mov	r2, r0
 800b29e:	61e8      	str	r0, [r5, #28]
 800b2a0:	b920      	cbnz	r0, 800b2ac <_Bfree+0x20>
 800b2a2:	4b09      	ldr	r3, [pc, #36]	@ (800b2c8 <_Bfree+0x3c>)
 800b2a4:	4809      	ldr	r0, [pc, #36]	@ (800b2cc <_Bfree+0x40>)
 800b2a6:	218f      	movs	r1, #143	@ 0x8f
 800b2a8:	f000 fdba 	bl	800be20 <__assert_func>
 800b2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b0:	6006      	str	r6, [r0, #0]
 800b2b2:	60c6      	str	r6, [r0, #12]
 800b2b4:	b13c      	cbz	r4, 800b2c6 <_Bfree+0x3a>
 800b2b6:	69eb      	ldr	r3, [r5, #28]
 800b2b8:	6862      	ldr	r2, [r4, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2c0:	6021      	str	r1, [r4, #0]
 800b2c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	0800c135 	.word	0x0800c135
 800b2cc:	0800c1b5 	.word	0x0800c1b5

0800b2d0 <__multadd>:
 800b2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d4:	690d      	ldr	r5, [r1, #16]
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	460c      	mov	r4, r1
 800b2da:	461e      	mov	r6, r3
 800b2dc:	f101 0c14 	add.w	ip, r1, #20
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800b2e6:	b299      	uxth	r1, r3
 800b2e8:	fb02 6101 	mla	r1, r2, r1, r6
 800b2ec:	0c1e      	lsrs	r6, r3, #16
 800b2ee:	0c0b      	lsrs	r3, r1, #16
 800b2f0:	fb02 3306 	mla	r3, r2, r6, r3
 800b2f4:	b289      	uxth	r1, r1
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2fc:	4285      	cmp	r5, r0
 800b2fe:	f84c 1b04 	str.w	r1, [ip], #4
 800b302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b306:	dcec      	bgt.n	800b2e2 <__multadd+0x12>
 800b308:	b30e      	cbz	r6, 800b34e <__multadd+0x7e>
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	42ab      	cmp	r3, r5
 800b30e:	dc19      	bgt.n	800b344 <__multadd+0x74>
 800b310:	6861      	ldr	r1, [r4, #4]
 800b312:	4638      	mov	r0, r7
 800b314:	3101      	adds	r1, #1
 800b316:	f7ff ff79 	bl	800b20c <_Balloc>
 800b31a:	4680      	mov	r8, r0
 800b31c:	b928      	cbnz	r0, 800b32a <__multadd+0x5a>
 800b31e:	4602      	mov	r2, r0
 800b320:	4b0c      	ldr	r3, [pc, #48]	@ (800b354 <__multadd+0x84>)
 800b322:	480d      	ldr	r0, [pc, #52]	@ (800b358 <__multadd+0x88>)
 800b324:	21ba      	movs	r1, #186	@ 0xba
 800b326:	f000 fd7b 	bl	800be20 <__assert_func>
 800b32a:	6922      	ldr	r2, [r4, #16]
 800b32c:	3202      	adds	r2, #2
 800b32e:	f104 010c 	add.w	r1, r4, #12
 800b332:	0092      	lsls	r2, r2, #2
 800b334:	300c      	adds	r0, #12
 800b336:	f000 fd65 	bl	800be04 <memcpy>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4638      	mov	r0, r7
 800b33e:	f7ff ffa5 	bl	800b28c <_Bfree>
 800b342:	4644      	mov	r4, r8
 800b344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b348:	3501      	adds	r5, #1
 800b34a:	615e      	str	r6, [r3, #20]
 800b34c:	6125      	str	r5, [r4, #16]
 800b34e:	4620      	mov	r0, r4
 800b350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b354:	0800c1a4 	.word	0x0800c1a4
 800b358:	0800c1b5 	.word	0x0800c1b5

0800b35c <__hi0bits>:
 800b35c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b360:	4603      	mov	r3, r0
 800b362:	bf36      	itet	cc
 800b364:	0403      	lslcc	r3, r0, #16
 800b366:	2000      	movcs	r0, #0
 800b368:	2010      	movcc	r0, #16
 800b36a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b36e:	bf3c      	itt	cc
 800b370:	021b      	lslcc	r3, r3, #8
 800b372:	3008      	addcc	r0, #8
 800b374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b378:	bf3c      	itt	cc
 800b37a:	011b      	lslcc	r3, r3, #4
 800b37c:	3004      	addcc	r0, #4
 800b37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b382:	bf3c      	itt	cc
 800b384:	009b      	lslcc	r3, r3, #2
 800b386:	3002      	addcc	r0, #2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	db05      	blt.n	800b398 <__hi0bits+0x3c>
 800b38c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b390:	f100 0001 	add.w	r0, r0, #1
 800b394:	bf08      	it	eq
 800b396:	2020      	moveq	r0, #32
 800b398:	4770      	bx	lr

0800b39a <__lo0bits>:
 800b39a:	6803      	ldr	r3, [r0, #0]
 800b39c:	4602      	mov	r2, r0
 800b39e:	f013 0007 	ands.w	r0, r3, #7
 800b3a2:	d00b      	beq.n	800b3bc <__lo0bits+0x22>
 800b3a4:	07d9      	lsls	r1, r3, #31
 800b3a6:	d421      	bmi.n	800b3ec <__lo0bits+0x52>
 800b3a8:	0798      	lsls	r0, r3, #30
 800b3aa:	bf49      	itett	mi
 800b3ac:	085b      	lsrmi	r3, r3, #1
 800b3ae:	089b      	lsrpl	r3, r3, #2
 800b3b0:	2001      	movmi	r0, #1
 800b3b2:	6013      	strmi	r3, [r2, #0]
 800b3b4:	bf5c      	itt	pl
 800b3b6:	6013      	strpl	r3, [r2, #0]
 800b3b8:	2002      	movpl	r0, #2
 800b3ba:	4770      	bx	lr
 800b3bc:	b299      	uxth	r1, r3
 800b3be:	b909      	cbnz	r1, 800b3c4 <__lo0bits+0x2a>
 800b3c0:	0c1b      	lsrs	r3, r3, #16
 800b3c2:	2010      	movs	r0, #16
 800b3c4:	b2d9      	uxtb	r1, r3
 800b3c6:	b909      	cbnz	r1, 800b3cc <__lo0bits+0x32>
 800b3c8:	3008      	adds	r0, #8
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	0719      	lsls	r1, r3, #28
 800b3ce:	bf04      	itt	eq
 800b3d0:	091b      	lsreq	r3, r3, #4
 800b3d2:	3004      	addeq	r0, #4
 800b3d4:	0799      	lsls	r1, r3, #30
 800b3d6:	bf04      	itt	eq
 800b3d8:	089b      	lsreq	r3, r3, #2
 800b3da:	3002      	addeq	r0, #2
 800b3dc:	07d9      	lsls	r1, r3, #31
 800b3de:	d403      	bmi.n	800b3e8 <__lo0bits+0x4e>
 800b3e0:	085b      	lsrs	r3, r3, #1
 800b3e2:	f100 0001 	add.w	r0, r0, #1
 800b3e6:	d003      	beq.n	800b3f0 <__lo0bits+0x56>
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	4770      	bx	lr
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	4770      	bx	lr
 800b3f0:	2020      	movs	r0, #32
 800b3f2:	4770      	bx	lr

0800b3f4 <__i2b>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	f7ff ff07 	bl	800b20c <_Balloc>
 800b3fe:	4602      	mov	r2, r0
 800b400:	b928      	cbnz	r0, 800b40e <__i2b+0x1a>
 800b402:	4b05      	ldr	r3, [pc, #20]	@ (800b418 <__i2b+0x24>)
 800b404:	4805      	ldr	r0, [pc, #20]	@ (800b41c <__i2b+0x28>)
 800b406:	f240 1145 	movw	r1, #325	@ 0x145
 800b40a:	f000 fd09 	bl	800be20 <__assert_func>
 800b40e:	2301      	movs	r3, #1
 800b410:	6144      	str	r4, [r0, #20]
 800b412:	6103      	str	r3, [r0, #16]
 800b414:	bd10      	pop	{r4, pc}
 800b416:	bf00      	nop
 800b418:	0800c1a4 	.word	0x0800c1a4
 800b41c:	0800c1b5 	.word	0x0800c1b5

0800b420 <__multiply>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	4617      	mov	r7, r2
 800b426:	690a      	ldr	r2, [r1, #16]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	bfa8      	it	ge
 800b42e:	463b      	movge	r3, r7
 800b430:	4689      	mov	r9, r1
 800b432:	bfa4      	itt	ge
 800b434:	460f      	movge	r7, r1
 800b436:	4699      	movge	r9, r3
 800b438:	693d      	ldr	r5, [r7, #16]
 800b43a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	eb05 060a 	add.w	r6, r5, sl
 800b446:	42b3      	cmp	r3, r6
 800b448:	b085      	sub	sp, #20
 800b44a:	bfb8      	it	lt
 800b44c:	3101      	addlt	r1, #1
 800b44e:	f7ff fedd 	bl	800b20c <_Balloc>
 800b452:	b930      	cbnz	r0, 800b462 <__multiply+0x42>
 800b454:	4602      	mov	r2, r0
 800b456:	4b41      	ldr	r3, [pc, #260]	@ (800b55c <__multiply+0x13c>)
 800b458:	4841      	ldr	r0, [pc, #260]	@ (800b560 <__multiply+0x140>)
 800b45a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b45e:	f000 fcdf 	bl	800be20 <__assert_func>
 800b462:	f100 0414 	add.w	r4, r0, #20
 800b466:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b46a:	4623      	mov	r3, r4
 800b46c:	2200      	movs	r2, #0
 800b46e:	4573      	cmp	r3, lr
 800b470:	d320      	bcc.n	800b4b4 <__multiply+0x94>
 800b472:	f107 0814 	add.w	r8, r7, #20
 800b476:	f109 0114 	add.w	r1, r9, #20
 800b47a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b47e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b482:	9302      	str	r3, [sp, #8]
 800b484:	1beb      	subs	r3, r5, r7
 800b486:	3b15      	subs	r3, #21
 800b488:	f023 0303 	bic.w	r3, r3, #3
 800b48c:	3304      	adds	r3, #4
 800b48e:	3715      	adds	r7, #21
 800b490:	42bd      	cmp	r5, r7
 800b492:	bf38      	it	cc
 800b494:	2304      	movcc	r3, #4
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	9b02      	ldr	r3, [sp, #8]
 800b49a:	9103      	str	r1, [sp, #12]
 800b49c:	428b      	cmp	r3, r1
 800b49e:	d80c      	bhi.n	800b4ba <__multiply+0x9a>
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	dd03      	ble.n	800b4ac <__multiply+0x8c>
 800b4a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d055      	beq.n	800b558 <__multiply+0x138>
 800b4ac:	6106      	str	r6, [r0, #16]
 800b4ae:	b005      	add	sp, #20
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b4:	f843 2b04 	str.w	r2, [r3], #4
 800b4b8:	e7d9      	b.n	800b46e <__multiply+0x4e>
 800b4ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800b4be:	f1ba 0f00 	cmp.w	sl, #0
 800b4c2:	d01f      	beq.n	800b504 <__multiply+0xe4>
 800b4c4:	46c4      	mov	ip, r8
 800b4c6:	46a1      	mov	r9, r4
 800b4c8:	2700      	movs	r7, #0
 800b4ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4ce:	f8d9 3000 	ldr.w	r3, [r9]
 800b4d2:	fa1f fb82 	uxth.w	fp, r2
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b4dc:	443b      	add	r3, r7
 800b4de:	f8d9 7000 	ldr.w	r7, [r9]
 800b4e2:	0c12      	lsrs	r2, r2, #16
 800b4e4:	0c3f      	lsrs	r7, r7, #16
 800b4e6:	fb0a 7202 	mla	r2, sl, r2, r7
 800b4ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f4:	4565      	cmp	r5, ip
 800b4f6:	f849 3b04 	str.w	r3, [r9], #4
 800b4fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b4fe:	d8e4      	bhi.n	800b4ca <__multiply+0xaa>
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	50e7      	str	r7, [r4, r3]
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b50a:	3104      	adds	r1, #4
 800b50c:	f1b9 0f00 	cmp.w	r9, #0
 800b510:	d020      	beq.n	800b554 <__multiply+0x134>
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	4647      	mov	r7, r8
 800b516:	46a4      	mov	ip, r4
 800b518:	f04f 0a00 	mov.w	sl, #0
 800b51c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b520:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b524:	fb09 220b 	mla	r2, r9, fp, r2
 800b528:	4452      	add	r2, sl
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b530:	f84c 3b04 	str.w	r3, [ip], #4
 800b534:	f857 3b04 	ldr.w	r3, [r7], #4
 800b538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b53c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b540:	fb09 330a 	mla	r3, r9, sl, r3
 800b544:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b548:	42bd      	cmp	r5, r7
 800b54a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b54e:	d8e5      	bhi.n	800b51c <__multiply+0xfc>
 800b550:	9a01      	ldr	r2, [sp, #4]
 800b552:	50a3      	str	r3, [r4, r2]
 800b554:	3404      	adds	r4, #4
 800b556:	e79f      	b.n	800b498 <__multiply+0x78>
 800b558:	3e01      	subs	r6, #1
 800b55a:	e7a1      	b.n	800b4a0 <__multiply+0x80>
 800b55c:	0800c1a4 	.word	0x0800c1a4
 800b560:	0800c1b5 	.word	0x0800c1b5

0800b564 <__pow5mult>:
 800b564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b568:	4615      	mov	r5, r2
 800b56a:	f012 0203 	ands.w	r2, r2, #3
 800b56e:	4607      	mov	r7, r0
 800b570:	460e      	mov	r6, r1
 800b572:	d007      	beq.n	800b584 <__pow5mult+0x20>
 800b574:	4c25      	ldr	r4, [pc, #148]	@ (800b60c <__pow5mult+0xa8>)
 800b576:	3a01      	subs	r2, #1
 800b578:	2300      	movs	r3, #0
 800b57a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b57e:	f7ff fea7 	bl	800b2d0 <__multadd>
 800b582:	4606      	mov	r6, r0
 800b584:	10ad      	asrs	r5, r5, #2
 800b586:	d03d      	beq.n	800b604 <__pow5mult+0xa0>
 800b588:	69fc      	ldr	r4, [r7, #28]
 800b58a:	b97c      	cbnz	r4, 800b5ac <__pow5mult+0x48>
 800b58c:	2010      	movs	r0, #16
 800b58e:	f7ff fd87 	bl	800b0a0 <malloc>
 800b592:	4602      	mov	r2, r0
 800b594:	61f8      	str	r0, [r7, #28]
 800b596:	b928      	cbnz	r0, 800b5a4 <__pow5mult+0x40>
 800b598:	4b1d      	ldr	r3, [pc, #116]	@ (800b610 <__pow5mult+0xac>)
 800b59a:	481e      	ldr	r0, [pc, #120]	@ (800b614 <__pow5mult+0xb0>)
 800b59c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5a0:	f000 fc3e 	bl	800be20 <__assert_func>
 800b5a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5a8:	6004      	str	r4, [r0, #0]
 800b5aa:	60c4      	str	r4, [r0, #12]
 800b5ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b5b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5b4:	b94c      	cbnz	r4, 800b5ca <__pow5mult+0x66>
 800b5b6:	f240 2171 	movw	r1, #625	@ 0x271
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	f7ff ff1a 	bl	800b3f4 <__i2b>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	6003      	str	r3, [r0, #0]
 800b5ca:	f04f 0900 	mov.w	r9, #0
 800b5ce:	07eb      	lsls	r3, r5, #31
 800b5d0:	d50a      	bpl.n	800b5e8 <__pow5mult+0x84>
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f7ff ff22 	bl	800b420 <__multiply>
 800b5dc:	4631      	mov	r1, r6
 800b5de:	4680      	mov	r8, r0
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff fe53 	bl	800b28c <_Bfree>
 800b5e6:	4646      	mov	r6, r8
 800b5e8:	106d      	asrs	r5, r5, #1
 800b5ea:	d00b      	beq.n	800b604 <__pow5mult+0xa0>
 800b5ec:	6820      	ldr	r0, [r4, #0]
 800b5ee:	b938      	cbnz	r0, 800b600 <__pow5mult+0x9c>
 800b5f0:	4622      	mov	r2, r4
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff ff13 	bl	800b420 <__multiply>
 800b5fa:	6020      	str	r0, [r4, #0]
 800b5fc:	f8c0 9000 	str.w	r9, [r0]
 800b600:	4604      	mov	r4, r0
 800b602:	e7e4      	b.n	800b5ce <__pow5mult+0x6a>
 800b604:	4630      	mov	r0, r6
 800b606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60a:	bf00      	nop
 800b60c:	0800c268 	.word	0x0800c268
 800b610:	0800c135 	.word	0x0800c135
 800b614:	0800c1b5 	.word	0x0800c1b5

0800b618 <__lshift>:
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	460c      	mov	r4, r1
 800b61e:	6849      	ldr	r1, [r1, #4]
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	4607      	mov	r7, r0
 800b62a:	4691      	mov	r9, r2
 800b62c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b630:	f108 0601 	add.w	r6, r8, #1
 800b634:	42b3      	cmp	r3, r6
 800b636:	db0b      	blt.n	800b650 <__lshift+0x38>
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff fde7 	bl	800b20c <_Balloc>
 800b63e:	4605      	mov	r5, r0
 800b640:	b948      	cbnz	r0, 800b656 <__lshift+0x3e>
 800b642:	4602      	mov	r2, r0
 800b644:	4b28      	ldr	r3, [pc, #160]	@ (800b6e8 <__lshift+0xd0>)
 800b646:	4829      	ldr	r0, [pc, #164]	@ (800b6ec <__lshift+0xd4>)
 800b648:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b64c:	f000 fbe8 	bl	800be20 <__assert_func>
 800b650:	3101      	adds	r1, #1
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	e7ee      	b.n	800b634 <__lshift+0x1c>
 800b656:	2300      	movs	r3, #0
 800b658:	f100 0114 	add.w	r1, r0, #20
 800b65c:	f100 0210 	add.w	r2, r0, #16
 800b660:	4618      	mov	r0, r3
 800b662:	4553      	cmp	r3, sl
 800b664:	db33      	blt.n	800b6ce <__lshift+0xb6>
 800b666:	6920      	ldr	r0, [r4, #16]
 800b668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b66c:	f104 0314 	add.w	r3, r4, #20
 800b670:	f019 091f 	ands.w	r9, r9, #31
 800b674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b67c:	d02b      	beq.n	800b6d6 <__lshift+0xbe>
 800b67e:	f1c9 0e20 	rsb	lr, r9, #32
 800b682:	468a      	mov	sl, r1
 800b684:	2200      	movs	r2, #0
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	fa00 f009 	lsl.w	r0, r0, r9
 800b68c:	4310      	orrs	r0, r2
 800b68e:	f84a 0b04 	str.w	r0, [sl], #4
 800b692:	f853 2b04 	ldr.w	r2, [r3], #4
 800b696:	459c      	cmp	ip, r3
 800b698:	fa22 f20e 	lsr.w	r2, r2, lr
 800b69c:	d8f3      	bhi.n	800b686 <__lshift+0x6e>
 800b69e:	ebac 0304 	sub.w	r3, ip, r4
 800b6a2:	3b15      	subs	r3, #21
 800b6a4:	f023 0303 	bic.w	r3, r3, #3
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	f104 0015 	add.w	r0, r4, #21
 800b6ae:	4560      	cmp	r0, ip
 800b6b0:	bf88      	it	hi
 800b6b2:	2304      	movhi	r3, #4
 800b6b4:	50ca      	str	r2, [r1, r3]
 800b6b6:	b10a      	cbz	r2, 800b6bc <__lshift+0xa4>
 800b6b8:	f108 0602 	add.w	r6, r8, #2
 800b6bc:	3e01      	subs	r6, #1
 800b6be:	4638      	mov	r0, r7
 800b6c0:	612e      	str	r6, [r5, #16]
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	f7ff fde2 	bl	800b28c <_Bfree>
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	e7c5      	b.n	800b662 <__lshift+0x4a>
 800b6d6:	3904      	subs	r1, #4
 800b6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e0:	459c      	cmp	ip, r3
 800b6e2:	d8f9      	bhi.n	800b6d8 <__lshift+0xc0>
 800b6e4:	e7ea      	b.n	800b6bc <__lshift+0xa4>
 800b6e6:	bf00      	nop
 800b6e8:	0800c1a4 	.word	0x0800c1a4
 800b6ec:	0800c1b5 	.word	0x0800c1b5

0800b6f0 <__mcmp>:
 800b6f0:	690a      	ldr	r2, [r1, #16]
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	6900      	ldr	r0, [r0, #16]
 800b6f6:	1a80      	subs	r0, r0, r2
 800b6f8:	b530      	push	{r4, r5, lr}
 800b6fa:	d10e      	bne.n	800b71a <__mcmp+0x2a>
 800b6fc:	3314      	adds	r3, #20
 800b6fe:	3114      	adds	r1, #20
 800b700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b70c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b710:	4295      	cmp	r5, r2
 800b712:	d003      	beq.n	800b71c <__mcmp+0x2c>
 800b714:	d205      	bcs.n	800b722 <__mcmp+0x32>
 800b716:	f04f 30ff 	mov.w	r0, #4294967295
 800b71a:	bd30      	pop	{r4, r5, pc}
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	d3f3      	bcc.n	800b708 <__mcmp+0x18>
 800b720:	e7fb      	b.n	800b71a <__mcmp+0x2a>
 800b722:	2001      	movs	r0, #1
 800b724:	e7f9      	b.n	800b71a <__mcmp+0x2a>
	...

0800b728 <__mdiff>:
 800b728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	4689      	mov	r9, r1
 800b72e:	4606      	mov	r6, r0
 800b730:	4611      	mov	r1, r2
 800b732:	4648      	mov	r0, r9
 800b734:	4614      	mov	r4, r2
 800b736:	f7ff ffdb 	bl	800b6f0 <__mcmp>
 800b73a:	1e05      	subs	r5, r0, #0
 800b73c:	d112      	bne.n	800b764 <__mdiff+0x3c>
 800b73e:	4629      	mov	r1, r5
 800b740:	4630      	mov	r0, r6
 800b742:	f7ff fd63 	bl	800b20c <_Balloc>
 800b746:	4602      	mov	r2, r0
 800b748:	b928      	cbnz	r0, 800b756 <__mdiff+0x2e>
 800b74a:	4b3f      	ldr	r3, [pc, #252]	@ (800b848 <__mdiff+0x120>)
 800b74c:	f240 2137 	movw	r1, #567	@ 0x237
 800b750:	483e      	ldr	r0, [pc, #248]	@ (800b84c <__mdiff+0x124>)
 800b752:	f000 fb65 	bl	800be20 <__assert_func>
 800b756:	2301      	movs	r3, #1
 800b758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b75c:	4610      	mov	r0, r2
 800b75e:	b003      	add	sp, #12
 800b760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b764:	bfbc      	itt	lt
 800b766:	464b      	movlt	r3, r9
 800b768:	46a1      	movlt	r9, r4
 800b76a:	4630      	mov	r0, r6
 800b76c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b770:	bfba      	itte	lt
 800b772:	461c      	movlt	r4, r3
 800b774:	2501      	movlt	r5, #1
 800b776:	2500      	movge	r5, #0
 800b778:	f7ff fd48 	bl	800b20c <_Balloc>
 800b77c:	4602      	mov	r2, r0
 800b77e:	b918      	cbnz	r0, 800b788 <__mdiff+0x60>
 800b780:	4b31      	ldr	r3, [pc, #196]	@ (800b848 <__mdiff+0x120>)
 800b782:	f240 2145 	movw	r1, #581	@ 0x245
 800b786:	e7e3      	b.n	800b750 <__mdiff+0x28>
 800b788:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b78c:	6926      	ldr	r6, [r4, #16]
 800b78e:	60c5      	str	r5, [r0, #12]
 800b790:	f109 0310 	add.w	r3, r9, #16
 800b794:	f109 0514 	add.w	r5, r9, #20
 800b798:	f104 0e14 	add.w	lr, r4, #20
 800b79c:	f100 0b14 	add.w	fp, r0, #20
 800b7a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	46d9      	mov	r9, fp
 800b7ac:	f04f 0c00 	mov.w	ip, #0
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b7b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	fa1f f38a 	uxth.w	r3, sl
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	b283      	uxth	r3, r0
 800b7c4:	1acb      	subs	r3, r1, r3
 800b7c6:	0c00      	lsrs	r0, r0, #16
 800b7c8:	4463      	add	r3, ip
 800b7ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b7ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b7d8:	4576      	cmp	r6, lr
 800b7da:	f849 3b04 	str.w	r3, [r9], #4
 800b7de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7e2:	d8e5      	bhi.n	800b7b0 <__mdiff+0x88>
 800b7e4:	1b33      	subs	r3, r6, r4
 800b7e6:	3b15      	subs	r3, #21
 800b7e8:	f023 0303 	bic.w	r3, r3, #3
 800b7ec:	3415      	adds	r4, #21
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	42a6      	cmp	r6, r4
 800b7f2:	bf38      	it	cc
 800b7f4:	2304      	movcc	r3, #4
 800b7f6:	441d      	add	r5, r3
 800b7f8:	445b      	add	r3, fp
 800b7fa:	461e      	mov	r6, r3
 800b7fc:	462c      	mov	r4, r5
 800b7fe:	4544      	cmp	r4, r8
 800b800:	d30e      	bcc.n	800b820 <__mdiff+0xf8>
 800b802:	f108 0103 	add.w	r1, r8, #3
 800b806:	1b49      	subs	r1, r1, r5
 800b808:	f021 0103 	bic.w	r1, r1, #3
 800b80c:	3d03      	subs	r5, #3
 800b80e:	45a8      	cmp	r8, r5
 800b810:	bf38      	it	cc
 800b812:	2100      	movcc	r1, #0
 800b814:	440b      	add	r3, r1
 800b816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b81a:	b191      	cbz	r1, 800b842 <__mdiff+0x11a>
 800b81c:	6117      	str	r7, [r2, #16]
 800b81e:	e79d      	b.n	800b75c <__mdiff+0x34>
 800b820:	f854 1b04 	ldr.w	r1, [r4], #4
 800b824:	46e6      	mov	lr, ip
 800b826:	0c08      	lsrs	r0, r1, #16
 800b828:	fa1c fc81 	uxtah	ip, ip, r1
 800b82c:	4471      	add	r1, lr
 800b82e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b832:	b289      	uxth	r1, r1
 800b834:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b838:	f846 1b04 	str.w	r1, [r6], #4
 800b83c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b840:	e7dd      	b.n	800b7fe <__mdiff+0xd6>
 800b842:	3f01      	subs	r7, #1
 800b844:	e7e7      	b.n	800b816 <__mdiff+0xee>
 800b846:	bf00      	nop
 800b848:	0800c1a4 	.word	0x0800c1a4
 800b84c:	0800c1b5 	.word	0x0800c1b5

0800b850 <__d2b>:
 800b850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b854:	460f      	mov	r7, r1
 800b856:	2101      	movs	r1, #1
 800b858:	ec59 8b10 	vmov	r8, r9, d0
 800b85c:	4616      	mov	r6, r2
 800b85e:	f7ff fcd5 	bl	800b20c <_Balloc>
 800b862:	4604      	mov	r4, r0
 800b864:	b930      	cbnz	r0, 800b874 <__d2b+0x24>
 800b866:	4602      	mov	r2, r0
 800b868:	4b23      	ldr	r3, [pc, #140]	@ (800b8f8 <__d2b+0xa8>)
 800b86a:	4824      	ldr	r0, [pc, #144]	@ (800b8fc <__d2b+0xac>)
 800b86c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b870:	f000 fad6 	bl	800be20 <__assert_func>
 800b874:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b87c:	b10d      	cbz	r5, 800b882 <__d2b+0x32>
 800b87e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b882:	9301      	str	r3, [sp, #4]
 800b884:	f1b8 0300 	subs.w	r3, r8, #0
 800b888:	d023      	beq.n	800b8d2 <__d2b+0x82>
 800b88a:	4668      	mov	r0, sp
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	f7ff fd84 	bl	800b39a <__lo0bits>
 800b892:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b896:	b1d0      	cbz	r0, 800b8ce <__d2b+0x7e>
 800b898:	f1c0 0320 	rsb	r3, r0, #32
 800b89c:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	40c2      	lsrs	r2, r0
 800b8a4:	6163      	str	r3, [r4, #20]
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	61a3      	str	r3, [r4, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	bf0c      	ite	eq
 800b8b0:	2201      	moveq	r2, #1
 800b8b2:	2202      	movne	r2, #2
 800b8b4:	6122      	str	r2, [r4, #16]
 800b8b6:	b1a5      	cbz	r5, 800b8e2 <__d2b+0x92>
 800b8b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b8bc:	4405      	add	r5, r0
 800b8be:	603d      	str	r5, [r7, #0]
 800b8c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8c4:	6030      	str	r0, [r6, #0]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	b003      	add	sp, #12
 800b8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	6161      	str	r1, [r4, #20]
 800b8d0:	e7ea      	b.n	800b8a8 <__d2b+0x58>
 800b8d2:	a801      	add	r0, sp, #4
 800b8d4:	f7ff fd61 	bl	800b39a <__lo0bits>
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	6163      	str	r3, [r4, #20]
 800b8dc:	3020      	adds	r0, #32
 800b8de:	2201      	movs	r2, #1
 800b8e0:	e7e8      	b.n	800b8b4 <__d2b+0x64>
 800b8e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b8ea:	6038      	str	r0, [r7, #0]
 800b8ec:	6918      	ldr	r0, [r3, #16]
 800b8ee:	f7ff fd35 	bl	800b35c <__hi0bits>
 800b8f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8f6:	e7e5      	b.n	800b8c4 <__d2b+0x74>
 800b8f8:	0800c1a4 	.word	0x0800c1a4
 800b8fc:	0800c1b5 	.word	0x0800c1b5

0800b900 <__sfputc_r>:
 800b900:	6893      	ldr	r3, [r2, #8]
 800b902:	3b01      	subs	r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	b410      	push	{r4}
 800b908:	6093      	str	r3, [r2, #8]
 800b90a:	da08      	bge.n	800b91e <__sfputc_r+0x1e>
 800b90c:	6994      	ldr	r4, [r2, #24]
 800b90e:	42a3      	cmp	r3, r4
 800b910:	db01      	blt.n	800b916 <__sfputc_r+0x16>
 800b912:	290a      	cmp	r1, #10
 800b914:	d103      	bne.n	800b91e <__sfputc_r+0x1e>
 800b916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b91a:	f7fe bc7c 	b.w	800a216 <__swbuf_r>
 800b91e:	6813      	ldr	r3, [r2, #0]
 800b920:	1c58      	adds	r0, r3, #1
 800b922:	6010      	str	r0, [r2, #0]
 800b924:	7019      	strb	r1, [r3, #0]
 800b926:	4608      	mov	r0, r1
 800b928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <__sfputs_r>:
 800b92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b930:	4606      	mov	r6, r0
 800b932:	460f      	mov	r7, r1
 800b934:	4614      	mov	r4, r2
 800b936:	18d5      	adds	r5, r2, r3
 800b938:	42ac      	cmp	r4, r5
 800b93a:	d101      	bne.n	800b940 <__sfputs_r+0x12>
 800b93c:	2000      	movs	r0, #0
 800b93e:	e007      	b.n	800b950 <__sfputs_r+0x22>
 800b940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b944:	463a      	mov	r2, r7
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff ffda 	bl	800b900 <__sfputc_r>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d1f3      	bne.n	800b938 <__sfputs_r+0xa>
 800b950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b954 <_vfiprintf_r>:
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	460d      	mov	r5, r1
 800b95a:	b09d      	sub	sp, #116	@ 0x74
 800b95c:	4614      	mov	r4, r2
 800b95e:	4698      	mov	r8, r3
 800b960:	4606      	mov	r6, r0
 800b962:	b118      	cbz	r0, 800b96c <_vfiprintf_r+0x18>
 800b964:	6a03      	ldr	r3, [r0, #32]
 800b966:	b90b      	cbnz	r3, 800b96c <_vfiprintf_r+0x18>
 800b968:	f7fe fb6c 	bl	800a044 <__sinit>
 800b96c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b96e:	07d9      	lsls	r1, r3, #31
 800b970:	d405      	bmi.n	800b97e <_vfiprintf_r+0x2a>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	059a      	lsls	r2, r3, #22
 800b976:	d402      	bmi.n	800b97e <_vfiprintf_r+0x2a>
 800b978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b97a:	f7fe fd5e 	bl	800a43a <__retarget_lock_acquire_recursive>
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	071b      	lsls	r3, r3, #28
 800b982:	d501      	bpl.n	800b988 <_vfiprintf_r+0x34>
 800b984:	692b      	ldr	r3, [r5, #16]
 800b986:	b99b      	cbnz	r3, 800b9b0 <_vfiprintf_r+0x5c>
 800b988:	4629      	mov	r1, r5
 800b98a:	4630      	mov	r0, r6
 800b98c:	f7fe fc82 	bl	800a294 <__swsetup_r>
 800b990:	b170      	cbz	r0, 800b9b0 <_vfiprintf_r+0x5c>
 800b992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b994:	07dc      	lsls	r4, r3, #31
 800b996:	d504      	bpl.n	800b9a2 <_vfiprintf_r+0x4e>
 800b998:	f04f 30ff 	mov.w	r0, #4294967295
 800b99c:	b01d      	add	sp, #116	@ 0x74
 800b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	0598      	lsls	r0, r3, #22
 800b9a6:	d4f7      	bmi.n	800b998 <_vfiprintf_r+0x44>
 800b9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9aa:	f7fe fd47 	bl	800a43c <__retarget_lock_release_recursive>
 800b9ae:	e7f3      	b.n	800b998 <_vfiprintf_r+0x44>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b4:	2320      	movs	r3, #32
 800b9b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9be:	2330      	movs	r3, #48	@ 0x30
 800b9c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb70 <_vfiprintf_r+0x21c>
 800b9c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9c8:	f04f 0901 	mov.w	r9, #1
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	469a      	mov	sl, r3
 800b9d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d4:	b10a      	cbz	r2, 800b9da <_vfiprintf_r+0x86>
 800b9d6:	2a25      	cmp	r2, #37	@ 0x25
 800b9d8:	d1f9      	bne.n	800b9ce <_vfiprintf_r+0x7a>
 800b9da:	ebba 0b04 	subs.w	fp, sl, r4
 800b9de:	d00b      	beq.n	800b9f8 <_vfiprintf_r+0xa4>
 800b9e0:	465b      	mov	r3, fp
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7ff ffa1 	bl	800b92e <__sfputs_r>
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	f000 80a7 	beq.w	800bb40 <_vfiprintf_r+0x1ec>
 800b9f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f4:	445a      	add	r2, fp
 800b9f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 809f 	beq.w	800bb40 <_vfiprintf_r+0x1ec>
 800ba02:	2300      	movs	r3, #0
 800ba04:	f04f 32ff 	mov.w	r2, #4294967295
 800ba08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba0c:	f10a 0a01 	add.w	sl, sl, #1
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	9307      	str	r3, [sp, #28]
 800ba14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba18:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba1a:	4654      	mov	r4, sl
 800ba1c:	2205      	movs	r2, #5
 800ba1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba22:	4853      	ldr	r0, [pc, #332]	@ (800bb70 <_vfiprintf_r+0x21c>)
 800ba24:	f7f4 fc84 	bl	8000330 <memchr>
 800ba28:	9a04      	ldr	r2, [sp, #16]
 800ba2a:	b9d8      	cbnz	r0, 800ba64 <_vfiprintf_r+0x110>
 800ba2c:	06d1      	lsls	r1, r2, #27
 800ba2e:	bf44      	itt	mi
 800ba30:	2320      	movmi	r3, #32
 800ba32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba36:	0713      	lsls	r3, r2, #28
 800ba38:	bf44      	itt	mi
 800ba3a:	232b      	movmi	r3, #43	@ 0x2b
 800ba3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba40:	f89a 3000 	ldrb.w	r3, [sl]
 800ba44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba46:	d015      	beq.n	800ba74 <_vfiprintf_r+0x120>
 800ba48:	9a07      	ldr	r2, [sp, #28]
 800ba4a:	4654      	mov	r4, sl
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	f04f 0c0a 	mov.w	ip, #10
 800ba52:	4621      	mov	r1, r4
 800ba54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba58:	3b30      	subs	r3, #48	@ 0x30
 800ba5a:	2b09      	cmp	r3, #9
 800ba5c:	d94b      	bls.n	800baf6 <_vfiprintf_r+0x1a2>
 800ba5e:	b1b0      	cbz	r0, 800ba8e <_vfiprintf_r+0x13a>
 800ba60:	9207      	str	r2, [sp, #28]
 800ba62:	e014      	b.n	800ba8e <_vfiprintf_r+0x13a>
 800ba64:	eba0 0308 	sub.w	r3, r0, r8
 800ba68:	fa09 f303 	lsl.w	r3, r9, r3
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	9304      	str	r3, [sp, #16]
 800ba70:	46a2      	mov	sl, r4
 800ba72:	e7d2      	b.n	800ba1a <_vfiprintf_r+0xc6>
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	1d19      	adds	r1, r3, #4
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	9103      	str	r1, [sp, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bfbb      	ittet	lt
 800ba80:	425b      	neglt	r3, r3
 800ba82:	f042 0202 	orrlt.w	r2, r2, #2
 800ba86:	9307      	strge	r3, [sp, #28]
 800ba88:	9307      	strlt	r3, [sp, #28]
 800ba8a:	bfb8      	it	lt
 800ba8c:	9204      	strlt	r2, [sp, #16]
 800ba8e:	7823      	ldrb	r3, [r4, #0]
 800ba90:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba92:	d10a      	bne.n	800baaa <_vfiprintf_r+0x156>
 800ba94:	7863      	ldrb	r3, [r4, #1]
 800ba96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba98:	d132      	bne.n	800bb00 <_vfiprintf_r+0x1ac>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	1d1a      	adds	r2, r3, #4
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	9203      	str	r2, [sp, #12]
 800baa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800baa6:	3402      	adds	r4, #2
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb80 <_vfiprintf_r+0x22c>
 800baae:	7821      	ldrb	r1, [r4, #0]
 800bab0:	2203      	movs	r2, #3
 800bab2:	4650      	mov	r0, sl
 800bab4:	f7f4 fc3c 	bl	8000330 <memchr>
 800bab8:	b138      	cbz	r0, 800baca <_vfiprintf_r+0x176>
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	eba0 000a 	sub.w	r0, r0, sl
 800bac0:	2240      	movs	r2, #64	@ 0x40
 800bac2:	4082      	lsls	r2, r0
 800bac4:	4313      	orrs	r3, r2
 800bac6:	3401      	adds	r4, #1
 800bac8:	9304      	str	r3, [sp, #16]
 800baca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bace:	4829      	ldr	r0, [pc, #164]	@ (800bb74 <_vfiprintf_r+0x220>)
 800bad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bad4:	2206      	movs	r2, #6
 800bad6:	f7f4 fc2b 	bl	8000330 <memchr>
 800bada:	2800      	cmp	r0, #0
 800badc:	d03f      	beq.n	800bb5e <_vfiprintf_r+0x20a>
 800bade:	4b26      	ldr	r3, [pc, #152]	@ (800bb78 <_vfiprintf_r+0x224>)
 800bae0:	bb1b      	cbnz	r3, 800bb2a <_vfiprintf_r+0x1d6>
 800bae2:	9b03      	ldr	r3, [sp, #12]
 800bae4:	3307      	adds	r3, #7
 800bae6:	f023 0307 	bic.w	r3, r3, #7
 800baea:	3308      	adds	r3, #8
 800baec:	9303      	str	r3, [sp, #12]
 800baee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf0:	443b      	add	r3, r7
 800baf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf4:	e76a      	b.n	800b9cc <_vfiprintf_r+0x78>
 800baf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bafa:	460c      	mov	r4, r1
 800bafc:	2001      	movs	r0, #1
 800bafe:	e7a8      	b.n	800ba52 <_vfiprintf_r+0xfe>
 800bb00:	2300      	movs	r3, #0
 800bb02:	3401      	adds	r4, #1
 800bb04:	9305      	str	r3, [sp, #20]
 800bb06:	4619      	mov	r1, r3
 800bb08:	f04f 0c0a 	mov.w	ip, #10
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb12:	3a30      	subs	r2, #48	@ 0x30
 800bb14:	2a09      	cmp	r2, #9
 800bb16:	d903      	bls.n	800bb20 <_vfiprintf_r+0x1cc>
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d0c6      	beq.n	800baaa <_vfiprintf_r+0x156>
 800bb1c:	9105      	str	r1, [sp, #20]
 800bb1e:	e7c4      	b.n	800baaa <_vfiprintf_r+0x156>
 800bb20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb24:	4604      	mov	r4, r0
 800bb26:	2301      	movs	r3, #1
 800bb28:	e7f0      	b.n	800bb0c <_vfiprintf_r+0x1b8>
 800bb2a:	ab03      	add	r3, sp, #12
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	462a      	mov	r2, r5
 800bb30:	4b12      	ldr	r3, [pc, #72]	@ (800bb7c <_vfiprintf_r+0x228>)
 800bb32:	a904      	add	r1, sp, #16
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7fd fe53 	bl	80097e0 <_printf_float>
 800bb3a:	4607      	mov	r7, r0
 800bb3c:	1c78      	adds	r0, r7, #1
 800bb3e:	d1d6      	bne.n	800baee <_vfiprintf_r+0x19a>
 800bb40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb42:	07d9      	lsls	r1, r3, #31
 800bb44:	d405      	bmi.n	800bb52 <_vfiprintf_r+0x1fe>
 800bb46:	89ab      	ldrh	r3, [r5, #12]
 800bb48:	059a      	lsls	r2, r3, #22
 800bb4a:	d402      	bmi.n	800bb52 <_vfiprintf_r+0x1fe>
 800bb4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb4e:	f7fe fc75 	bl	800a43c <__retarget_lock_release_recursive>
 800bb52:	89ab      	ldrh	r3, [r5, #12]
 800bb54:	065b      	lsls	r3, r3, #25
 800bb56:	f53f af1f 	bmi.w	800b998 <_vfiprintf_r+0x44>
 800bb5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb5c:	e71e      	b.n	800b99c <_vfiprintf_r+0x48>
 800bb5e:	ab03      	add	r3, sp, #12
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	462a      	mov	r2, r5
 800bb64:	4b05      	ldr	r3, [pc, #20]	@ (800bb7c <_vfiprintf_r+0x228>)
 800bb66:	a904      	add	r1, sp, #16
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7fe f8c1 	bl	8009cf0 <_printf_i>
 800bb6e:	e7e4      	b.n	800bb3a <_vfiprintf_r+0x1e6>
 800bb70:	0800c20e 	.word	0x0800c20e
 800bb74:	0800c218 	.word	0x0800c218
 800bb78:	080097e1 	.word	0x080097e1
 800bb7c:	0800b92f 	.word	0x0800b92f
 800bb80:	0800c214 	.word	0x0800c214

0800bb84 <__sflush_r>:
 800bb84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8c:	0716      	lsls	r6, r2, #28
 800bb8e:	4605      	mov	r5, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	d454      	bmi.n	800bc3e <__sflush_r+0xba>
 800bb94:	684b      	ldr	r3, [r1, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dc02      	bgt.n	800bba0 <__sflush_r+0x1c>
 800bb9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	dd48      	ble.n	800bc32 <__sflush_r+0xae>
 800bba0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bba2:	2e00      	cmp	r6, #0
 800bba4:	d045      	beq.n	800bc32 <__sflush_r+0xae>
 800bba6:	2300      	movs	r3, #0
 800bba8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bbac:	682f      	ldr	r7, [r5, #0]
 800bbae:	6a21      	ldr	r1, [r4, #32]
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	d030      	beq.n	800bc16 <__sflush_r+0x92>
 800bbb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	0759      	lsls	r1, r3, #29
 800bbba:	d505      	bpl.n	800bbc8 <__sflush_r+0x44>
 800bbbc:	6863      	ldr	r3, [r4, #4]
 800bbbe:	1ad2      	subs	r2, r2, r3
 800bbc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbc2:	b10b      	cbz	r3, 800bbc8 <__sflush_r+0x44>
 800bbc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbc6:	1ad2      	subs	r2, r2, r3
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbcc:	6a21      	ldr	r1, [r4, #32]
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b0      	blx	r6
 800bbd2:	1c43      	adds	r3, r0, #1
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	d106      	bne.n	800bbe6 <__sflush_r+0x62>
 800bbd8:	6829      	ldr	r1, [r5, #0]
 800bbda:	291d      	cmp	r1, #29
 800bbdc:	d82b      	bhi.n	800bc36 <__sflush_r+0xb2>
 800bbde:	4a2a      	ldr	r2, [pc, #168]	@ (800bc88 <__sflush_r+0x104>)
 800bbe0:	40ca      	lsrs	r2, r1
 800bbe2:	07d6      	lsls	r6, r2, #31
 800bbe4:	d527      	bpl.n	800bc36 <__sflush_r+0xb2>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	6062      	str	r2, [r4, #4]
 800bbea:	04d9      	lsls	r1, r3, #19
 800bbec:	6922      	ldr	r2, [r4, #16]
 800bbee:	6022      	str	r2, [r4, #0]
 800bbf0:	d504      	bpl.n	800bbfc <__sflush_r+0x78>
 800bbf2:	1c42      	adds	r2, r0, #1
 800bbf4:	d101      	bne.n	800bbfa <__sflush_r+0x76>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	b903      	cbnz	r3, 800bbfc <__sflush_r+0x78>
 800bbfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbfe:	602f      	str	r7, [r5, #0]
 800bc00:	b1b9      	cbz	r1, 800bc32 <__sflush_r+0xae>
 800bc02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc06:	4299      	cmp	r1, r3
 800bc08:	d002      	beq.n	800bc10 <__sflush_r+0x8c>
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f7ff f9fe 	bl	800b00c <_free_r>
 800bc10:	2300      	movs	r3, #0
 800bc12:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc14:	e00d      	b.n	800bc32 <__sflush_r+0xae>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4628      	mov	r0, r5
 800bc1a:	47b0      	blx	r6
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	1c50      	adds	r0, r2, #1
 800bc20:	d1c9      	bne.n	800bbb6 <__sflush_r+0x32>
 800bc22:	682b      	ldr	r3, [r5, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0c6      	beq.n	800bbb6 <__sflush_r+0x32>
 800bc28:	2b1d      	cmp	r3, #29
 800bc2a:	d001      	beq.n	800bc30 <__sflush_r+0xac>
 800bc2c:	2b16      	cmp	r3, #22
 800bc2e:	d11e      	bne.n	800bc6e <__sflush_r+0xea>
 800bc30:	602f      	str	r7, [r5, #0]
 800bc32:	2000      	movs	r0, #0
 800bc34:	e022      	b.n	800bc7c <__sflush_r+0xf8>
 800bc36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc3a:	b21b      	sxth	r3, r3
 800bc3c:	e01b      	b.n	800bc76 <__sflush_r+0xf2>
 800bc3e:	690f      	ldr	r7, [r1, #16]
 800bc40:	2f00      	cmp	r7, #0
 800bc42:	d0f6      	beq.n	800bc32 <__sflush_r+0xae>
 800bc44:	0793      	lsls	r3, r2, #30
 800bc46:	680e      	ldr	r6, [r1, #0]
 800bc48:	bf08      	it	eq
 800bc4a:	694b      	ldreq	r3, [r1, #20]
 800bc4c:	600f      	str	r7, [r1, #0]
 800bc4e:	bf18      	it	ne
 800bc50:	2300      	movne	r3, #0
 800bc52:	eba6 0807 	sub.w	r8, r6, r7
 800bc56:	608b      	str	r3, [r1, #8]
 800bc58:	f1b8 0f00 	cmp.w	r8, #0
 800bc5c:	dde9      	ble.n	800bc32 <__sflush_r+0xae>
 800bc5e:	6a21      	ldr	r1, [r4, #32]
 800bc60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc62:	4643      	mov	r3, r8
 800bc64:	463a      	mov	r2, r7
 800bc66:	4628      	mov	r0, r5
 800bc68:	47b0      	blx	r6
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	dc08      	bgt.n	800bc80 <__sflush_r+0xfc>
 800bc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc80:	4407      	add	r7, r0
 800bc82:	eba8 0800 	sub.w	r8, r8, r0
 800bc86:	e7e7      	b.n	800bc58 <__sflush_r+0xd4>
 800bc88:	20400001 	.word	0x20400001

0800bc8c <_fflush_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	690b      	ldr	r3, [r1, #16]
 800bc90:	4605      	mov	r5, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	b913      	cbnz	r3, 800bc9c <_fflush_r+0x10>
 800bc96:	2500      	movs	r5, #0
 800bc98:	4628      	mov	r0, r5
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	b118      	cbz	r0, 800bca6 <_fflush_r+0x1a>
 800bc9e:	6a03      	ldr	r3, [r0, #32]
 800bca0:	b90b      	cbnz	r3, 800bca6 <_fflush_r+0x1a>
 800bca2:	f7fe f9cf 	bl	800a044 <__sinit>
 800bca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0f3      	beq.n	800bc96 <_fflush_r+0xa>
 800bcae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bcb0:	07d0      	lsls	r0, r2, #31
 800bcb2:	d404      	bmi.n	800bcbe <_fflush_r+0x32>
 800bcb4:	0599      	lsls	r1, r3, #22
 800bcb6:	d402      	bmi.n	800bcbe <_fflush_r+0x32>
 800bcb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcba:	f7fe fbbe 	bl	800a43a <__retarget_lock_acquire_recursive>
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f7ff ff5f 	bl	800bb84 <__sflush_r>
 800bcc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcc8:	07da      	lsls	r2, r3, #31
 800bcca:	4605      	mov	r5, r0
 800bccc:	d4e4      	bmi.n	800bc98 <_fflush_r+0xc>
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	059b      	lsls	r3, r3, #22
 800bcd2:	d4e1      	bmi.n	800bc98 <_fflush_r+0xc>
 800bcd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcd6:	f7fe fbb1 	bl	800a43c <__retarget_lock_release_recursive>
 800bcda:	e7dd      	b.n	800bc98 <_fflush_r+0xc>

0800bcdc <__swhatbuf_r>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	460c      	mov	r4, r1
 800bce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce4:	2900      	cmp	r1, #0
 800bce6:	b096      	sub	sp, #88	@ 0x58
 800bce8:	4615      	mov	r5, r2
 800bcea:	461e      	mov	r6, r3
 800bcec:	da0d      	bge.n	800bd0a <__swhatbuf_r+0x2e>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcf4:	f04f 0100 	mov.w	r1, #0
 800bcf8:	bf14      	ite	ne
 800bcfa:	2340      	movne	r3, #64	@ 0x40
 800bcfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd00:	2000      	movs	r0, #0
 800bd02:	6031      	str	r1, [r6, #0]
 800bd04:	602b      	str	r3, [r5, #0]
 800bd06:	b016      	add	sp, #88	@ 0x58
 800bd08:	bd70      	pop	{r4, r5, r6, pc}
 800bd0a:	466a      	mov	r2, sp
 800bd0c:	f000 f848 	bl	800bda0 <_fstat_r>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	dbec      	blt.n	800bcee <__swhatbuf_r+0x12>
 800bd14:	9901      	ldr	r1, [sp, #4]
 800bd16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd1e:	4259      	negs	r1, r3
 800bd20:	4159      	adcs	r1, r3
 800bd22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd26:	e7eb      	b.n	800bd00 <__swhatbuf_r+0x24>

0800bd28 <__smakebuf_r>:
 800bd28:	898b      	ldrh	r3, [r1, #12]
 800bd2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd2c:	079d      	lsls	r5, r3, #30
 800bd2e:	4606      	mov	r6, r0
 800bd30:	460c      	mov	r4, r1
 800bd32:	d507      	bpl.n	800bd44 <__smakebuf_r+0x1c>
 800bd34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd38:	6023      	str	r3, [r4, #0]
 800bd3a:	6123      	str	r3, [r4, #16]
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	6163      	str	r3, [r4, #20]
 800bd40:	b003      	add	sp, #12
 800bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd44:	ab01      	add	r3, sp, #4
 800bd46:	466a      	mov	r2, sp
 800bd48:	f7ff ffc8 	bl	800bcdc <__swhatbuf_r>
 800bd4c:	9f00      	ldr	r7, [sp, #0]
 800bd4e:	4605      	mov	r5, r0
 800bd50:	4639      	mov	r1, r7
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff f9ce 	bl	800b0f4 <_malloc_r>
 800bd58:	b948      	cbnz	r0, 800bd6e <__smakebuf_r+0x46>
 800bd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd5e:	059a      	lsls	r2, r3, #22
 800bd60:	d4ee      	bmi.n	800bd40 <__smakebuf_r+0x18>
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	f043 0302 	orr.w	r3, r3, #2
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	e7e2      	b.n	800bd34 <__smakebuf_r+0xc>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	6020      	str	r0, [r4, #0]
 800bd72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd76:	81a3      	strh	r3, [r4, #12]
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd7e:	b15b      	cbz	r3, 800bd98 <__smakebuf_r+0x70>
 800bd80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd84:	4630      	mov	r0, r6
 800bd86:	f000 f81d 	bl	800bdc4 <_isatty_r>
 800bd8a:	b128      	cbz	r0, 800bd98 <__smakebuf_r+0x70>
 800bd8c:	89a3      	ldrh	r3, [r4, #12]
 800bd8e:	f023 0303 	bic.w	r3, r3, #3
 800bd92:	f043 0301 	orr.w	r3, r3, #1
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	431d      	orrs	r5, r3
 800bd9c:	81a5      	strh	r5, [r4, #12]
 800bd9e:	e7cf      	b.n	800bd40 <__smakebuf_r+0x18>

0800bda0 <_fstat_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4d07      	ldr	r5, [pc, #28]	@ (800bdc0 <_fstat_r+0x20>)
 800bda4:	2300      	movs	r3, #0
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	4611      	mov	r1, r2
 800bdac:	602b      	str	r3, [r5, #0]
 800bdae:	f7f5 f9bf 	bl	8001130 <_fstat>
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	d102      	bne.n	800bdbc <_fstat_r+0x1c>
 800bdb6:	682b      	ldr	r3, [r5, #0]
 800bdb8:	b103      	cbz	r3, 800bdbc <_fstat_r+0x1c>
 800bdba:	6023      	str	r3, [r4, #0]
 800bdbc:	bd38      	pop	{r3, r4, r5, pc}
 800bdbe:	bf00      	nop
 800bdc0:	240005e0 	.word	0x240005e0

0800bdc4 <_isatty_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d06      	ldr	r5, [pc, #24]	@ (800bde0 <_isatty_r+0x1c>)
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4604      	mov	r4, r0
 800bdcc:	4608      	mov	r0, r1
 800bdce:	602b      	str	r3, [r5, #0]
 800bdd0:	f7f5 f9be 	bl	8001150 <_isatty>
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	d102      	bne.n	800bdde <_isatty_r+0x1a>
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	b103      	cbz	r3, 800bdde <_isatty_r+0x1a>
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	240005e0 	.word	0x240005e0

0800bde4 <_sbrk_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	4d06      	ldr	r5, [pc, #24]	@ (800be00 <_sbrk_r+0x1c>)
 800bde8:	2300      	movs	r3, #0
 800bdea:	4604      	mov	r4, r0
 800bdec:	4608      	mov	r0, r1
 800bdee:	602b      	str	r3, [r5, #0]
 800bdf0:	f7f5 f9c6 	bl	8001180 <_sbrk>
 800bdf4:	1c43      	adds	r3, r0, #1
 800bdf6:	d102      	bne.n	800bdfe <_sbrk_r+0x1a>
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	b103      	cbz	r3, 800bdfe <_sbrk_r+0x1a>
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	240005e0 	.word	0x240005e0

0800be04 <memcpy>:
 800be04:	440a      	add	r2, r1
 800be06:	4291      	cmp	r1, r2
 800be08:	f100 33ff 	add.w	r3, r0, #4294967295
 800be0c:	d100      	bne.n	800be10 <memcpy+0xc>
 800be0e:	4770      	bx	lr
 800be10:	b510      	push	{r4, lr}
 800be12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be1a:	4291      	cmp	r1, r2
 800be1c:	d1f9      	bne.n	800be12 <memcpy+0xe>
 800be1e:	bd10      	pop	{r4, pc}

0800be20 <__assert_func>:
 800be20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be22:	4614      	mov	r4, r2
 800be24:	461a      	mov	r2, r3
 800be26:	4b09      	ldr	r3, [pc, #36]	@ (800be4c <__assert_func+0x2c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4605      	mov	r5, r0
 800be2c:	68d8      	ldr	r0, [r3, #12]
 800be2e:	b14c      	cbz	r4, 800be44 <__assert_func+0x24>
 800be30:	4b07      	ldr	r3, [pc, #28]	@ (800be50 <__assert_func+0x30>)
 800be32:	9100      	str	r1, [sp, #0]
 800be34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be38:	4906      	ldr	r1, [pc, #24]	@ (800be54 <__assert_func+0x34>)
 800be3a:	462b      	mov	r3, r5
 800be3c:	f000 f842 	bl	800bec4 <fiprintf>
 800be40:	f000 f852 	bl	800bee8 <abort>
 800be44:	4b04      	ldr	r3, [pc, #16]	@ (800be58 <__assert_func+0x38>)
 800be46:	461c      	mov	r4, r3
 800be48:	e7f3      	b.n	800be32 <__assert_func+0x12>
 800be4a:	bf00      	nop
 800be4c:	2400001c 	.word	0x2400001c
 800be50:	0800c229 	.word	0x0800c229
 800be54:	0800c236 	.word	0x0800c236
 800be58:	0800c264 	.word	0x0800c264

0800be5c <_calloc_r>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	fba1 5402 	umull	r5, r4, r1, r2
 800be62:	b934      	cbnz	r4, 800be72 <_calloc_r+0x16>
 800be64:	4629      	mov	r1, r5
 800be66:	f7ff f945 	bl	800b0f4 <_malloc_r>
 800be6a:	4606      	mov	r6, r0
 800be6c:	b928      	cbnz	r0, 800be7a <_calloc_r+0x1e>
 800be6e:	4630      	mov	r0, r6
 800be70:	bd70      	pop	{r4, r5, r6, pc}
 800be72:	220c      	movs	r2, #12
 800be74:	6002      	str	r2, [r0, #0]
 800be76:	2600      	movs	r6, #0
 800be78:	e7f9      	b.n	800be6e <_calloc_r+0x12>
 800be7a:	462a      	mov	r2, r5
 800be7c:	4621      	mov	r1, r4
 800be7e:	f7fe fa5f 	bl	800a340 <memset>
 800be82:	e7f4      	b.n	800be6e <_calloc_r+0x12>

0800be84 <__ascii_mbtowc>:
 800be84:	b082      	sub	sp, #8
 800be86:	b901      	cbnz	r1, 800be8a <__ascii_mbtowc+0x6>
 800be88:	a901      	add	r1, sp, #4
 800be8a:	b142      	cbz	r2, 800be9e <__ascii_mbtowc+0x1a>
 800be8c:	b14b      	cbz	r3, 800bea2 <__ascii_mbtowc+0x1e>
 800be8e:	7813      	ldrb	r3, [r2, #0]
 800be90:	600b      	str	r3, [r1, #0]
 800be92:	7812      	ldrb	r2, [r2, #0]
 800be94:	1e10      	subs	r0, r2, #0
 800be96:	bf18      	it	ne
 800be98:	2001      	movne	r0, #1
 800be9a:	b002      	add	sp, #8
 800be9c:	4770      	bx	lr
 800be9e:	4610      	mov	r0, r2
 800bea0:	e7fb      	b.n	800be9a <__ascii_mbtowc+0x16>
 800bea2:	f06f 0001 	mvn.w	r0, #1
 800bea6:	e7f8      	b.n	800be9a <__ascii_mbtowc+0x16>

0800bea8 <__ascii_wctomb>:
 800bea8:	4603      	mov	r3, r0
 800beaa:	4608      	mov	r0, r1
 800beac:	b141      	cbz	r1, 800bec0 <__ascii_wctomb+0x18>
 800beae:	2aff      	cmp	r2, #255	@ 0xff
 800beb0:	d904      	bls.n	800bebc <__ascii_wctomb+0x14>
 800beb2:	228a      	movs	r2, #138	@ 0x8a
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	f04f 30ff 	mov.w	r0, #4294967295
 800beba:	4770      	bx	lr
 800bebc:	700a      	strb	r2, [r1, #0]
 800bebe:	2001      	movs	r0, #1
 800bec0:	4770      	bx	lr
	...

0800bec4 <fiprintf>:
 800bec4:	b40e      	push	{r1, r2, r3}
 800bec6:	b503      	push	{r0, r1, lr}
 800bec8:	4601      	mov	r1, r0
 800beca:	ab03      	add	r3, sp, #12
 800becc:	4805      	ldr	r0, [pc, #20]	@ (800bee4 <fiprintf+0x20>)
 800bece:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed2:	6800      	ldr	r0, [r0, #0]
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	f7ff fd3d 	bl	800b954 <_vfiprintf_r>
 800beda:	b002      	add	sp, #8
 800bedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bee0:	b003      	add	sp, #12
 800bee2:	4770      	bx	lr
 800bee4:	2400001c 	.word	0x2400001c

0800bee8 <abort>:
 800bee8:	b508      	push	{r3, lr}
 800beea:	2006      	movs	r0, #6
 800beec:	f000 f82c 	bl	800bf48 <raise>
 800bef0:	2001      	movs	r0, #1
 800bef2:	f7f5 f8e9 	bl	80010c8 <_exit>

0800bef6 <_raise_r>:
 800bef6:	291f      	cmp	r1, #31
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4605      	mov	r5, r0
 800befc:	460c      	mov	r4, r1
 800befe:	d904      	bls.n	800bf0a <_raise_r+0x14>
 800bf00:	2316      	movs	r3, #22
 800bf02:	6003      	str	r3, [r0, #0]
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	bd38      	pop	{r3, r4, r5, pc}
 800bf0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf0c:	b112      	cbz	r2, 800bf14 <_raise_r+0x1e>
 800bf0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf12:	b94b      	cbnz	r3, 800bf28 <_raise_r+0x32>
 800bf14:	4628      	mov	r0, r5
 800bf16:	f000 f831 	bl	800bf7c <_getpid_r>
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	4601      	mov	r1, r0
 800bf1e:	4628      	mov	r0, r5
 800bf20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf24:	f000 b818 	b.w	800bf58 <_kill_r>
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d00a      	beq.n	800bf42 <_raise_r+0x4c>
 800bf2c:	1c59      	adds	r1, r3, #1
 800bf2e:	d103      	bne.n	800bf38 <_raise_r+0x42>
 800bf30:	2316      	movs	r3, #22
 800bf32:	6003      	str	r3, [r0, #0]
 800bf34:	2001      	movs	r0, #1
 800bf36:	e7e7      	b.n	800bf08 <_raise_r+0x12>
 800bf38:	2100      	movs	r1, #0
 800bf3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4798      	blx	r3
 800bf42:	2000      	movs	r0, #0
 800bf44:	e7e0      	b.n	800bf08 <_raise_r+0x12>
	...

0800bf48 <raise>:
 800bf48:	4b02      	ldr	r3, [pc, #8]	@ (800bf54 <raise+0xc>)
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	6818      	ldr	r0, [r3, #0]
 800bf4e:	f7ff bfd2 	b.w	800bef6 <_raise_r>
 800bf52:	bf00      	nop
 800bf54:	2400001c 	.word	0x2400001c

0800bf58 <_kill_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d07      	ldr	r5, [pc, #28]	@ (800bf78 <_kill_r+0x20>)
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4608      	mov	r0, r1
 800bf62:	4611      	mov	r1, r2
 800bf64:	602b      	str	r3, [r5, #0]
 800bf66:	f7f5 f89f 	bl	80010a8 <_kill>
 800bf6a:	1c43      	adds	r3, r0, #1
 800bf6c:	d102      	bne.n	800bf74 <_kill_r+0x1c>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	b103      	cbz	r3, 800bf74 <_kill_r+0x1c>
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
 800bf76:	bf00      	nop
 800bf78:	240005e0 	.word	0x240005e0

0800bf7c <_getpid_r>:
 800bf7c:	f7f5 b88c 	b.w	8001098 <_getpid>

0800bf80 <_init>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr

0800bf8c <_fini>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	bf00      	nop
 800bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf92:	bc08      	pop	{r3}
 800bf94:	469e      	mov	lr, r3
 800bf96:	4770      	bx	lr
